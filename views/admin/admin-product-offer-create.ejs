<%- include("partials/header", { activePage: 'product-offers' }) %>
<!-- Flatpickr CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<div class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
  <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Create Product Offer</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
      <a href="/admin/product-offers" class="btn btn-sm btn-outline-secondary">
        <i class="fas fa-arrow-left"></i> Back to Product Offers
      </a>
    </div>
  </div>

  <% if (error && error.length > 0) { %>
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
      <%= error %>
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  <% } %>

  <div class="card">
    <div class="card-header bg-primary text-white">
      <i class="fas fa-box me-1"></i>
      New Product Offer
    </div>
    <div class="card-body">
      <form action="/admin/product-offers/create" method="POST" id="productOfferForm" novalidate>
        <div class="row mb-3">
          <div class="col-md-6">
            <label for="name" class="form-label">Offer Name <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="name" name="name"
                   pattern="^[a-zA-Z0-9\s]{3,50}$"
                   title="Name must be 3-50 characters and contain only letters, numbers, and spaces"
                   required>
            <div class="invalid-feedback">
              Name must be 3-50 characters and contain only letters, numbers, and spaces
            </div>
            <small class="form-text text-muted">3-50 characters, letters, numbers and spaces only</small>
          </div>
          <div class="col-md-6">
            <label for="discountType" class="form-label">Discount Type <span class="text-danger">*</span></label>
            <select class="form-select" id="discountType" name="discountType" required>
              <option value="">Choose discount type</option>
              <option value="percentage">Percentage Discount (e.g., 10% off)</option>
              <option value="fixed">Fixed Amount Discount (e.g., ₹100 off)</option>
            </select>
            <div class="invalid-feedback">
              Please select a discount type
            </div>
            <small class="form-text text-muted">Choose between percentage or fixed amount discount</small>
          </div>
        </div>

        <div class="mb-3">
          <label for="description" class="form-label">Description <span class="text-danger">*</span></label>
          <textarea class="form-control" id="description" name="description" rows="3"
                    minlength="10" maxlength="200" required></textarea>
          <div class="invalid-feedback">
            Description must be between 10 and 200 characters
          </div>
          <small class="form-text text-muted">10-200 characters</small>
        </div>

        <div class="row mb-3">
          <div class="col-md-4">
            <label for="discountValue" class="form-label">Discount Value <span class="text-danger">*</span></label>
            <input type="number" class="form-control" id="discountValue" name="discountValue"
                   min="0.01" max="100" step="0.01" required>
            <div class="invalid-feedback" id="discountValueFeedback">
              Discount value must be a positive number
            </div>
            <small class="form-text text-muted" id="discountValueHelp">Enter 10 for 10% discount or 100 for ₹100 discount</small>
          </div>
          <div class="col-md-4">
            <label for="maxDiscountAmount" class="form-label">Maximum Discount Limit (Optional)</label>
            <input type="number" class="form-control" id="maxDiscountAmount" name="maxDiscountAmount"
                   min="0.01" step="0.01">
            <div class="invalid-feedback">
              Maximum discount amount must be a positive number
            </div>
            <small class="form-text text-muted">Cap the maximum discount amount (e.g., 10% off but max ₹500 discount)</small>
          </div>
          <div class="col-md-4">
            <label for="minPurchaseAmount" class="form-label">Minimum Purchase Amount (Optional)</label>
            <input type="number" class="form-control" id="minPurchaseAmount" name="minPurchaseAmount"
                   min="0" step="0.01">
            <div class="invalid-feedback">
              Minimum purchase amount must be a non-negative number
            </div>
            <small class="form-text text-muted">Customer must spend at least this amount to use this offer</small>
          </div>
        </div>

        <div class="row mb-3">
          <div class="col-md-6">
            <label for="startDate" class="form-label">Start Date & Time <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="startDate" name="startDate"
                   placeholder="Select when offer starts" required>
            <div class="invalid-feedback">
              Start date is required and must be in the future
            </div>
            <small class="form-text text-muted">When customers can start using this offer</small>
          </div>
          <div class="col-md-6">
            <label for="endDate" class="form-label">End Date & Time <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="endDate" name="endDate"
                   placeholder="Select when offer ends" required>
            <div class="invalid-feedback">
              End date is required and must be after start date
            </div>
            <small class="form-text text-muted">When this offer stops working (max 90 days from start)</small>
          </div>
        </div>

        <!-- Product Selection -->
        <div class="mb-4">
          <label class="form-label fw-bold">Select Products <span class="text-danger">*</span></label>
          <p class="text-muted">Choose which products will get this discount offer</p>

          <div class="mb-3">
            <input type="text" class="form-control" id="productSearch" placeholder="Search products by name...">
          </div>

          <div class="card">
            <div class="card-header bg-light">
              <div class="d-flex justify-content-between align-items-center">
                <span>Available Products</span>
                <div>
                  <button type="button" class="btn btn-sm btn-outline-primary select-all-products">Select All</button>
                  <button type="button" class="btn btn-sm btn-outline-secondary clear-all-products">Clear All</button>
                </div>
              </div>
            </div>
            <div class="card-body" style="max-height: 300px; overflow-y: auto;">
              <div class="row" id="productList">
                <% products.forEach(product => { %>
                  <div class="col-md-6 mb-2 product-item">
                    <div class="form-check">
                      <input class="form-check-input product-checkbox" type="checkbox" value="<%= product._id %>" id="product_<%= product._id %>" name="applicableProducts">
                      <label class="form-check-label d-flex justify-content-between" for="product_<%= product._id %>">
                        <span class="product-name"><%= product.productName %></span>
                        <span class="text-primary">₹<%= product.salePrice %></span>
                      </label>
                    </div>
                  </div>
                <% }); %>
              </div>
            </div>
            <div class="card-footer bg-light">
              <span id="selectedProductsCount">0</span> products selected
            </div>
          </div>

          <div class="mt-3" id="productOfferPreview" style="display: none;">
            <div class="card border-success">
              <div class="card-header bg-success text-white">
                Offer Preview
              </div>
              <div class="card-body">
                <div class="row">
                  <div class="col-md-6">
                    <h6>Sample Product:</h6>
                    <div id="sampleProductName"></div>
                    <div>Original Price: ₹<span id="sampleProductPrice"></span></div>
                  </div>
                  <div class="col-md-6">
                    <h6>After Offer:</h6>
                    <div>Discount: <span id="sampleProductDiscount"></span></div>
                    <div>Final Price: ₹<span id="sampleProductFinalPrice" class="text-success fw-bold"></span></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
          <button type="submit" class="btn btn-primary" id="submitBtn">Create Product Offer</button>
        </div>
      </form>

      <!-- Validation error summary -->
      <div class="alert alert-danger mt-3" id="validationErrors" style="display: none;">
        <h5><i class="fas fa-exclamation-triangle me-2"></i>Please fix the following errors:</h5>
        <ul id="errorList"></ul>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('productOfferForm');
    const discountTypeSelect = document.getElementById('discountType');
    const discountValueInput = document.getElementById('discountValue');
    const maxDiscountAmountInput = document.getElementById('maxDiscountAmount');
    const nameInput = document.getElementById('name');
    const descriptionInput = document.getElementById('description');
    const minPurchaseAmountInput = document.getElementById('minPurchaseAmount');
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const validationErrorsDiv = document.getElementById('validationErrors');
    const errorList = document.getElementById('errorList');

    // Product selection elements
    const productSearch = document.getElementById('productSearch');
    const productItems = document.querySelectorAll('.product-item');
    const productCheckboxes = document.querySelectorAll('.product-checkbox');
    const selectAllProductsBtn = document.querySelector('.select-all-products');
    const clearAllProductsBtn = document.querySelector('.clear-all-products');
    const selectedProductsCount = document.getElementById('selectedProductsCount');
    const productOfferPreview = document.getElementById('productOfferPreview');

    // Form validation
    form.addEventListener('submit', function(event) {
      let isValid = true;
      let errors = [];

      // Clear previous errors
      form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
      errorList.innerHTML = '';
      validationErrorsDiv.style.display = 'none';

      // Validate name (alphanumeric with spaces, min 3 chars, max 50 chars)
      if (!nameInput.value.trim() || !/^[a-zA-Z0-9\s]{3,50}$/.test(nameInput.value.trim())) {
        isValid = false;
        nameInput.classList.add('is-invalid');
        errors.push('Offer name must be 3-50 characters and contain only letters, numbers, and spaces');
      }

      // Validate description (min 10 chars, max 200 chars)
      if (!descriptionInput.value.trim() || descriptionInput.value.trim().length < 10 || descriptionInput.value.trim().length > 200) {
        isValid = false;
        descriptionInput.classList.add('is-invalid');
        errors.push('Description must be between 10 and 200 characters');
      }

      // Validate discount type
      if (!discountTypeSelect.value) {
        isValid = false;
        discountTypeSelect.classList.add('is-invalid');
        errors.push('Please select a discount type');
      }

      // Validate discount value
      const discountValue = parseFloat(discountValueInput.value);
      if (isNaN(discountValue) || discountValue <= 0) {
        isValid = false;
        discountValueInput.classList.add('is-invalid');
        errors.push('Discount value must be a positive number');
      } else if (discountTypeSelect.value === 'percentage' && discountValue > 100) {
        isValid = false;
        discountValueInput.classList.add('is-invalid');
        document.getElementById('discountValueFeedback').textContent = 'Percentage discount cannot exceed 100%';
        errors.push('Percentage discount cannot exceed 100%');
      }

      // Validate max discount amount (if provided)
      if (maxDiscountAmountInput.value) {
        const maxDiscountAmount = parseFloat(maxDiscountAmountInput.value);
        if (isNaN(maxDiscountAmount) || maxDiscountAmount <= 0) {
          isValid = false;
          maxDiscountAmountInput.classList.add('is-invalid');
          errors.push('Maximum discount amount must be a positive number');
        }
      }

      // Validate minimum purchase amount (if provided)
      if (minPurchaseAmountInput.value) {
        const minPurchaseAmount = parseFloat(minPurchaseAmountInput.value);
        if (isNaN(minPurchaseAmount) || minPurchaseAmount < 0) {
          isValid = false;
          minPurchaseAmountInput.classList.add('is-invalid');
          errors.push('Minimum purchase amount must be a non-negative number');
        }
      }

      // Validate dates
      if (!startDateInput.value || !endDateInput.value) {
        isValid = false;
        if (!startDateInput.value) {
          startDateInput.classList.add('is-invalid');
          errors.push('Start date is required');
        }
        if (!endDateInput.value) {
          endDateInput.classList.add('is-invalid');
          errors.push('End date is required');
        }
      } else {
        const startDate = new Date(startDateInput.value);
        const endDate = new Date(endDateInput.value);
        const now = new Date();

        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
          isValid = false;
          if (isNaN(startDate.getTime())) {
            startDateInput.classList.add('is-invalid');
            errors.push('Invalid start date format');
          }
          if (isNaN(endDate.getTime())) {
            endDateInput.classList.add('is-invalid');
            errors.push('Invalid end date format');
          }
        } else {
          // No longer requiring start date to be in the future
          // Removed validation that prevents past start dates

          // Check if end date is after start date
          if (endDate <= startDate) {
            isValid = false;
            endDateInput.classList.add('is-invalid');
            errors.push('End date must be after start date');
          }

          // Check if offer duration is not more than 90 days
          const durationInDays = (endDate - startDate) / (1000 * 60 * 60 * 24);
          if (durationInDays > 90) {
            isValid = false;
            endDateInput.classList.add('is-invalid');
            errors.push('Offer duration cannot exceed 90 days');
          }
        }
      }

      // Validate product selection
      const selectedProducts = document.querySelectorAll('.product-checkbox:checked');
      if (selectedProducts.length === 0) {
        isValid = false;
        errors.push('Please select at least one product');
      }

      // If there are errors, prevent form submission and show error messages
      if (!isValid) {
        event.preventDefault();

        // Display errors
        errors.forEach(error => {
          const li = document.createElement('li');
          li.textContent = error;
          errorList.appendChild(li);
        });

        validationErrorsDiv.style.display = 'block';

        // Scroll to the error summary
        validationErrorsDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });

    // Set min date for start date to today
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('startDate').min = today;

    // Set min date for end date to start date
    document.getElementById('startDate').addEventListener('change', function() {
      document.getElementById('endDate').min = this.value;
    });

    // Show/hide max discount amount based on discount type
    discountTypeSelect.addEventListener('change', function() {
      const maxDiscountField = document.getElementById('maxDiscountAmount');
      if (this.value === 'percentage') {
        maxDiscountField.parentElement.style.display = 'block';
      } else {
        maxDiscountField.parentElement.style.display = 'none';
        maxDiscountField.value = '';
      }
      updateProductOfferPreview();
    });

    // Update offer preview when discount value changes
    discountValueInput.addEventListener('input', function() {
      updateProductOfferPreview();
    });

    // Update offer preview when max discount amount changes
    maxDiscountAmountInput.addEventListener('input', function() {
      updateProductOfferPreview();
    });

    // Product search functionality
    productSearch.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();

      productItems.forEach(item => {
        const productName = item.querySelector('.product-name').textContent.toLowerCase();
        if (productName.includes(searchTerm)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    });

    // Select all products
    selectAllProductsBtn.addEventListener('click', function() {
      productCheckboxes.forEach(checkbox => {
        const item = checkbox.closest('.product-item');
        if (item.style.display !== 'none') {
          checkbox.checked = true;
        }
      });
      updateProductSelectionCount();
      updateProductOfferPreview();
    });

    // Clear all products
    clearAllProductsBtn.addEventListener('click', function() {
      productCheckboxes.forEach(checkbox => {
        checkbox.checked = false;
      });
      updateProductSelectionCount();
      updateProductOfferPreview();
    });

    // Update product selection count when checkboxes change
    productCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        updateProductSelectionCount();
        updateProductOfferPreview();
      });
    });

    // Function to update product selection count
    function updateProductSelectionCount() {
      const selectedCount = document.querySelectorAll('.product-checkbox:checked').length;
      selectedProductsCount.textContent = selectedCount;

      // Form validation - at least one product must be selected
      const submitBtn = document.querySelector('button[type="submit"]');
      if (selectedCount === 0) {
        submitBtn.disabled = true;
      } else {
        submitBtn.disabled = false;
      }
    }

    // Function to update product offer preview
    function updateProductOfferPreview() {
      const selectedProducts = document.querySelectorAll('.product-checkbox:checked');

      if (selectedProducts.length > 0 && discountValueInput.value && discountTypeSelect.value) {
        // Get a sample product (first selected)
        const sampleProductId = selectedProducts[0].value;
        const sampleProductElement = document.getElementById(`product_${sampleProductId}`).closest('.product-item');
        const sampleProductName = sampleProductElement.querySelector('.product-name').textContent;
        const sampleProductPrice = parseFloat(sampleProductElement.querySelector('.text-primary').textContent.replace('₹', ''));

        // Calculate discount
        let discountAmount = 0;
        const discountValue = parseFloat(discountValueInput.value);

        if (discountTypeSelect.value === 'percentage') {
          discountAmount = (sampleProductPrice * discountValue) / 100;

          // Apply max discount cap if specified
          const maxDiscountAmount = parseFloat(maxDiscountAmountInput.value);
          if (!isNaN(maxDiscountAmount) && discountAmount > maxDiscountAmount) {
            discountAmount = maxDiscountAmount;
          }
        } else {
          discountAmount = discountValue;

          // Ensure discount doesn't exceed the price
          if (discountAmount > sampleProductPrice) {
            discountAmount = sampleProductPrice;
          }
        }

        const finalPrice = sampleProductPrice - discountAmount;

        // Update preview
        document.getElementById('sampleProductName').textContent = sampleProductName;
        document.getElementById('sampleProductPrice').textContent = sampleProductPrice.toFixed(2);

        if (discountTypeSelect.value === 'percentage') {
          document.getElementById('sampleProductDiscount').textContent = `${discountValue}% (₹${discountAmount.toFixed(2)})`;
        } else {
          document.getElementById('sampleProductDiscount').textContent = `₹${discountAmount.toFixed(2)}`;
        }

        document.getElementById('sampleProductFinalPrice').textContent = finalPrice.toFixed(2);

        productOfferPreview.style.display = 'block';
      } else {
        productOfferPreview.style.display = 'none';
      }
    }

    // Initialize
    updateProductSelectionCount();
  });
</script>

<!-- Flatpickr JS -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script>
  // Initialize Flatpickr for date/time pickers
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize start date picker with time
    const startDatePicker = flatpickr("#startDate", {
      enableTime: true,
      dateFormat: "Y-m-d H:i",
      time_24hr: true,
      // Allow selecting dates in the past
      onChange: function(selectedDates, dateStr) {
        // Update end date min date when start date changes
        endDatePicker.set("minDate", dateStr);
      }
    });

    // Initialize end date picker with time
    const endDatePicker = flatpickr("#endDate", {
      enableTime: true,
      dateFormat: "Y-m-d H:i",
      time_24hr: true,
      // minDate will be set by the onChange function of startDatePicker
    });
  });
</script>

<%- include("partials/footer") %>
