<%- include("partials/header", { activePage: 'orders' }) %>

<div class="container-fluid">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Order Details</h1>
        <div class="btn-toolbar mb-2 mb-md-0">
            <a href="/admin/return-requests" class="btn btn-sm btn-outline-secondary me-2">
                <i class="fas fa-exchange-alt"></i> View Return Requests
            </a>
            <a href="/admin/orders" class="btn btn-sm btn-outline-primary">
                <i class="fas fa-arrow-left"></i> Back to Orders
            </a>
        </div>
    </div>

    <style>
        .return-reason {
            background-color: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 10px;
            margin-top: 10px;
            border-radius: 4px;
        }
        .return-completed {
            background-color: #f8f9fa;
            border-left: 4px solid #6c757d;
            padding: 10px;
            margin-top: 10px;
            border-radius: 4px;
        }
        .btn-approve {
            background-color: #28a745;
            color: white;
            margin-right: 5px;
        }
        .btn-reject {
            background-color: #dc3545;
            color: white;
        }
        .return-actions {
            margin-top: 10px;
            display: flex;
        }
        .admin-response {
            margin-top: 8px;
            font-style: italic;
            color: #6c757d;
        }
    </style>

    <!-- Order Summary -->
    <div class="row mb-4">
        <div class="col-lg-8">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">
                        Order #<%= order.displayOrderId || order._id %>
                        <%
                        let statusBadgeClass = 'bg-secondary';
                        if (order.status === 'Delivered') statusBadgeClass = 'bg-success';
                        if (order.status === 'Processing') statusBadgeClass = 'bg-primary';
                        if (order.status === 'Shipped') statusBadgeClass = 'bg-info';
                        if (order.status === 'Cancelled') statusBadgeClass = 'bg-danger';
                        if (order.status === 'Returned') statusBadgeClass = 'bg-warning';
                        %>
                        <span class="badge <%= statusBadgeClass %> ms-2"><%= order.status %></span>

                        <% if (order.allItemsCancelled) { %>
                            <span class="badge bg-danger ms-2">All Items Cancelled</span>
                        <% } %>
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-xs font-weight-bold text-primary text-uppercase mb-2">Customer Information</h6>
                            <p class="mb-2">
                                <i class="fas fa-user me-2 text-gray-500"></i>
                                <strong><%= order.userName %></strong>
                            </p>
                            <p class="mb-2">
                                <i class="fas fa-envelope me-2 text-gray-500"></i>
                                <%= order.userEmail %>
                            </p>
                            <p class="mb-2">
                                <i class="fas fa-calendar me-2 text-gray-500"></i>
                                <strong>Order Date:</strong> <%= order.formattedOrderDate %>
                            </p>
                            <p class="mb-2">
                                <i class="fas fa-truck me-2 text-gray-500"></i>
                                <strong>Delivery Date:</strong> <%= order.formattedDeliveryDate %>
                            </p>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-xs font-weight-bold text-primary text-uppercase mb-2">Payment Information</h6>
                            <p class="mb-2">
                                <i class="fas fa-credit-card me-2 text-gray-500"></i>
                                <strong>Method:</strong> <%= order.paymentMethod.toUpperCase() %>
                            </p>
                            <p class="mb-2">
                                <i class="fas fa-check-circle me-2 text-gray-500"></i>
                                <strong>Status:</strong>
                                <%
                                let paymentStatusClass = 'bg-secondary';
                                if (order.paymentStatus === 'Paid') paymentStatusClass = 'bg-success';
                                if (order.paymentStatus === 'Pending') paymentStatusClass = 'bg-warning';
                                if (order.paymentStatus === 'Failed' || order.paymentStatus === 'Cancelled') paymentStatusClass = 'bg-danger';
                                %>
                                <span class="badge <%= paymentStatusClass %>">
                                    <% if (order.allItemsCancelled && (order.paymentStatus === 'Cancelled' || order.paymentStatus === 'Failed' || order.paymentStatus === 'Pending')) { %>
                                        Cancelled
                                    <% } else { %>
                                        <%= order.paymentStatus %>
                                    <% } %>
                                </span>
                            </p>
                            <h6 class="text-xs font-weight-bold text-primary text-uppercase mt-3 mb-2">Shipping Address</h6>
                            <address class="mb-0">
                                <i class="fas fa-map-marker-alt me-2 text-gray-500"></i>
                                <%= order.shippingAddress.fullName %><br>
                                <span class="ms-4"><%= order.shippingAddress.landmark ? order.shippingAddress.landmark + '<br>' : '' %></span>
                                <span class="ms-4"><%= order.shippingAddress.city %>, <%= order.shippingAddress.state %> <%= order.shippingAddress.pincode %></span><br>
                                <i class="fas fa-phone me-2 text-gray-500"></i>
                                <%= order.shippingAddress.phone %>
                            </address>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Totals Summary Card -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Order Summary</h6>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <span class="text-gray-600">Subtotal:</span>
                        <span class="font-weight-bold">₹<%= order.subtotal %></span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span class="text-gray-600">Shipping:</span>
                        <span>₹<%= order.shipping %></span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span class="text-gray-600">Discount:</span>
                        <span class="text-success">- ₹<%= order.discount %></span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span class="text-gray-600">Tax:</span>
                        <span>₹<%= order.tax %></span>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between">
                        <span class="text-gray-800 font-weight-bold">Total:</span>
                        <span class="font-weight-bold text-primary">₹<%= order.total %></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Order Items -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Order Items</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Total</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% order.items.forEach(item => { %>
                            <tr data-product-id="<%= item.product._id %>">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <img src="<%= item.product.mainImage %>" alt="<%= item.product.productName %>" class="me-3 rounded" style="width: 50px; height: 50px; object-fit: cover;">
                                        <div>
                                            <strong><%= item.product.productName %></strong>
                                            <div class="small text-muted">ID: <%= item.product._id.toString().substring(0, 8) %></div>
                                        </div>
                                    </div>
                                </td>
                                <td class="align-middle"><%= item.quantity %></td>
                                <td class="align-middle">
                                    <% if (item.originalPrice && item.originalPrice > item.price) { %>
                                        <span class="text-decoration-line-through text-muted">$<%= item.originalPrice.toFixed(2) %></span><br>
                                        <strong class="text-success">$<%= item.price.toFixed(2) %></strong>
                                        <% if (item.discountPercentage > 0) { %>
                                            <span class="badge bg-danger ms-1"><%= Math.round(item.discountPercentage) %>% OFF</span>
                                        <% } %>
                                    <% } else { %>
                                        $<%= item.price.toFixed(2) %>
                                    <% } %>
                                </td>
                                <td class="align-middle">
                                    <% if (item.originalPrice && item.originalPrice > item.price) { %>
                                        <span class="text-decoration-line-through text-muted">$<%= (item.originalPrice * item.quantity).toFixed(2) %></span><br>
                                        <strong class="text-success">$<%= (item.price * item.quantity).toFixed(2) %></strong>
                                    <% } else { %>
                                        <strong>$<%= (item.price * item.quantity).toFixed(2) %></strong>
                                    <% } %>
                                </td>
                                <td class="align-middle status-cell">
                                    <%
                                    let badgeClass = 'bg-secondary';
                                    if (item.status === 'Delivered') badgeClass = 'bg-success';
                                    if (item.status === 'Processing') badgeClass = 'bg-primary';
                                    if (item.status === 'Shipped') badgeClass = 'bg-info';
                                    if (item.status === 'Cancelled') badgeClass = 'bg-danger';
                                    if (item.status === 'Return Request') badgeClass = 'bg-warning';
                                    if (item.status === 'Returned') badgeClass = 'bg-secondary';
                                    if (item.status === 'Partially Cancelled') badgeClass = 'bg-danger';
                                    %>

                                    <span class="badge <%= badgeClass %>"><%= item.status %></span>

                                    <% if (item.status === 'Return Request' && item.returnReason) { %>
                                        <div class="return-reason mt-2">
                                            <strong>Return Reason:</strong> <%= item.returnReason %>
                                            <div class="return-actions">
                                                <button class="btn btn-sm btn-approve btn-approve-return"
                                                        data-order-id="<%= order._id %>"
                                                        data-product-id="<%= item.product._id %>">
                                                    <i class="fas fa-check me-1"></i> Approve
                                                </button>
                                                <button class="btn btn-sm btn-reject btn-reject-return"
                                                        data-order-id="<%= order._id %>"
                                                        data-product-id="<%= item.product._id %>">
                                                    <i class="fas fa-times me-1"></i> Reject
                                                </button>
                                            </div>
                                        </div>
                                    <% } %>

                                    <% if (item.status === 'Returned' && item.returnReason) { %>
                                        <div class="return-completed mt-2">
                                            <strong>Return Reason:</strong> <%= item.returnReason %>
                                            <div class="mt-2">
                                                <span class="badge bg-secondary">Return Completed</span>
                                            </div>
                                        </div>
                                    <% } %>

                                    <% if (item.status === 'Delivered' && item.order_return_status === 'Rejected' && item.returnReason) { %>
                                        <div class="return-completed mt-2">
                                            <strong>Return Reason:</strong> <%= item.returnReason %>
                                            <div class="admin-response">
                                                <strong>Admin Response:</strong> <%= item.adminResponse %>
                                            </div>
                                            <div class="mt-2">
                                                <span class="badge bg-danger">Return Rejected</span>
                                            </div>
                                        </div>
                                    <% } %>
                                </td>
                                <td class="align-middle">
                                    <% if (item.status !== 'Return Request' && item.status !== 'Returned' && item.order_return_status !== 'Rejected') { %>
                                        <select class="form-select form-select-sm status-select" data-product-id="<%= item.product._id %>">
                                            <option value="Processing" <%= item.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                            <option value="Shipped" <%= item.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                            <option value="Delivered" <%= item.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                            <option value="Cancelled" <%= item.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                        </select>
                                    <% } else if (item.status === 'Return Request') { %>
                                        <span class="badge bg-warning text-dark">Return Pending</span>
                                    <% } else if (item.status === 'Returned') { %>
                                        <span class="badge bg-secondary">Item Returned</span>
                                    <% } else if (item.order_return_status === 'Rejected') { %>
                                        <span class="badge bg-danger">Return Rejected</span>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Additional Order Information -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Order Timeline</h6>
                </div>
                <div class="card-body">
                    <div class="timeline">
                        <div class="timeline-item">
                            <div class="timeline-item-marker">
                                <div class="timeline-item-marker-text">
                                    <%= order.formattedOrderDate %>
                                </div>
                                <div class="timeline-item-marker-indicator bg-primary"></div>
                            </div>
                            <div class="timeline-item-content">
                                Order placed by <%= order.userName %>
                            </div>
                        </div>

                        <% if (order.status !== 'Cancelled' && !order.allItemsCancelled) { %>
                            <div class="timeline-item">
                                <div class="timeline-item-marker">
                                    <div class="timeline-item-marker-text">
                                        <%= order.formattedDeliveryDate %>
                                    </div>
                                    <div class="timeline-item-marker-indicator bg-success"></div>
                                </div>
                                <div class="timeline-item-content">
                                    Expected delivery date
                                </div>
                            </div>
                        <% } %>

                        <% if (order.allItemsCancelled) { %>
                            <div class="timeline-item">
                                <div class="timeline-item-marker">
                                    <div class="timeline-item-marker-text">
                                        <%= new Date().toLocaleDateString() %>
                                    </div>
                                    <div class="timeline-item-marker-indicator bg-danger"></div>
                                </div>
                                <div class="timeline-item-content">
                                    All items in this order have been cancelled
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .timeline {
        position: relative;
        padding-left: 1.75rem;
        padding-right: 1.75rem;
    }
    .timeline:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0.75rem;
        height: 100%;
        width: 1px;
        background-color: #e3e6ec;
    }
    .timeline .timeline-item {
        position: relative;
        padding-bottom: 1rem;
    }
    .timeline .timeline-item:last-child {
        padding-bottom: 0;
    }
    .timeline .timeline-item-marker {
        position: absolute;
        left: -1.75rem;
        width: 1.75rem;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .timeline .timeline-item-marker-text {
        font-size: 0.75rem;
        color: #a2acba;
        margin-bottom: 0.25rem;
    }
    .timeline .timeline-item-marker-indicator {
        height: 0.75rem;
        width: 0.75rem;
        border-radius: 100%;
        background-color: #fff;
        border: 1px solid #e3e6ec;
    }
    .timeline .timeline-item-content {
        padding: 0 0 0 1rem;
        color: #69707a;
    }
</style>

<%- include("partials/footer") %>

<script>
    // Update Order Status
    document.querySelectorAll('.status-select').forEach(select => {
        select.addEventListener('change', async (e) => {
            const selectElement = e.target;
            const productId = selectElement.dataset.productId;
            const status = selectElement.value;
            const orderId = '<%= order._id %>';

            // Disable select to prevent multiple submissions
            selectElement.disabled = true;

            // Show loading state
            Swal.fire({
                title: 'Updating Status...',
                text: 'Please wait while we update the order status',
                icon: 'info',
                allowOutsideClick: false,
                showConfirmButton: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            try {
                const response = await fetch(`/admin/orders/${orderId}/update-status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': '<%= csrfToken %>'
                    },
                    body: JSON.stringify({ productId, status })
                });

                const result = await response.json();

                if (result.success) {
                    // Show success message
                    Swal.fire({
                        title: 'Status Updated!',
                        text: 'The order item status has been updated successfully',
                        icon: 'success',
                        confirmButtonColor: '#3085d6'
                    }).then(() => {
                        // Reload the page to refresh the status
                        window.location.reload();
                    });
                } else {
                    // Show error message
                    Swal.fire({
                        title: 'Update Failed',
                        text: result.message || 'Failed to update item status',
                        icon: 'error',
                        confirmButtonColor: '#3085d6'
                    });

                    // Re-enable select
                    selectElement.disabled = false;
                }
            } catch (error) {
                // Show error message
                Swal.fire({
                    title: 'Error',
                    text: 'Error updating status: ' + error.message,
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });

                // Re-enable select
                selectElement.disabled = false;
            }
        });
    });

    // Approve Return Request
    document.querySelectorAll('.btn-approve-return').forEach(button => {
        button.addEventListener('click', async (e) => {
            const button = e.target.closest('.btn-approve-return');
            const orderId = button.dataset.orderId;
            const productId = button.dataset.productId;

            // Show confirmation dialog
            const result = await Swal.fire({
                title: 'Approve Return?',
                text: 'This will approve the return request and process a refund to the customer\'s wallet.',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, approve it!'
            });

            if (result.isConfirmed) {
                // Disable button to prevent multiple submissions
                button.disabled = true;

                // Show loading state
                Swal.fire({
                    title: 'Processing...',
                    text: 'Approving return request',
                    icon: 'info',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                try {
                    const response = await fetch(`/admin/orders/${orderId}/approve-return`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'CSRF-Token': '<%= csrfToken %>'
                        },
                        body: JSON.stringify({ productId })
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Show success message
                        Swal.fire({
                            title: 'Return Approved!',
                            text: 'The return request has been approved and refund processed.',
                            icon: 'success',
                            confirmButtonColor: '#28a745'
                        }).then(() => {
                            // Reload the page to refresh the status
                            window.location.reload();
                        });
                    } else {
                        // Show error message
                        Swal.fire({
                            title: 'Error',
                            text: result.message || 'Failed to approve return',
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });

                        // Re-enable button
                        button.disabled = false;
                    }
                } catch (error) {
                    // Show error message
                    Swal.fire({
                        title: 'Error',
                        text: 'Error approving return: ' + error.message,
                        icon: 'error',
                        confirmButtonColor: '#3085d6'
                    });

                    // Re-enable button
                    button.disabled = false;
                }
            }
        });
    });

    // Reject Return Request
    document.querySelectorAll('.btn-reject-return').forEach(button => {
        button.addEventListener('click', async (e) => {
            const button = e.target.closest('.btn-reject-return');
            const orderId = button.dataset.orderId;
            const productId = button.dataset.productId;

            // Show input dialog for rejection reason
            const { value: adminResponse } = await Swal.fire({
                title: 'Reject Return',
                input: 'textarea',
                inputLabel: 'Reason for rejection',
                inputPlaceholder: 'Enter the reason for rejecting this return request...',
                inputAttributes: {
                    'aria-label': 'Reason for rejection'
                },
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Reject Return',
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to provide a reason for rejection!';
                    }
                }
            });

            if (adminResponse) {
                // Disable button to prevent multiple submissions
                button.disabled = true;

                // Show loading state
                Swal.fire({
                    title: 'Processing...',
                    text: 'Rejecting return request',
                    icon: 'info',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                try {
                    const response = await fetch(`/admin/orders/${orderId}/reject-return`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'CSRF-Token': '<%= csrfToken %>'
                        },
                        body: JSON.stringify({ productId, adminResponse })
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Show success message
                        Swal.fire({
                            title: 'Return Rejected!',
                            text: 'The return request has been rejected.',
                            icon: 'success',
                            confirmButtonColor: '#28a745'
                        }).then(() => {
                            // Reload the page to refresh the status
                            window.location.reload();
                        });
                    } else {
                        // Show error message
                        Swal.fire({
                            title: 'Error',
                            text: result.message || 'Failed to reject return',
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });

                        // Re-enable button
                        button.disabled = false;
                    }
                } catch (error) {
                    // Show error message
                    Swal.fire({
                        title: 'Error',
                        text: 'Error rejecting return: ' + error.message,
                        icon: 'error',
                        confirmButtonColor: '#3085d6'
                    });

                    // Re-enable button
                    button.disabled = false;
                }
            }
        });
    });
</script>