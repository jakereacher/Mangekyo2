<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - Admin Panel</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/admin.css">
    <!-- Add SweetAlert CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
    <!-- Add Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Arial', sans-serif;
        }
        .navbar {
            background-color: #333;
            color: #fff;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .navbar a {
            color: #fff;
            text-decoration: none;
            margin-left: 20px;
            transition: color 0.3s;
        }
        .navbar a:hover {
            color: #f0ad4e;
        }
        .nav-links {
            display: flex;
            align-items: center;
        }
        .container {
            max-width: 1200px;
            margin-top: 2rem;
            padding: 0 15px;
        }
        h2.mb-4 {
            color: #343a40;
            font-weight: 600;
            border-bottom: 2px solid #007bff;
            padding-bottom: 0.5rem;
            display: inline-block;
        }
        .card {
            border: none;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }
        .card-header {
            background-color: #007bff;
            color: white;
            font-weight: 500;
            border-radius: 8px 8px 0 0;
            padding: 1rem;
        }
        .card-body {
            padding: 1.5rem;
        }
        .table {
            background-color: #fff;
            border-radius: 8px;
            overflow: hidden;
        }
        .table thead th {
            background-color: #f1f3f5;
            color: #343a40;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.85rem;
            padding: 1rem;
        }
        .table tbody tr {
            transition: background-color 0.2s ease;
        }
        .table tbody tr:hover {
            background-color: #f8f9fa;
        }
        .table td, .table th {
            vertical-align: middle;
            padding: 0.75rem;
        }
        .table img {
            border-radius: 4px;
            object-fit: cover;
        }
        .form-select {
            width: 150px;
            padding: 0.5rem;
            font-size: 0.9rem;
            border-radius: 4px;
            border: 1px solid #ced4da;
            transition: border-color 0.3s ease;
        }
        .form-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        .form-select:disabled {
            background-color: #e9ecef;
            cursor: not-allowed;
        }
        .card-body p {
            margin-bottom: 0.75rem;
            font-size: 0.95rem;
        }
        .card-body p strong {
            color: #343a40;
            min-width: 120px;
            display: inline-block;
        }
        address {
            font-style: normal;
            line-height: 1.6;
            color: #6c757d;
        }
        footer {
            position: relative;
            bottom: 0;
            width: 100%;
            padding: 1rem 0;
            background-color: #343a40;
            color: #fff;
            font-size: 0.9rem;
        }
        .return-reason {
            background-color: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 10px;
            margin-top: 10px;
            border-radius: 4px;
        }
        .return-completed {
            background-color: #f8f9fa;
            border-left: 4px solid #6c757d;
            padding: 10px;
            margin-top: 10px;
            border-radius: 4px;
        }
        .btn-approve {
            background-color: #28a745;
            color: white;
            margin-right: 5px;
        }
        .btn-reject {
            background-color: #dc3545;
            color: white;
        }
        .return-actions {
            margin-top: 10px;
            display: flex;
        }
        .status-badge {
            display: inline-block;
            padding: 0.25em 0.6em;
            font-size: 0.75rem;
            font-weight: 700;
            line-height: 1;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.25rem;
        }
        .status-processing {
            background-color: #17a2b8;
            color: white;
        }
        .status-shipped {
            background-color: #007bff;
            color: white;
        }
        .status-delivered {
            background-color: #28a745;
            color: white;
        }
        .status-cancelled {
            background-color: #dc3545;
            color: white;
        }
        .status-partially-cancelled {
            background-color: #fd7e14;
            color: white;
        }
        .status-return-request {
            background-color: #ffc107;
            color: black;
        }
        .status-returned {
            background-color: #6c757d;
            color: white;
        }
        .status-cancellation-pending {
            background-color: #fd7e14;
            color: white;
        }
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        .btn-returns {
            background-color: #6f42c1;
            color: white;
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border-radius: 4px;
            text-decoration: none;
            transition: background-color 0.3s;
        }
        .btn-returns:hover {
            background-color: #5a32a3;
            color: white;
        }
        .admin-response {
            margin-top: 8px;
            font-style: italic;
            color: #6c757d;
        }
        @media (max-width: 768px) {
            .container {
                padding: 0 10px;
            }
            .card-header h5 {
                font-size: 1.1rem;
            }
            .table {
                font-size: 0.85rem;
            }
            .form-select {
                width: 120px;
            }
            .card-body p strong {
                min-width: 100px;
            }
            .navbar-nav .nav-link {
                padding: 0.5rem;
            }
            .return-actions {
                flex-direction: column;
            }
            .btn-approve, .btn-reject {
                margin-right: 0;
                margin-bottom: 5px;
            }
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
        }
        @media (max-width: 576px) {
            h2.mb-4 {
                font-size: 1.5rem;
            }
            .table thead th {
                font-size: 0.75rem;
            }
            .table td, .table th {
                padding: 0.5rem;
            }
            .form-select {
                width: 100%;
            }
            .card-body p {
                font-size: 0.85rem;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <a class="navbar-brand" href="/admin/dashboard">Admin Panel</a>
        <div class="nav-links">
            <a href="/admin/orders">Orders</a>
            <a href="/admin/products">Products</a>
            <a href="/admin/users">Users</a>
            <a href="/admin/logout">Logout</a>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container mt-5">
        <div class="page-header">
            <h2 class="mb-0">Order Details</h2>
            <div class="d-flex gap-2">
                <a href="/admin/return-requests" class="btn-returns">
                    <i class="fas fa-exchange-alt"></i> View All Return Requests
                </a>
                <a href="/admin/cancellation-requests" class="btn-returns" style="background-color: #dc3545;">
                    <i class="fas fa-times-circle"></i> View All Cancellation Requests
                </a>
            </div>
        </div>

        <!-- Order Summary -->
        <div class="card mb-4">
            <div class="card-header">
                <h5>Order #<%= order.displayOrderId || order._id %> - <%= order.status %></h5>
                <% if (order.allItemsCancelled) { %>
                    <div class="alert alert-danger mt-2 mb-0">
                        <i class="fas fa-exclamation-circle"></i> All items in this order have been cancelled.
                    </div>
                <% } %>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Customer:</strong> <%= order.userName %> (<%= order.userEmail %>)</p>
                        <p><strong>Order Date:</strong> <%= order.formattedOrderDate %></p>
                        <p><strong>Delivery Date:</strong> <%= order.formattedDeliveryDate %></p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
                        <p>
                            <strong>Payment Status:</strong>
                            <% if (order.allItemsCancelled && (order.paymentStatus === 'Cancelled' || order.paymentStatus === 'Failed' || order.paymentStatus === 'Pending')) { %>
                                <span class="badge bg-danger">Cancelled</span>
                            <% } else { %>
                                <%= order.paymentStatus %>
                            <% } %>
                        </p>
                        <p><strong>Shipping Address:</strong></p>
                        <address>
                            <%= order.shippingAddress.fullName %><br>
                            <%= order.shippingAddress.landmark ? order.shippingAddress.landmark + '<br>' : '' %>
                            <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %> <%= order.shippingAddress.pincode %><br>
                            Phone: <%= order.shippingAddress.phone %>
                        </address>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Items -->
        <div class="card mb-4">
            <div class="card-header">
                <h5>Order Items</h5>
            </div>
            <div class="card-body">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Image</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Total</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% order.items.forEach(item => { %>
                            <tr data-product-id="<%= item.product._id %>">
                                <td><%= item.product.productName %></td>
                                <td>
                                    <img src="<%= item.product.mainImage %>" alt="<%= item.product.productName %>" style="width: 50px; height: auto;">
                                </td>
                                <td><%= item.quantity %></td>
                                <td>₹<%= item.price.toFixed(2) %></td>
                                <td>₹<%= item.totalPrice %></td>
                                <td class="status-cell">
                                    <% let statusClass = ''; %>
                                    <% if (item.status === 'Processing') { statusClass = 'status-processing'; } %>
                                    <% if (item.status === 'Shipped') { statusClass = 'status-shipped'; } %>
                                    <% if (item.status === 'Delivered') { statusClass = 'status-delivered'; } %>
                                    <% if (item.status === 'Cancelled') { statusClass = 'status-cancelled'; } %>
                                    <% if (item.status === 'Partially Cancelled') { statusClass = 'status-partially-cancelled'; } %>
                                    <% if (item.status === 'Return Request') { statusClass = 'status-return-request'; } %>
                                    <% if (item.status === 'Returned') { statusClass = 'status-returned'; } %>
                                    <% if (item.status === 'Cancellation Pending') { statusClass = 'status-cancellation-pending'; } %>

                                    <span class="status-badge <%= statusClass %>"><%= item.status %></span>

                                    <% if (item.status === 'Return Request' && item.returnReason) { %>
                                        <div class="return-reason">
                                            <strong>Return Reason:</strong> <%= item.returnReason %>
                                            <div class="return-actions">
                                                <button class="btn btn-sm btn-approve btn-approve-return"
                                                        data-order-id="<%= order._id %>"
                                                        data-product-id="<%= item.product._id %>">
                                                    Approve Return
                                                </button>
                                                <button class="btn btn-sm btn-reject btn-reject-return"
                                                        data-order-id="<%= order._id %>"
                                                        data-product-id="<%= item.product._id %>">
                                                    Reject Return
                                                </button>
                                            </div>
                                        </div>
                                    <% } %>

                                    <% if (item.status === 'Cancellation Pending' && item.order_cancel_reason) { %>
                                        <div class="return-reason" style="background-color: #ffe5d0; border-left-color: #fd7e14;">
                                            <strong>Cancellation Reason:</strong> <%= item.order_cancel_reason %>
                                            <div class="return-actions">
                                                <button class="btn btn-sm btn-approve btn-approve-cancellation"
                                                        data-order-id="<%= order._id %>"
                                                        data-product-id="<%= item.product._id %>">
                                                    Approve Cancellation
                                                </button>
                                                <button class="btn btn-sm btn-reject btn-reject-cancellation"
                                                        data-order-id="<%= order._id %>"
                                                        data-product-id="<%= item.product._id %>">
                                                    Reject Cancellation
                                                </button>
                                            </div>
                                        </div>
                                    <% } %>

                                    <% if (item.status === 'Returned' && item.returnReason) { %>
                                        <div class="return-completed">
                                            <strong>Return Reason:</strong> <%= item.returnReason %>
                                            <div class="mt-2">
                                                <span class="badge bg-secondary">Return Completed</span>
                                            </div>
                                        </div>
                                    <% } %>

                                    <% if (item.status === 'Delivered' && item.order_return_status === 'Rejected' && item.returnReason) { %>
                                        <div class="return-completed">
                                            <strong>Return Reason:</strong> <%= item.returnReason %>
                                            <div class="admin-response">
                                                <strong>Admin Response:</strong> <%= item.adminResponse %>
                                            </div>
                                            <div class="mt-2">
                                                <span class="badge bg-danger">Return Rejected</span>
                                            </div>
                                        </div>
                                    <% } %>
                                </td>
                                <td>
                                    <% if (item.status !== 'Return Request' && item.status !== 'Returned' && item.order_return_status !== 'Rejected') { %>
                                        <select class="form-select status-select" data-product-id="<%= item.product._id %>">
                                            <option value="Processing" <%= item.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                            <option value="Shipped" <%= item.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                            <option value="Delivered" <%= item.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                            <option value="Cancelled" <%= item.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                        </select>
                                    <% } else if (item.status === 'Return Request') { %>
                                        <span class="text-warning">Return Pending</span>
                                    <% } else if (item.status === 'Returned') { %>
                                        <span class="text-secondary">Item Returned</span>
                                    <% } else if (item.order_return_status === 'Rejected') { %>
                                        <span class="text-danger">Return Rejected</span>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Order Totals -->
        <div class="card">
            <div class="card-header">
                <h5>Order Totals</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 offset-md-6">
                        <p><strong>Subtotal:</strong> ₹<%= order.subtotal %></p>
                        <p><strong>Shipping:</strong> ₹<%= order.shipping %></p>
                        <p><strong>Discount:</strong> - ₹<%= order.discount %></p>
                        <p><strong>Tax:</strong> ₹<%= order.tax %></p>
                        <hr>
                        <p><strong>Total:</strong> ₹<%= order.total %></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-dark text-white text-center py-3 mt-5">
        <p>© 2025 Admin Panel. All rights reserved.</p>
    </footer>

    <!-- Scripts -->
    <script src="/js/bootstrap.bundle.min.js"></script>
    <!-- Add SweetAlert JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
    <script>
        // Update Order Status
        document.querySelectorAll('.status-select').forEach(select => {
            select.addEventListener('change', async (e) => {
                const selectElement = e.target;
                const productId = selectElement.dataset.productId;
                const status = selectElement.value;
                const orderId = '<%= order._id %>';

                // Disable select to prevent multiple submissions
                selectElement.disabled = true;

                // Show loading state
                Swal.fire({
                    title: 'Updating Status...',
                    text: 'Please wait while we update the order status',
                    icon: 'info',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                try {
                    const response = await fetch(`/admin/orders/${orderId}/update-status`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'CSRF-Token': '<%= csrfToken %>'
                        },
                        body: JSON.stringify({ productId, status })
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Show success message
                        Swal.fire({
                            title: 'Status Updated!',
                            text: 'The order item status has been updated successfully',
                            icon: 'success',
                            confirmButtonColor: '#3085d6'
                        }).then(() => {
                            // Reload the page to refresh the status
                            window.location.reload();
                        });
                    } else {
                        // Show error message
                        Swal.fire({
                            title: 'Update Failed',
                            text: result.message || 'Failed to update item status',
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });

                        // Re-enable select
                        selectElement.disabled = false;
                    }
                } catch (error) {
                    // Show error message
                    Swal.fire({
                        title: 'Error',
                        text: 'Error updating status: ' + error.message,
                        icon: 'error',
                        confirmButtonColor: '#3085d6'
                    });

                    // Re-enable select
                    selectElement.disabled = false;
                }
            });
        });

        // Approve Return Request
        document.querySelectorAll('.btn-approve-return').forEach(button => {
            button.addEventListener('click', async (e) => {
                const orderId = e.target.dataset.orderId;
                const productId = e.target.dataset.productId;

                // Show confirmation dialog
                const result = await Swal.fire({
                    title: 'Approve Return?',
                    text: 'This will approve the return request and process a refund to the customer\'s wallet.',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, approve it!'
                });

                if (result.isConfirmed) {
                    // Show loading state
                    Swal.fire({
                        title: 'Processing...',
                        text: 'Approving return request',
                        icon: 'info',
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    try {
                        const response = await fetch(`/admin/orders/${orderId}/approve-return`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'CSRF-Token': '<%= csrfToken %>'
                            },
                            body: JSON.stringify({ productId })
                        });

                        const result = await response.json();

                        if (result.success) {
                            // Show success message
                            Swal.fire({
                                title: 'Return Approved!',
                                text: 'The return request has been approved and refund processed.',
                                icon: 'success',
                                confirmButtonColor: '#28a745'
                            }).then(() => {
                                // Reload the page to refresh the status
                                window.location.reload();
                            });
                        } else {
                            // Show error message
                            Swal.fire({
                                title: 'Error',
                                text: result.message || 'Failed to approve return',
                                icon: 'error',
                                confirmButtonColor: '#3085d6'
                            });
                        }
                    } catch (error) {
                        // Show error message
                        Swal.fire({
                            title: 'Error',
                            text: 'Error approving return: ' + error.message,
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });
                    }
                }
            });
        });

        // Reject Return Request
        document.querySelectorAll('.btn-reject-return').forEach(button => {
            button.addEventListener('click', async (e) => {
                const orderId = e.target.dataset.orderId;
                const productId = e.target.dataset.productId;

                // Show input dialog for rejection reason
                const { value: adminResponse } = await Swal.fire({
                    title: 'Reject Return',
                    input: 'textarea',
                    inputLabel: 'Reason for rejection',
                    inputPlaceholder: 'Enter the reason for rejecting this return request...',
                    inputAttributes: {
                        'aria-label': 'Reason for rejection'
                    },
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Reject Return',
                    inputValidator: (value) => {
                        if (!value) {
                            return 'You need to provide a reason for rejection!';
                        }
                    }
                });

                if (adminResponse) {
                    // Show loading state
                    Swal.fire({
                        title: 'Processing...',
                        text: 'Rejecting return request',
                        icon: 'info',
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    try {
                        const response = await fetch(`/admin/orders/${orderId}/reject-return`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'CSRF-Token': '<%= csrfToken %>'
                            },
                            body: JSON.stringify({ productId, adminResponse })
                        });

                        const result = await response.json();

                        if (result.success) {
                            // Show success message
                            Swal.fire({
                                title: 'Return Rejected!',
                                text: 'The return request has been rejected.',
                                icon: 'success',
                                confirmButtonColor: '#28a745'
                            }).then(() => {
                                // Reload the page to refresh the status
                                window.location.reload();
                            });
                        } else {
                            // Show error message
                            Swal.fire({
                                title: 'Error',
                                text: result.message || 'Failed to reject return',
                                icon: 'error',
                                confirmButtonColor: '#3085d6'
                            });
                        }
                    } catch (error) {
                        // Show error message
                        Swal.fire({
                            title: 'Error',
                            text: 'Error rejecting return: ' + error.message,
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });
                    }
                }
            });
        });

        // Approve Cancellation
        document.querySelectorAll('.btn-approve-cancellation').forEach(button => {
            button.addEventListener('click', async (e) => {
                const orderId = e.target.dataset.orderId;
                const productId = e.target.dataset.productId;

                // Show confirmation dialog
                const result = await Swal.fire({
                    title: 'Approve Cancellation?',
                    text: 'This will approve the cancellation request and process a refund to the customer\'s wallet.',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, approve it!'
                });

                if (result.isConfirmed) {
                    // Show loading state
                    Swal.fire({
                        title: 'Processing...',
                        text: 'Approving cancellation request',
                        icon: 'info',
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    try {
                        const response = await fetch(`/admin/orders/${orderId}/approve-cancellation`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'CSRF-Token': '<%= csrfToken %>'
                            },
                            body: JSON.stringify({ productId })
                        });

                        const result = await response.json();

                        if (result.success) {
                            // Show success message
                            Swal.fire({
                                title: 'Cancellation Approved!',
                                text: 'The cancellation request has been approved and refund processed.',
                                icon: 'success',
                                confirmButtonColor: '#28a745'
                            }).then(() => {
                                // Reload the page to refresh the status
                                window.location.reload();
                            });
                        } else {
                            // Show error message
                            Swal.fire({
                                title: 'Error',
                                text: result.message || 'Failed to approve cancellation',
                                icon: 'error',
                                confirmButtonColor: '#3085d6'
                            });
                        }
                    } catch (error) {
                        // Show error message
                        Swal.fire({
                            title: 'Error',
                            text: 'Error approving cancellation: ' + error.message,
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });
                    }
                }
            });
        });

        // Reject Cancellation
        document.querySelectorAll('.btn-reject-cancellation').forEach(button => {
            button.addEventListener('click', async (e) => {
                const orderId = e.target.dataset.orderId;
                const productId = e.target.dataset.productId;

                // Show input dialog for rejection reason
                const { value: rejectionReason } = await Swal.fire({
                    title: 'Reject Cancellation',
                    input: 'textarea',
                    inputLabel: 'Reason for rejection',
                    inputPlaceholder: 'Enter the reason for rejecting this cancellation request...',
                    inputAttributes: {
                        'aria-label': 'Reason for rejection'
                    },
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Reject Cancellation',
                    inputValidator: (value) => {
                        if (!value) {
                            return 'You need to provide a reason for rejection!';
                        }
                    }
                });

                if (rejectionReason) {
                    // Show loading state
                    Swal.fire({
                        title: 'Processing...',
                        text: 'Rejecting cancellation request',
                        icon: 'info',
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    try {
                        const response = await fetch(`/admin/orders/${orderId}/reject-cancellation`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'CSRF-Token': '<%= csrfToken %>'
                            },
                            body: JSON.stringify({ productId, rejectionReason })
                        });

                        const result = await response.json();

                        if (result.success) {
                            // Show success message
                            Swal.fire({
                                title: 'Cancellation Rejected!',
                                text: 'The cancellation request has been rejected.',
                                icon: 'success',
                                confirmButtonColor: '#28a745'
                            }).then(() => {
                                // Reload the page to refresh the status
                                window.location.reload();
                            });
                        } else {
                            // Show error message
                            Swal.fire({
                                title: 'Error',
                                text: result.message || 'Failed to reject cancellation',
                                icon: 'error',
                                confirmButtonColor: '#3085d6'
                            });
                        }
                    } catch (error) {
                        // Show error message
                        Swal.fire({
                            title: 'Error',
                            text: 'Error rejecting cancellation: ' + error.message,
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });
                    }
                }
            });
        });
    </script>
</body>
</html>