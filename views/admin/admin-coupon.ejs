<%- include("partials/header", { activePage: 'coupons' }) %>

<!-- Flatpickr CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<!-- Coupons Content -->
<div class="content-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-ticket-alt me-2"></i>Coupon Management</h1>
            <p class="text-muted mb-0">Create and manage discount coupons for your store</p>
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCouponModal">
                <i class="fas fa-plus me-1"></i>Add New Coupon
            </button>
            <button class="btn btn-outline-primary" onclick="exportCoupons()">
                <i class="fas fa-download me-1"></i>Export
            </button>
        </div>
    </div>
</div>

<!-- Filters -->
<div class="card mb-4">
    <div class="card-body">
        <form id="filterForm" class="row g-3">
            <div class="col-md-4">
                <label for="typeFilter" class="form-label">Discount Type</label>
                <select class="form-select" id="typeFilter" name="type">
                    <option value="all" <%= selectedType === 'all' ? 'selected' : '' %>>All Types</option>
                    <% discountTypes.forEach(type => { %>
                        <option value="<%= type %>" <%= selectedType === type ? 'selected' : '' %>>
                            <%= type.charAt(0).toUpperCase() + type.slice(1) %>
                        </option>
                    <% }); %>
                </select>
            </div>
            <div class="col-md-4">
                <label for="statusFilter" class="form-label">Status</label>
                <select class="form-select" id="statusFilter" name="isActive">
                    <option value="all" <%= selectedStatus === 'all' ? 'selected' : '' %>>All Statuses</option>
                    <option value="true" <%= selectedStatus === 'true' ? 'selected' : '' %>>Active</option>
                    <option value="false" <%= selectedStatus === 'false' ? 'selected' : '' %>>Inactive</option>
                </select>
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <button type="submit" class="btn btn-outline-secondary w-100">
                    <i class="fas fa-filter me-2"></i>Filter
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Coupons List -->
<div class="card">
    <div class="card-body">
        <% if (coupons.length === 0) { %>
            <div class="text-center py-5">
                <i class="fas fa-ticket-alt fa-4x text-muted mb-3"></i>
                <h5>No coupons found</h5>
                <p class="text-muted">Add a new coupon to get started</p>
            </div>
        <% } else { %>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Type</th>
                            <th>Value</th>
                            <th>Min/Max Price</th>
                            <th>Total Uses</th>
                            <th>Usage Limit</th>
                            <th>Validity</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% coupons.forEach(coupon => { %>
                            <tr>
                                <td>
                                    <strong class="text-primary"><%= coupon.code %></strong>
                                </td>
                                <td>
                                    <span class="badge <%= coupon.type === 'percentage' ? 'bg-info' : 'bg-secondary' %>">
                                        <%= coupon.type.charAt(0).toUpperCase() + coupon.type.slice(1) %>
                                    </span>
                                </td>
                                <td>
                                    <strong>
                                        <%= coupon.type === 'percentage' ? coupon.discountValue + '%' : '$' + coupon.discountValue %>
                                    </strong>
                                </td>
                                <td>
                                    <small class="text-muted">
                                        Min: $<%= coupon.minPrice %><br>
                                        Max: <%= coupon.maxPrice ? '$' + coupon.maxPrice : '∞' %>
                                    </small>
                                </td>
                                <td>
                                    <span class="badge bg-light text-dark">
                                        <%= coupon.totalUsedCount || 0 %>
                                    </span>
                                </td>
                                <td>
                                    <span class="badge bg-light text-dark">
                                        <%= coupon.usageLimit || '∞' %>
                                    </span>
                                </td>
                                <td>
                                    <small class="text-muted">
                                        <div><strong>Start:</strong> <%= coupon.startDate.toLocaleDateString('en-US') %></div>
                                        <div><strong>End:</strong> <%= coupon.expiryDate.toLocaleDateString('en-US') %></div>
                                    </small>
                                </td>
                                <td>
                                    <% if (coupon.isActive) { %>
                                        <span class="badge bg-success">
                                            <i class="fas fa-check-circle me-1"></i>Active
                                        </span>
                                    <% } else { %>
                                        <span class="badge bg-danger">
                                            <i class="fas fa-times-circle me-1"></i>Inactive
                                        </span>
                                    <% } %>
                                </td>
                                <td>
                                    <div class="btn-group-vertical btn-group-sm" role="group">
                                        <% if (coupon.isDelete) { %>
                                            <button class="btn btn-outline-success btn-sm restore-btn" data-id="<%= coupon._id %>">
                                                <i class="fas fa-undo me-1"></i>Restore
                                            </button>
                                        <% } else { %>
                                            <button class="btn btn-outline-primary btn-sm edit-btn" data-id="<%= coupon._id %>"
                                                    data-code="<%= coupon.code %>" data-type="<%= coupon.type %>"
                                                    data-value="<%= coupon.discountValue %>" data-limit="<%= coupon.usageLimit %>"
                                                    data-minprice="<%= coupon.minPrice %>" data-maxprice="<%= coupon.maxPrice %>"
                                                    data-startdate="<%= coupon.startDate.toISOString().replace('Z', '') %>"
                                                    data-expirydate="<%= coupon.expiryDate.toISOString().replace('Z', '') %>">
                                                <i class="fas fa-edit me-1"></i>Edit
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm delete-btn" data-id="<%= coupon._id %>">
                                                <i class="fas fa-trash me-1"></i>Delete
                                            </button>
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>

        <!-- Pagination -->
        <% if (pagination && pagination.totalPages > 1) { %>
            <div class="d-flex justify-content-between align-items-center mt-4">
                <div class="text-muted">
                    Showing <strong><%= (pagination.currentPage - 1) * pagination.limit + 1 %></strong> to
                    <strong><%= Math.min(pagination.currentPage * pagination.limit, pagination.totalItems) %></strong> of
                    <strong><%= pagination.totalItems %></strong> coupons
                </div>

                <nav aria-label="Coupons pagination">
                    <ul class="pagination mb-0">
                        <!-- First Page -->
                        <li class="page-item <%= pagination.currentPage === 1 ? 'disabled' : '' %>">
                            <a class="page-link" href="?page=1<%= pagination.searchParams %>&limit=<%= pagination.limit %>" aria-label="First">
                                <i class="fas fa-angle-double-left"></i>
                            </a>
                        </li>

                        <!-- Previous Page -->
                        <li class="page-item <%= pagination.currentPage === 1 ? 'disabled' : '' %>">
                            <a class="page-link" href="?page=<%= pagination.currentPage - 1 %><%= pagination.searchParams %>&limit=<%= pagination.limit %>" aria-label="Previous">
                                <i class="fas fa-angle-left"></i>
                            </a>
                        </li>

                        <!-- Page Numbers -->
                        <% const maxVisiblePages = 5;
                           let startPage = Math.max(1, pagination.currentPage - Math.floor(maxVisiblePages / 2));
                           let endPage = Math.min(pagination.totalPages, startPage + maxVisiblePages - 1);

                           if (endPage - startPage + 1 < maxVisiblePages) {
                               startPage = Math.max(1, endPage - maxVisiblePages + 1);
                           }

                           for (let i = startPage; i <= endPage; i++) { %>
                            <li class="page-item <%= i === pagination.currentPage ? 'active' : '' %>">
                                <a class="page-link" href="?page=<%= i %><%= pagination.searchParams %>&limit=<%= pagination.limit %>"><%= i %></a>
                            </li>
                        <% } %>

                        <!-- Next Page -->
                        <li class="page-item <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>">
                            <a class="page-link" href="?page=<%= pagination.currentPage + 1 %><%= pagination.searchParams %>&limit=<%= pagination.limit %>" aria-label="Next">
                                <i class="fas fa-angle-right"></i>
                            </a>
                        </li>

                        <!-- Last Page -->
                        <li class="page-item <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>">
                            <a class="page-link" href="?page=<%= pagination.totalPages %><%= pagination.searchParams %>&limit=<%= pagination.limit %>" aria-label="Last">
                                <i class="fas fa-angle-double-right"></i>
                            </a>
                        </li>
                    </ul>
                </nav>

                <!-- Items per page selector -->
                <div class="d-flex align-items-center">
                    <span class="text-muted me-2">Items per page:</span>
                    <select onchange="window.location.href='?page=1&limit=' + this.value + '<%= pagination.searchParamsWithoutLimit %>'"
                            class="form-select form-select-sm" style="width: auto;">
                        <option value="3" <%= pagination.limit == 3 ? 'selected' : '' %>>3</option>
                        <option value="10" <%= pagination.limit == 10 ? 'selected' : '' %>>10</option>
                        <option value="25" <%= pagination.limit == 25 ? 'selected' : '' %>>25</option>
                        <option value="50" <%= pagination.limit == 50 ? 'selected' : '' %>>50</option>
                        <option value="100" <%= pagination.limit == 100 ? 'selected' : '' %>>100</option>
                    </select>
                </div>
            </div>
        <% } %>
        <% } %>
    </div>
</div>

    <!-- Add Coupon Modal -->
    <div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addCouponModalLabel">Add New Coupon</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addCouponForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="couponCode" class="form-label">Coupon Code</label>
                            <input type="text" class="form-control" id="couponCode" name="code"
                                   pattern="[a-zA-Z0-9]+" title="Only letters and numbers allowed"
                                   required>
                            <div class="form-text">Only letters and numbers allowed (no spaces or special characters)</div>
                        </div>
                        <div class="mb-3">
                            <label for="discountType" class="form-label">Discount Type</label>
                            <select class="form-select" id="discountType" name="discountType" required>
                                <option value="percentage">Percentage</option>
                                <option value="fixed">Fixed Amount</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="discountValue" class="form-label">Discount Value</label>
                            <input type="number" class="form-control" id="discountValue" name="value"
                                   min="1" max="100" step="0.01" required>
                            <div class="form-text" id="valueHelp">Enter percentage (e.g., 10) or fixed amount (e.g., 5)</div>
                        </div>
                        <div class="mb-3">
                            <label for="minPrice" class="form-label">Minimum Cart Value</label>
                            <input type="number" class="form-control" id="minPrice" name="minPrice"
                                   min="0" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label for="maxPrice" class="form-label">Maximum Discount Applicable (for percentage)</label>
                            <input type="number" class="form-control" id="maxPrice" name="maxPrice"
                                   min="0" step="0.01">
                            <div class="form-text">Leave empty for no maximum limit</div>
                        </div>
                        <div class="mb-3">
                            <label for="usageLimit" class="form-label">Usage Limit</label>
                            <input type="number" class="form-control" id="usageLimit" name="limit"
                                   min="1" step="1">
                            <div class="form-text">Leave empty for unlimited usage</div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="startDate" class="form-label">Start Date & Time</label>
                                <input type="text" class="form-control" id="startDate" name="startDate" placeholder="Select start date and time" required>
                            </div>
                            <div class="col-md-6">
                                <label for="expiryDate" class="form-label">Expiry Date & Time</label>
                                <input type="text" class="form-control" id="expiryDate" name="expiryDate" placeholder="Select expiry date and time" required>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add Coupon</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Coupon Modal -->
    <div class="modal fade" id="editCouponModal" tabindex="-1" aria-labelledby="editCouponModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editCouponModalLabel">Edit Coupon</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="editCouponForm">
                    <div class="modal-body">
                        <input type="hidden" id="editCouponId" name="id">
                        <div class="mb-3">
                            <label for="editCouponCode" class="form-label">Coupon Code</label>
                            <input type="text" class="form-control" id="editCouponCode" name="code"
                                   pattern="[a-zA-Z0-9]+" title="Only letters and numbers allowed"
                                   required>
                            <div class="form-text">Only letters and numbers allowed (no spaces or special characters)</div>
                        </div>
                        <div class="mb-3">
                            <label for="editDiscountType" class="form-label">Discount Type</label>
                            <select class="form-select" id="editDiscountType" name="discountType" required>
                                <option value="percentage">Percentage</option>
                                <option value="fixed">Fixed Amount</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="editDiscountValue" class="form-label">Discount Value</label>
                            <input type="number" class="form-control" id="editDiscountValue" name="value"
                                   min="1" max="100" step="0.01" required>
                            <div class="form-text" id="editValueHelp">Enter percentage (e.g., 10) or fixed amount (e.g., 5)</div>
                        </div>
                        <div class="mb-3">
                            <label for="editMinPrice" class="form-label">Minimum Cart Value</label>
                            <input type="number" class="form-control" id="editMinPrice" name="minPrice"
                                   min="0" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label for="editMaxPrice" class="form-label">Maximum Discount Applicable (for percentage)</label>
                            <input type="number" class="form-control" id="editMaxPrice" name="maxPrice"
                                   min="0" step="0.01">
                            <div class="form-text">Leave empty for no maximum limit</div>
                        </div>
                        <div class="mb-3">
                            <label for="editUsageLimit" class="form-label">Usage Limit</label>
                            <input type="number" class="form-control" id="editUsageLimit" name="limit"
                                   min="1" step="1">
                            <div class="form-text">Leave empty for unlimited usage</div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editStartDate" class="form-label">Start Date & Time</label>
                                <input type="text" class="form-control" id="editStartDate" name="startDate" placeholder="Select start date and time" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editExpiryDate" class="form-label">Expiry Date & Time</label>
                                <input type="text" class="form-control" id="editExpiryDate" name="expiryDate" placeholder="Select expiry date and time" required>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

<!-- Flatpickr JS -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <script>
        $(document).ready(function() {
            // Filter form submission
            $('#filterForm').on('submit', function(e) {
                e.preventDefault();
                const type = $('#typeFilter').val();
                const status = $('#statusFilter').val();
                window.location.href = `/admin/coupons?type=${type}&isActive=${status}`;
            });

            // Add coupon form submission
            $('#addCouponForm').on('submit', function(e) {
                e.preventDefault();

                // Get form values
                const code = $('#couponCode').val().trim();
                const discountType = $('#discountType').val();
                const value = parseFloat($('#discountValue').val());
                const minPrice = parseFloat($('#minPrice').val());
                const maxPrice = $('#maxPrice').val() ? parseFloat($('#maxPrice').val()) : null;
                const limit = $('#usageLimit').val() ? parseInt($('#usageLimit').val()) : null;
                const startDate = $('#startDate').val();
                const expiryDate = $('#expiryDate').val();

                // Client-side validation
                let isValid = true;
                let errorMessage = '';

                // Validate coupon code
                if (!code) {
                    isValid = false;
                    errorMessage = 'Coupon code is required';
                } else if (!/^[a-zA-Z0-9]+$/.test(code)) {
                    isValid = false;
                    errorMessage = 'Coupon code must contain only letters and numbers';
                }

                // Validate discount value
                if (isNaN(value) || value <= 0) {
                    isValid = false;
                    errorMessage = 'Discount value must be a positive number';
                } else if (discountType === 'percentage' && value > 100) {
                    isValid = false;
                    errorMessage = 'Percentage discount cannot exceed 100%';
                }

                // Validate minimum price
                if (isNaN(minPrice) || minPrice < 0) {
                    isValid = false;
                    errorMessage = 'Minimum price must be a non-negative number';
                }

                // Validate maximum price (if provided)
                if (maxPrice !== null) {
                    if (isNaN(maxPrice) || maxPrice <= 0) {
                        isValid = false;
                        errorMessage = 'Maximum price must be a positive number';
                    } else if (maxPrice <= minPrice) {
                        isValid = false;
                        errorMessage = 'Maximum price must be greater than minimum price';
                    }
                }

                // Validate usage limit (if provided)
                if (limit !== null && (isNaN(limit) || limit <= 0)) {
                    isValid = false;
                    errorMessage = 'Usage limit must be a positive integer';
                }

                // Validate dates
                if (!startDate || !expiryDate) {
                    isValid = false;
                    errorMessage = 'Start date and expiry date are required';
                } else {
                    const parsedStartDate = new Date(startDate);
                    const parsedExpiryDate = new Date(expiryDate);

                    if (isNaN(parsedStartDate.getTime()) || isNaN(parsedExpiryDate.getTime())) {
                        isValid = false;
                        errorMessage = 'Invalid date format';
                    } else if (parsedStartDate >= parsedExpiryDate) {
                        isValid = false;
                        errorMessage = 'Expiry date must be after start date';
                    }
                }

                if (!isValid) {
                    // Determine specific error type for SweetAlert
                    let errorTitle = "Validation Error";
                    let errorDetails = null;
                    let errorIcon = 'error';
                    let errorField = null;

                    if (errorMessage.includes('code')) {
                        errorTitle = "Invalid Coupon Code";
                        errorDetails = "Coupon codes must contain only letters and numbers without spaces or special characters.";
                        errorField = 'code';
                    }
                    else if (errorMessage.includes('discount') || errorMessage.includes('percentage')) {
                        errorTitle = "Invalid Discount Value";
                        errorDetails = discountType === 'percentage'
                            ? "Percentage discounts must be between 1% and 100%."
                            : "Fixed discounts must be a positive number and less than the minimum purchase amount.";
                        errorField = 'discountValue';
                    }
                    else if (errorMessage.includes('minimum price') || errorMessage.includes('maximum price')) {
                        errorTitle = "Invalid Price Range";
                        errorDetails = "Ensure minimum price is a non-negative number and maximum price (if provided) is greater than minimum price.";
                        errorField = errorMessage.includes('minimum') ? 'minPrice' : 'maxPrice';
                    }
                    else if (errorMessage.includes('date')) {
                        errorTitle = "Invalid Date Range";
                        errorDetails = "Ensure both start and expiry dates are valid, and the expiry date is after the start date.";
                        errorField = errorMessage.includes('start') ? 'startDate' : 'expiryDate';
                    }
                    else if (errorMessage.includes('usage limit')) {
                        errorTitle = "Invalid Usage Limit";
                        errorDetails = "Usage limits must be positive numbers. Per user limit cannot exceed total limit.";
                        errorField = errorMessage.includes('per user') ? 'usageLimit' : 'totalUsageLimit';
                    }

                    // Highlight the field with error if possible
                    if (errorField) {
                        $(`#${errorField}`).addClass('is-invalid').focus();
                        setTimeout(() => {
                            $(`#${errorField}`).removeClass('is-invalid');
                        }, 3000);
                    }

                    // Show SweetAlert with the specific error message as the main content
                    Swal.fire({
                        title: errorMessage, // Use the actual error message as the title
                        text: errorDetails || '', // Additional details as secondary text
                        icon: errorIcon,
                        confirmButtonColor: '#dc3545',
                        confirmButtonText: 'OK'
                    });
                    return;
                }

                // Check if the coupon should be active based on dates
                const now = new Date();
                const parsedStartDate = new Date(startDate);
                const parsedExpiryDate = new Date(expiryDate);

                // Prepare form data with isActive status
                const data = $(this).serializeArray();

                if (parsedStartDate <= now && parsedExpiryDate > now) {
                    // If start date is in the past/present and expiry date is in the future, activate the coupon
                    data.push({ name: 'isActive', value: true });
                } else if (parsedStartDate > now || parsedExpiryDate <= now) {
                    // If start date is in the future or expiry date is in the past/present, deactivate the coupon
                    data.push({ name: 'isActive', value: false });
                }

                // Submit form if validation passes
                $.ajax({
                    url: '/admin/add-coupon',
                    method: 'POST',
                    data: $.param(data),
                    success: function(response) {
                        if (response.success) {
                            // Hide the add coupon modal
                            $('#addCouponModal').modal('hide');

                            // Show success modal
                            showCouponSuccessModal(
                                `Coupon "${code}" has been successfully added.`,
                                "Coupon Added Successfully"
                            );
                        }
                    },
                    error: function(xhr) {
                        const errorResponse = xhr.responseJSON || {};
                        const errorMessage = errorResponse.message || 'An unknown error occurred while adding the coupon.';

                        let errorTitle = "Error Adding Coupon";
                        let errorDetails = null;
                        let errorIcon = 'error';
                        let errorField = null;

                        // Handle specific error cases with more detailed information
                        if (errorMessage.includes('already exists')) {
                            errorTitle = "Duplicate Coupon Code";
                            errorDetails = `The coupon code "${code}" is already in use. Please choose a different code.`;
                            errorField = 'couponCode';
                        }
                        else if (errorMessage.includes('letters and numbers')) {
                            errorTitle = "Invalid Coupon Code Format";
                            errorDetails = "Coupon codes must contain only letters and numbers without spaces or special characters.";
                            errorField = 'couponCode';
                        }
                        else if (errorMessage.includes('discount')) {
                            errorTitle = "Invalid Discount Configuration";
                            errorDetails = "Please check that your discount value is appropriate for the selected discount type.";
                            errorField = 'discountValue';
                        }
                        else if (errorMessage.includes('date')) {
                            errorTitle = "Invalid Date Configuration";
                            errorDetails = "Please check that your start and expiry dates are valid and properly formatted.";
                            errorField = errorMessage.includes('start') ? 'startDate' : 'expiryDate';
                        }

                        // Highlight the field with error if possible
                        if (errorField) {
                            $(`#${errorField}`).addClass('is-invalid').focus();
                            setTimeout(() => {
                                $(`#${errorField}`).removeClass('is-invalid');
                            }, 3000);
                        }

                        // Show SweetAlert with the specific error message as the main content
                        Swal.fire({
                            title: errorMessage, // Use the actual error message as the title
                            text: errorDetails || '', // Additional details as secondary text
                            icon: errorIcon,
                            confirmButtonColor: '#dc3545',
                            confirmButtonText: 'OK'
                        });
                    }
                });
            });

            // Delete coupon button
            $('.delete-btn').on('click', function() {
                const couponId = $(this).data('id');
                const couponCode = $(this).data('code');

                // Use SweetAlert2 for confirmation
                Swal.fire({
                    title: 'Delete Coupon',
                    html: `Are you sure you want to delete the coupon <strong>"${couponCode}"</strong>?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/admin/remove-coupon',
                            method: 'POST',
                            data: { id: couponId },
                            success: function(response) {
                                if (response.success) {
                                    showCouponSuccessModal(
                                        `Coupon "${couponCode}" has been successfully deleted.`,
                                        "Coupon Deleted Successfully"
                                    );
                                }
                            },
                            error: function(xhr) {
                                const errorResponse = xhr.responseJSON || {};
                                const errorMessage = errorResponse.message || 'An error occurred while deleting the coupon.';

                                // Determine specific error type
                                let errorTitle = "Error Deleting Coupon";
                                let errorDetails = "The coupon could not be deleted. It may have already been deleted or is being used in active orders.";

                                if (errorMessage.includes('not found')) {
                                    errorDetails = "The coupon you're trying to delete no longer exists.";
                                } else if (errorMessage.includes('in use') || errorMessage.includes('active orders')) {
                                    errorDetails = "This coupon cannot be deleted because it's currently in use by active orders.";
                                }

                                // Show SweetAlert with the specific error message as the main content
                                Swal.fire({
                                    title: errorMessage, // Use the actual error message as the title
                                    text: errorDetails || '', // Additional details as secondary text
                                    icon: 'error',
                                    confirmButtonColor: '#dc3545',
                                    confirmButtonText: 'OK'
                                });
                            }
                        });
                    }
                });
            });

            // Restore coupon button
            $('.restore-btn').on('click', function() {
                const couponId = $(this).data('id');
                const couponCode = $(this).data('code') || 'this coupon';

                // Use SweetAlert2 for confirmation
                Swal.fire({
                    title: 'Restore Coupon',
                    html: `Are you sure you want to restore the coupon <strong>"${couponCode}"</strong>?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, restore it!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/admin/restore-coupon',
                            method: 'POST',
                            data: { id: couponId },
                            success: function(response) {
                                if (response.success) {
                                    showCouponSuccessModal(
                                        `Coupon "${couponCode}" has been successfully restored.`,
                                        "Coupon Restored Successfully"
                                    );
                                }
                            },
                            error: function(xhr) {
                                const errorResponse = xhr.responseJSON || {};
                                const errorMessage = errorResponse.message || 'An error occurred while restoring the coupon.';

                                // Determine specific error type
                                let errorTitle = "Error Restoring Coupon";
                                let errorDetails = "The coupon could not be restored. It may have already been restored or no longer exists.";

                                if (errorMessage.includes('not found')) {
                                    errorDetails = "The coupon you're trying to restore no longer exists in the system.";
                                } else if (errorMessage.includes('already active')) {
                                    errorDetails = "This coupon is already active and doesn't need to be restored.";
                                }

                                // Show SweetAlert with the specific error message as the main content
                                Swal.fire({
                                    title: errorMessage, // Use the actual error message as the title
                                    text: errorDetails || '', // Additional details as secondary text
                                    icon: 'error',
                                    confirmButtonColor: '#dc3545',
                                    confirmButtonText: 'OK'
                                });
                            }
                        });
                    }
                });
            });

            // Update help text and validation based on discount type
            $('#discountType').on('change', function() {
                const type = $(this).val();
                if (type === 'percentage') {
                    $('#valueHelp').text('Enter percentage (e.g., 10 for 10%)');
                    $('#discountValue').attr('max', '100');
                    $('#maxPrice').closest('.mb-3').show();
                } else {
                    $('#valueHelp').text('Enter fixed amount (e.g., 5 for $5)');
                    $('#discountValue').removeAttr('max');
                    $('#maxPrice').closest('.mb-3').hide();
                }
            }).trigger('change');

            // Update help text and validation based on discount type for edit form
            $('#editDiscountType').on('change', function() {
                const type = $(this).val();
                if (type === 'percentage') {
                    $('#editValueHelp').text('Enter percentage (e.g., 10 for 10%)');
                    $('#editDiscountValue').attr('max', '100');
                    $('#editMaxPrice').closest('.mb-3').show();
                } else {
                    $('#editValueHelp').text('Enter fixed amount (e.g., 5 for $5)');
                    $('#editDiscountValue').removeAttr('max');
                    $('#editMaxPrice').closest('.mb-3').hide();
                }
            });

            // Initialize Flatpickr
            const startDatePicker = flatpickr("#startDate", {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                // Allow selecting dates in the past
                onChange: function (selectedDates, dateStr) {
                    expiryDatePicker.set("minDate", dateStr);
                }
            });

            const expiryDatePicker = flatpickr("#expiryDate", {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                // minDate will be set by the onChange function of startDatePicker
            });

            // Initialize Flatpickr for edit modal
            const editStartDatePicker = flatpickr("#editStartDate", {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                // Allow selecting dates in the past
                onChange: function (selectedDates, dateStr) {
                    editExpiryDatePicker.set("minDate", dateStr);
                }
            });

            const editExpiryDatePicker = flatpickr("#editExpiryDate", {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                // minDate will be set by the onChange function of editStartDatePicker
            });

            // Open edit modal and populate fields
            $('.edit-btn').on('click', function () {
                const button = $(this);
                $('#editCouponId').val(button.data('id'));
                $('#editCouponCode').val(button.data('code'));
                $('#editDiscountType').val(button.data('type'));
                $('#editDiscountValue').val(button.data('value'));
                $('#editMinPrice').val(button.data('minprice'));
                $('#editMaxPrice').val(button.data('maxprice'));
                $('#editUsageLimit').val(button.data('limit'));

                // Format the dates for Flatpickr
                const startDate = button.data('startdate');
                const expiryDate = button.data('expirydate');

                console.log('Start Date from data attribute:', startDate);
                console.log('Expiry Date from data attribute:', expiryDate);

                // Set the dates in the Flatpickr instances
                editStartDatePicker.setDate(startDate);
                editExpiryDatePicker.setDate(expiryDate);

                // Trigger the discount type change to update UI
                $('#editDiscountType').trigger('change');

                $('#editCouponModal').modal('show');
            });

            // Submit edit coupon form
            $('#editCouponForm').on('submit', function (e) {
                e.preventDefault();

                // Get form values
                const code = $('#editCouponCode').val().trim();
                const discountType = $('#editDiscountType').val();
                const value = parseFloat($('#editDiscountValue').val());
                const minPrice = parseFloat($('#editMinPrice').val());
                const maxPrice = $('#editMaxPrice').val() ? parseFloat($('#editMaxPrice').val()) : null;
                const limit = $('#editUsageLimit').val() ? parseInt($('#editUsageLimit').val()) : null;
                const startDate = $('#editStartDate').val();
                const expiryDate = $('#editExpiryDate').val();

                // Client-side validation
                let isValid = true;
                let errorMessage = '';

                // Validate coupon code
                if (!code) {
                    isValid = false;
                    errorMessage = 'Coupon code is required';
                } else if (!/^[a-zA-Z0-9]+$/.test(code)) {
                    isValid = false;
                    errorMessage = 'Coupon code must contain only letters and numbers';
                }

                // Validate discount value
                if (isNaN(value) || value <= 0) {
                    isValid = false;
                    errorMessage = 'Discount value must be a positive number';
                } else if (discountType === 'percentage' && value > 100) {
                    isValid = false;
                    errorMessage = 'Percentage discount cannot exceed 100%';
                }

                // Validate minimum price
                if (isNaN(minPrice) || minPrice < 0) {
                    isValid = false;
                    errorMessage = 'Minimum price must be a non-negative number';
                }

                // Validate maximum price (if provided)
                if (maxPrice !== null) {
                    if (isNaN(maxPrice) || maxPrice <= 0) {
                        isValid = false;
                        errorMessage = 'Maximum price must be a positive number';
                    } else if (maxPrice <= minPrice) {
                        isValid = false;
                        errorMessage = 'Maximum price must be greater than minimum price';
                    }
                }

                // Validate usage limit (if provided)
                if (limit !== null && (isNaN(limit) || limit <= 0)) {
                    isValid = false;
                    errorMessage = 'Usage limit must be a positive integer';
                }

                // Validate dates
                if (!startDate || !expiryDate) {
                    isValid = false;
                    errorMessage = 'Start date and expiry date are required';
                } else {
                    const parsedStartDate = new Date(startDate);
                    const parsedExpiryDate = new Date(expiryDate);

                    if (isNaN(parsedStartDate.getTime()) || isNaN(parsedExpiryDate.getTime())) {
                        isValid = false;
                        errorMessage = 'Invalid date format';
                    } else if (parsedStartDate >= parsedExpiryDate) {
                        isValid = false;
                        errorMessage = 'Expiry date must be after start date';
                    }
                }

                if (!isValid) {
                    // Determine specific error type for SweetAlert
                    let errorTitle = "Validation Error";
                    let errorDetails = null;
                    let errorIcon = 'error';
                    let errorField = null;

                    if (errorMessage.includes('code')) {
                        errorTitle = "Invalid Coupon Code";
                        errorDetails = "Coupon codes must contain only letters and numbers without spaces or special characters.";
                        errorField = 'editCouponCode';
                    }
                    else if (errorMessage.includes('discount') || errorMessage.includes('percentage')) {
                        errorTitle = "Invalid Discount Value";
                        errorDetails = discountType === 'percentage'
                            ? "Percentage discounts must be between 1% and 100%."
                            : "Fixed discounts must be a positive number and less than the minimum purchase amount.";
                        errorField = 'editDiscountValue';
                    }
                    else if (errorMessage.includes('minimum price') || errorMessage.includes('maximum price')) {
                        errorTitle = "Invalid Price Range";
                        errorDetails = "Ensure minimum price is a non-negative number and maximum price (if provided) is greater than minimum price.";
                        errorField = errorMessage.includes('minimum') ? 'editMinPrice' : 'editMaxPrice';
                    }
                    else if (errorMessage.includes('date')) {
                        errorTitle = "Invalid Date Range";
                        errorDetails = "Ensure both start and expiry dates are valid, and the expiry date is after the start date.";
                        errorField = errorMessage.includes('start') ? 'editStartDate' : 'editExpiryDate';
                    }
                    else if (errorMessage.includes('usage limit')) {
                        errorTitle = "Invalid Usage Limit";
                        errorDetails = "Usage limits must be positive numbers. Per user limit cannot exceed total limit.";
                        errorField = 'editUsageLimit';
                    }

                    // Highlight the field with error if possible
                    if (errorField) {
                        $(`#${errorField}`).addClass('is-invalid').focus();
                        setTimeout(() => {
                            $(`#${errorField}`).removeClass('is-invalid');
                        }, 3000);
                    }

                    // Show SweetAlert with the specific error message as the main content
                    Swal.fire({
                        title: errorMessage, // Use the actual error message as the title
                        text: errorDetails || '', // Additional details as secondary text
                        icon: errorIcon,
                        confirmButtonColor: '#dc3545',
                        confirmButtonText: 'OK'
                    });
                    return;
                }

                const now = new Date();
                const parsedStartDate = new Date(startDate);
                const parsedExpiryDate = new Date(expiryDate);

                // Add isActive logic based on dates
                const data = $(this).serializeArray();

                if (parsedStartDate <= now && parsedExpiryDate > now) {
                    // If start date is in the past/present and expiry date is in the future, activate the coupon
                    data.push({ name: 'isActive', value: true });
                } else if (parsedStartDate > now || parsedExpiryDate <= now) {
                    // If start date is in the future or expiry date is in the past/present, deactivate the coupon
                    data.push({ name: 'isActive', value: false });
                }

                $.ajax({
                    url: '/admin/edit-coupon',
                    method: 'PUT',
                    data: $.param(data),
                    success: function (response) {
                        if (response.success) {
                            // Hide the edit coupon modal
                            $('#editCouponModal').modal('hide');

                            // Show success modal
                            showCouponSuccessModal(
                                `Coupon "${code}" has been successfully updated.`,
                                "Coupon Updated Successfully"
                            );
                        }
                    },
                    error: function (xhr) {
                        const errorResponse = xhr.responseJSON || {};
                        const errorMessage = errorResponse.message || 'An unknown error occurred while updating the coupon.';

                        let errorTitle = "Error Updating Coupon";
                        let errorDetails = null;
                        let errorIcon = 'error';
                        let errorField = null;

                        // Handle specific error cases with more detailed information
                        if (errorMessage.includes('already exists')) {
                            errorTitle = "Duplicate Coupon Code";
                            errorDetails = `The coupon code "${code}" is already in use by another coupon. Please choose a different code.`;
                            errorField = 'editCouponCode';
                        }
                        else if (errorMessage.includes('not found')) {
                            errorTitle = "Coupon Not Found";
                            errorDetails = "The coupon you're trying to edit no longer exists. It may have been deleted.";
                            // No specific field to highlight in this case
                        }
                        else if (errorMessage.includes('letters and numbers')) {
                            errorTitle = "Invalid Coupon Code Format";
                            errorDetails = "Coupon codes must contain only letters and numbers without spaces or special characters.";
                            errorField = 'editCouponCode';
                        }
                        else if (errorMessage.includes('discount')) {
                            errorTitle = "Invalid Discount Configuration";
                            errorDetails = "Please check that your discount value is appropriate for the selected discount type.";
                            errorField = 'editDiscountValue';
                        }
                        else if (errorMessage.includes('date')) {
                            errorTitle = "Invalid Date Configuration";
                            errorDetails = "Please check that your start and expiry dates are valid and properly formatted.";
                            errorField = errorMessage.includes('start') ? 'editStartDate' : 'editExpiryDate';
                        }

                        // Highlight the field with error if possible
                        if (errorField) {
                            $(`#${errorField}`).addClass('is-invalid').focus();
                            setTimeout(() => {
                                $(`#${errorField}`).removeClass('is-invalid');
                            }, 3000);
                        }

                        // Show SweetAlert with the specific error message as the main content
                        Swal.fire({
                            title: errorMessage, // Use the actual error message as the title
                            text: errorDetails || '', // Additional details as secondary text
                            icon: errorIcon,
                            confirmButtonColor: '#dc3545',
                            confirmButtonText: 'OK'
                        });
                    }
                });
            });

            // Function to show error modal with specific messages using SweetAlert2
            function showCouponErrorModal(message, title = "Error", details = null) {
                // Show SweetAlert with the specific error message as the main content
                Swal.fire({
                    title: message, // Use the actual error message as the title
                    text: details || '', // Additional details as secondary text
                    icon: 'error',
                    confirmButtonColor: '#dc3545',
                    confirmButtonText: 'OK'
                });
            }

            // Function to show success modal using SweetAlert2
            function showCouponSuccessModal(message, title = "Success") {
                Swal.fire({
                    title: title,
                    text: message,
                    icon: 'success',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#28a745',
                    timer: 2000,
                    timerProgressBar: true
                }).then(() => {
                    // Reload the page after the modal is closed
                    location.reload();
                });
            }
        });

        // Export function
        function exportCoupons() {
            Swal.fire({
                icon: 'info',
                title: 'Export Feature',
                text: 'Export functionality will be implemented soon!'
            });
        }
    </script>

<%- include("partials/footer") %>