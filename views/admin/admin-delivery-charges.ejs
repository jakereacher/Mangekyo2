<%- include("partials/header", { activePage: 'delivery-charges' }) %>

<style>
    .cities-container .badge {
        font-size: 0.8em;
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .cities-management {
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 1rem;
        background-color: #f8f9fa;
    }

    #citiesContainer .badge {
        position: relative;
        padding-right: 2rem;
    }

    #citiesContainer .btn-close {
        position: absolute;
        right: 0.5rem;
        top: 50%;
        transform: translateY(-50%);
        padding: 0;
        width: 0.8rem;
        height: 0.8rem;
    }

    .form-text {
        font-size: 0.875rem;
        color: #6c757d;
    }

    .alert-info {
        border-left: 4px solid #0dcaf0;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.075);
    }

    .badge.fs-6 {
        font-size: 0.9rem !important;
    }
</style>

<!-- Delivery Charges Content -->
<div class="content-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-truck me-2"></i>Delivery Charges Management</h1>
            <p class="text-muted mb-0">Manage tier-based delivery charges and city assignments</p>
        </div>
        <div class="d-flex gap-2">
            <span class="badge bg-info fs-6">
                <i class="fas fa-info-circle me-1"></i>Tier-based System
            </span>
        </div>
    </div>
</div>

<!-- Alert Messages -->
<% if (typeof success !== 'undefined' && success) { %>
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i><%= success %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
<% } %>

<% if (typeof error !== 'undefined' && error) { %>
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i><%= error %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
<% } %>

<!-- Info Alert -->
<div class="alert alert-info" role="alert">
    <i class="fas fa-info-circle me-2"></i>
    <strong>Tier-based Delivery System:</strong> Delivery charges are automatically calculated based on city tiers.
    You can edit charges and manage cities for each tier. Cities cannot belong to multiple tiers, and each tier must have different costs.
</div>


<!-- Delivery Charges Table -->
<div class="card">
    <div class="card-body">
        <% if (deliveryCharges && deliveryCharges.length === 0) { %>
            <div class="text-center py-5">
                <i class="fas fa-truck fa-4x text-muted mb-3"></i>
                <h5>No delivery charges configured</h5>
                <p class="text-muted">Delivery charges will be automatically configured based on tier system</p>
            </div>
        <% } else { %>
            <div class="table-responsive">
                <table class="table table-hover" id="deliveryChargesTable">
                    <thead>
                        <tr>
                            <th>Tier</th>
                            <th>Description</th>
                            <th>Cities Included</th>
                            <th>Charge (₹)</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (deliveryCharges && deliveryCharges.length > 0) { %>
                            <% deliveryCharges.forEach(charge => { %>
                                <tr>
                                    <td>
                                        <%
                                        let badgeClass = 'secondary';
                                        let tierText = 'Unknown';

                                        if (charge.cityType === 'tier1') {
                                            badgeClass = 'primary';
                                            tierText = 'Tier 1';
                                        } else if (charge.cityType === 'tier2') {
                                            badgeClass = 'info';
                                            tierText = 'Tier 2';
                                        } else if (charge.cityType === 'tier3') {
                                            badgeClass = 'success';
                                            tierText = 'Tier 3';
                                        } else if (charge.cityType === 'tier4') {
                                            badgeClass = 'warning';
                                            tierText = 'Tier 4';
                                        }
                                        %>
                                        <span class="badge bg-<%= badgeClass %> fs-6">
                                            <%= tierText %>
                                        </span>
                                    </td>
                                    <td>
                                        <div class="fw-medium"><%= charge.location %></div>
                                        <small class="text-muted"><%= charge.description %></small>
                                    </td>
                                    <td>
                                        <div class="cities-container">
                                            <% if (Array.isArray(charge.cities)) { %>
                                                <% charge.cities.slice(0, 3).forEach(city => { %>
                                                    <span class="badge bg-light text-dark me-1 mb-1"><%= city %></span>
                                                <% }); %>
                                                <% if (charge.cities.length > 3) { %>
                                                    <span class="badge bg-secondary">+<%= charge.cities.length - 3 %> more</span>
                                                <% } %>
                                            <% } else { %>
                                                <small class="text-muted"><%= charge.cities %></small>
                                            <% } %>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="h5 text-success">₹<%= charge.charge.toFixed(2) %></span>
                                    </td>
                                    <td>
                                        <% if (charge.isActive) { %>
                                            <span class="badge bg-success">
                                                <i class="fas fa-check-circle me-1"></i>Active
                                            </span>
                                        <% } else { %>
                                            <span class="badge bg-danger">
                                                <i class="fas fa-times-circle me-1"></i>Inactive
                                            </span>
                                        <% } %>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary edit-charge-btn"
                                                data-id="<%= charge._id %>"
                                                data-location="<%= charge.location %>"
                                                data-description="<%= charge.description %>"
                                                data-city-type="<%= charge.cityType %>"
                                                data-charge="<%= charge.charge %>"
                                                data-is-active="<%= charge.isActive %>"
                                                data-cities="<%= Array.isArray(charge.cities) ? JSON.stringify(charge.cities) : charge.cities %>"
                                                title="Edit delivery charge">
                                            <i class="fas fa-edit me-1"></i>Edit
                                        </button>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } %>
                    </tbody>
                </table>
            </div>
        <% } %>
    </div>
</div>



<!-- Edit Delivery Charge Modal -->
<div class="modal fade" id="editDeliveryChargeModal" tabindex="-1" aria-labelledby="editDeliveryChargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="editDeliveryChargeModalLabel">
                    <i class="fas fa-edit me-2"></i>Edit Delivery Charge
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editDeliveryChargeForm">
                    <input type="hidden" id="editChargeId" name="id">

                    <!-- Tier Information (Read-only) -->
                    <div class="alert alert-info">
                        <h6 id="editTierTitle" class="mb-2"></h6>
                        <p id="editTierDescription" class="mb-0 small"></p>
                    </div>

                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group mb-3">
                                <label for="editCharge" class="form-label">
                                    <i class="fas fa-rupee-sign me-1"></i>Delivery Charge (₹)
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">₹</span>
                                    <input type="number" class="form-control" id="editCharge" name="charge"
                                           min="0" step="0.01" required placeholder="Enter charge amount">
                                </div>
                                <div class="form-text">Set the delivery charge for this tier (must be different from other tiers)</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group mb-3">
                                <label for="editIsActive" class="form-label">
                                    <i class="fas fa-toggle-on me-1"></i>Status
                                </label>
                                <select class="form-select" id="editIsActive" name="isActive">
                                    <option value="true">Active</option>
                                    <option value="false">Inactive</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- City Management Section -->
                    <div class="form-group mb-3">
                        <label class="form-label">
                            <i class="fas fa-city me-1"></i>Cities in this Tier
                        </label>
                        <div class="cities-management">
                            <!-- Current Cities Display -->
                            <div id="currentCities" class="mb-3">
                                <div class="d-flex flex-wrap gap-2" id="citiesContainer">
                                    <!-- Cities will be populated by JavaScript -->
                                </div>
                            </div>

                            <!-- Add New City -->
                            <div class="input-group">
                                <input type="text" class="form-control" id="newCityInput"
                                       placeholder="Enter city name (letters only)"
                                       pattern="[a-zA-Z\s\-'\.]+">
                                <button class="btn btn-outline-success" type="button" id="addCityBtn">
                                    <i class="fas fa-plus"></i> Add City
                                </button>
                            </div>
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                City names should contain only letters, spaces, hyphens, and apostrophes. Each city can only belong to one tier.
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>Cancel
                </button>
                <button type="button" class="btn btn-primary" id="updateDeliveryChargeBtn">
                    <i class="fas fa-save me-1"></i>Update Charge
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        console.log('Document ready - delivery charges page loaded'); // Debug log

        // Test if jQuery and other libraries are loaded
        console.log('jQuery loaded:', typeof $ !== 'undefined');
        console.log('SweetAlert loaded:', typeof Swal !== 'undefined');
        console.log('DataTable loaded:', typeof $.fn.DataTable !== 'undefined');

        // Initialize DataTable with custom options
        try {
            $('#deliveryChargesTable').DataTable({
                "pageLength": 10,
                "ordering": true,
                "searching": true,
                "info": true,
                "responsive": true,
                "language": {
                    "emptyTable": "No delivery charges configured",
                    "zeroRecords": "No matching delivery charges found"
                }
            });
            console.log('DataTable initialized successfully');
        } catch (e) {
            console.error('Error initializing DataTable:', e);
        }

        // Global variable to store current cities
        let currentCities = [];

        // Edit Delivery Charge - Open Modal
        $(document).on('click', '.edit-charge-btn', function(e) {
            e.preventDefault();
            console.log('Edit button clicked'); // Debug log

            const $button = $(this);
            const id = $button.data('id');
            const location = $button.data('location');
            const description = $button.data('description');
            const cityType = $button.data('city-type');
            const charge = $button.data('charge');
            const isActive = $button.data('is-active');
            const citiesData = $button.data('cities');

            console.log('Button data:', { id, location, description, cityType, charge, isActive, citiesData }); // Debug log

            // Validate required data
            if (!id) {
                console.error('No ID found for edit button');
                Swal.fire('Error', 'Unable to edit this delivery charge. Please refresh the page and try again.', 'error');
                return;
            }

            // Set form values
            $('#editChargeId').val(id);
            $('#editCharge').val(charge || '');
            $('#editIsActive').val(isActive ? isActive.toString() : 'true');

            // Set tier information
            $('#editTierTitle').text(location || 'Unknown Tier');
            $('#editTierDescription').text(description || 'No description available');

            // Parse and set cities
            try {
                if (typeof citiesData === 'string' && citiesData.startsWith('[')) {
                    currentCities = JSON.parse(citiesData);
                } else if (Array.isArray(citiesData)) {
                    currentCities = citiesData;
                } else if (typeof citiesData === 'string' && citiesData.length > 0) {
                    currentCities = citiesData.split(',').map(city => city.trim()).filter(city => city.length > 0);
                } else {
                    currentCities = [];
                }
            } catch (e) {
                console.error('Error parsing cities data:', e);
                currentCities = [];
            }

            console.log('Parsed cities:', currentCities); // Debug log

            // Display current cities
            displayCities();

            // Clear new city input
            $('#newCityInput').val('');

            // Show modal using Bootstrap 5
            const modal = new bootstrap.Modal(document.getElementById('editDeliveryChargeModal'));
            modal.show();
            console.log('Modal shown'); // Debug log
        });

        // Display cities function
        function displayCities() {
            const container = $('#citiesContainer');
            container.empty();

            currentCities.forEach((city, index) => {
                // Capitalize first letter of each word for display
                const displayCity = city.split(' ').map(word =>
                    word.charAt(0).toUpperCase() + word.slice(1)
                ).join(' ');

                const cityBadge = $(`
                    <span class="badge bg-primary me-2 mb-2 d-inline-flex align-items-center">
                        ${displayCity}
                        <button type="button" class="btn-close btn-close-white ms-2"
                                onclick="removeCity(${index})"
                                aria-label="Remove ${displayCity}"
                                style="font-size: 0.7em;">
                        </button>
                    </span>
                `);
                container.append(cityBadge);
            });

            if (currentCities.length === 0) {
                container.append('<span class="text-muted">No cities added yet</span>');
            }
        }

        // Remove city function
        window.removeCity = function(index) {
            currentCities.splice(index, 1);
            displayCities();
        };

        // Add city functionality
        $('#addCityBtn').click(function() {
            const originalCity = $('#newCityInput').val().trim();
            const newCity = originalCity.toLowerCase();

            if (!originalCity) {
                Swal.fire('Error', 'Please enter a city name', 'error');
                return;
            }

            // Validate city name (only letters, spaces, hyphens, apostrophes)
            if (!/^[a-zA-Z\s\-'\.]+$/.test(originalCity)) {
                Swal.fire('Error', 'City names should contain only letters, spaces, hyphens, and apostrophes', 'error');
                return;
            }

            // Check if city already exists in current tier
            if (currentCities.some(city => city.toLowerCase() === newCity.toLowerCase())) {
                Swal.fire('Error', 'This city is already in this tier', 'error');
                return;
            }

            // Add city to current list (stored in lowercase)
            currentCities.push(newCity);
            displayCities();
            $('#newCityInput').val('');
        });

        // Allow adding city with Enter key
        $('#newCityInput').keypress(function(e) {
            if (e.which === 13) {
                $('#addCityBtn').click();
            }
        });

        // Real-time charge validation and preview
        $('#editCharge').on('input', function() {
            const charge = $(this).val();
            const chargePreview = $('#chargePreview');

            if (!chargePreview.length) {
                // Add preview element if it doesn't exist
                $(this).closest('.form-group').append('<div id="chargePreview" class="form-text"></div>');
            }

            if (charge && !isNaN(charge) && parseFloat(charge) > 0) {
                $('#chargePreview').html(`<i class="fas fa-info-circle text-info"></i> New charge will be: <strong>₹${parseFloat(charge).toFixed(2)}</strong>`);
                $(this).removeClass('is-invalid').addClass('is-valid');
            } else if (charge) {
                $('#chargePreview').html(`<i class="fas fa-exclamation-triangle text-warning"></i> Please enter a valid amount greater than 0`);
                $(this).removeClass('is-valid').addClass('is-invalid');
            } else {
                $('#chargePreview').html('');
                $(this).removeClass('is-valid is-invalid');
            }
        });

        // Update Delivery Charge with dynamic table update
        $('#updateDeliveryChargeBtn').click(function() {
            const id = $('#editChargeId').val();
            const charge = $('#editCharge').val();
            const isActive = $('#editIsActive').val();

            console.log('Update button clicked:', { id, charge, isActive, currentCities }); // Debug log

            // Validate charge amount
            if (!charge || isNaN(charge) || parseFloat(charge) <= 0) {
                Swal.fire('Error', 'Please enter a valid charge amount (numbers only, greater than 0)', 'error');
                return;
            }

            // Validate cities
            if (currentCities.length === 0) {
                Swal.fire('Error', 'Please add at least one city to this tier', 'error');
                return;
            }

            // Show loading state
            $(this).prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>Updating...');

            const requestData = {
                charge: parseFloat(charge),
                isActive: isActive,
                cities: currentCities
            };

            console.log('Sending request:', requestData); // Debug log

            $.ajax({
                url: `/admin/delivery-charges/${id}`,
                type: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(requestData),
                success: function(response) {
                    console.log('Update response:', response); // Debug log
                    if (response.success) {
                        // Update the table row dynamically instead of reloading
                        updateTableRow(id, response.deliveryCharge);

                        // Close the modal using Bootstrap 5
                        const modal = bootstrap.Modal.getInstance(document.getElementById('editDeliveryChargeModal'));
                        modal.hide();

                        // Show success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Updated!',
                            text: response.message,
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function(xhr) {
                    console.error('Update error:', xhr); // Debug log
                    const errorMessage = xhr.responseJSON?.message || 'Failed to update delivery charge';
                    Swal.fire('Error', errorMessage, 'error');
                },
                complete: function() {
                    // Reset button state
                    $('#updateDeliveryChargeBtn').prop('disabled', false).html('<i class="fas fa-save me-1"></i>Update Charge');
                }
            });
        });

        // Function to update table row dynamically
        function updateTableRow(id, updatedData) {
            const $row = $(`button[data-id="${id}"]`).closest('tr');

            if ($row.length) {
                // Update charge display
                $row.find('td:nth-child(4)').html(`<span class="h5 text-success">₹${updatedData.charge.toFixed(2)}</span>`);

                // Update status badge
                const statusBadge = updatedData.isActive ?
                    '<span class="badge bg-success"><i class="fas fa-check-circle me-1"></i>Active</span>' :
                    '<span class="badge bg-danger"><i class="fas fa-times-circle me-1"></i>Inactive</span>';
                $row.find('td:nth-child(5)').html(statusBadge);

                // Update cities display
                if (updatedData.cities && Array.isArray(updatedData.cities)) {
                    let citiesHtml = '';
                    const displayCities = updatedData.cities.slice(0, 3);
                    displayCities.forEach(city => {
                        citiesHtml += `<span class="badge bg-light text-dark me-1 mb-1">${city}</span>`;
                    });
                    if (updatedData.cities.length > 3) {
                        citiesHtml += `<span class="badge bg-secondary">+${updatedData.cities.length - 3} more</span>`;
                    }
                    $row.find('td:nth-child(3) .cities-container').html(citiesHtml);
                }

                // Update button data attributes
                const $editBtn = $row.find('.edit-charge-btn');
                $editBtn.attr('data-charge', updatedData.charge);
                $editBtn.attr('data-is-active', updatedData.isActive);
                $editBtn.attr('data-cities', JSON.stringify(updatedData.cities));

                // Add visual feedback for the updated row
                $row.addClass('table-success');
                setTimeout(() => {
                    $row.removeClass('table-success');
                }, 3000);
            }
        }


    });
</script>

<%- include("partials/footer") %>
