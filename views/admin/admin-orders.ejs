<%- include("partials/header", { activePage: 'orders' }) %>

<!-- Orders Content -->
<div class="content-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-shopping-cart me-2"></i>All Orders</h1>
            <p class="text-muted mb-0">Manage and track customer orders</p>
        </div>
        <div class="d-flex gap-2">
            <a href="/admin/return-requests" class="btn btn-outline-warning">
                <i class="fas fa-exchange-alt me-1"></i> Return Requests
            </a>
            <button class="btn btn-outline-primary" onclick="exportOrders()">
                <i class="fas fa-download me-1"></i> Export
            </button>
        </div>
    </div>
</div>

<!-- Orders Table -->
<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Customer</th>
                        <th>Date</th>
                        <th>Status</th>
                        <th>Total</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (orders.length > 0) { %>
                        <% orders.forEach(order => { %>
                            <tr>
                                <td>
                                    <strong>#<%= order.displayOrderId %></strong>
                                </td>
                                <td>
                                    <div class="fw-medium"><%= order.customerName %></div>
                                    <small class="text-muted"><%= order.customerEmail %></small>
                                </td>
                                <td><%= order.formattedOrderDate %></td>
                                <td>
                                    <%
                                    let badgeClass = 'bg-warning';
                                    let statusText = order.status;
                                    if (order.status === 'Delivered') {
                                        badgeClass = 'bg-success';
                                    } else if (order.status === 'Shipped') {
                                        badgeClass = 'bg-primary';
                                    } else if (order.status === 'Cancelled') {
                                        badgeClass = 'bg-danger';
                                    } else if (order.status === 'Return Requested') {
                                        badgeClass = 'bg-warning';
                                    } else if (order.status === 'Returned') {
                                        badgeClass = 'bg-secondary';
                                    } else if (order.status === 'Processing') {
                                        badgeClass = 'bg-info';
                                    }
                                    %>
                                    <span class="badge <%= badgeClass %>">
                                        <%= statusText %>
                                    </span>
                                </td>
                                <td>
                                    <strong>â‚¹<%= order.finalAmount.toFixed(2) %></strong>
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <a href="/admin/orders/<%= order._id %>" class="btn btn-outline-primary btn-sm">
                                            <i class="fas fa-eye me-1"></i> View
                                        </a>
                                        <% if (order.status === "Return Requested") { %>
                                            <a href="/admin/return-requests" class="btn btn-outline-warning btn-sm">
                                                <i class="fas fa-exchange-alt me-1"></i> Return
                                            </a>
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="6" class="text-center py-4 text-muted">
                                <i class="fas fa-shopping-cart fa-2x mb-2"></i>
                                <div>No orders found</div>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Pagination -->
<% if (pagination.totalPages > 1) { %>
    <div class="d-flex justify-content-between align-items-center mt-4">
        <div class="text-muted">
            Showing <strong><%= (pagination.currentPage - 1) * limit + 1 %></strong> to
            <strong><%= Math.min(pagination.currentPage * limit, pagination.totalOrders) %></strong> of
            <strong><%= pagination.totalOrders %></strong> orders
        </div>

        <nav aria-label="Orders pagination">
            <ul class="pagination mb-0">
                <!-- First Page -->
                <li class="page-item <%= pagination.currentPage === 1 ? 'disabled' : '' %>">
                    <a class="page-link" href="?page=1&limit=<%= limit %>" aria-label="First">
                        <i class="fas fa-angle-double-left"></i>
                    </a>
                </li>

                <!-- Previous Page -->
                <li class="page-item <%= pagination.currentPage === 1 ? 'disabled' : '' %>">
                    <a class="page-link" href="?page=<%= pagination.currentPage - 1 %>&limit=<%= limit %>" aria-label="Previous">
                        <i class="fas fa-angle-left"></i>
                    </a>
                </li>

                <!-- Page Numbers -->
                <% const maxVisiblePages = 5;
                   let startPage = Math.max(1, pagination.currentPage - Math.floor(maxVisiblePages / 2));
                   let endPage = Math.min(pagination.totalPages, startPage + maxVisiblePages - 1);

                   if (endPage - startPage + 1 < maxVisiblePages) {
                       startPage = Math.max(1, endPage - maxVisiblePages + 1);
                   }

                   for (let i = startPage; i <= endPage; i++) { %>
                    <li class="page-item <%= i === pagination.currentPage ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>&limit=<%= limit %>"><%= i %></a>
                    </li>
                <% } %>

                <!-- Next Page -->
                <li class="page-item <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>">
                    <a class="page-link" href="?page=<%= pagination.currentPage + 1 %>&limit=<%= limit %>" aria-label="Next">
                        <i class="fas fa-angle-right"></i>
                    </a>
                </li>

                <!-- Last Page -->
                <li class="page-item <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>">
                    <a class="page-link" href="?page=<%= pagination.totalPages %>&limit=<%= limit %>" aria-label="Last">
                        <i class="fas fa-angle-double-right"></i>
                    </a>
                </li>
            </ul>
        </nav>

        <!-- Items per page selector -->
        <div class="d-flex align-items-center">
            <span class="text-muted me-2">Items per page:</span>
            <select onchange="window.location.href=`?page=1&limit=${this.value}`"
                    class="form-select form-select-sm" style="width: auto;">
                <option value="10" <%= limit == 10 ? 'selected' : '' %>>10</option>
                <option value="25" <%= limit == 25 ? 'selected' : '' %>>25</option>
                <option value="50" <%= limit == 50 ? 'selected' : '' %>>50</option>
                <option value="100" <%= limit == 100 ? 'selected' : '' %>>100</option>
            </select>
        </div>
    </div>
<% } %>

<!-- Approve Return Modal -->
<div class="modal fade" id="approveModal" tabindex="-1" aria-labelledby="approveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="approveModalLabel">
                    <i class="fas fa-check-circle me-2 text-success"></i>Approve Return Request
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="approveReason" class="mb-3"></p>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Are you sure you want to approve this return request?
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" onclick="approveReturn()" class="btn btn-success">
                    <i class="fas fa-check me-1"></i>Approve Return
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Reject Return Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1" aria-labelledby="rejectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rejectModalLabel">
                    <i class="fas fa-times-circle me-2 text-danger"></i>Reject Return Request
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="rejectForm">
                <div class="modal-body">
                    <p id="rejectReasonDisplay" class="mb-3"></p>
                    <div class="mb-3">
                        <label for="rejectReasonInput" class="form-label">Reason for rejection <span class="text-danger">*</span></label>
                        <textarea id="rejectReasonInput" class="form-control" rows="4"
                                  placeholder="Please provide a reason for rejecting this return request..." required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-times me-1"></i>Reject Return
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
let currentOrderId = null;

function exportOrders() {
    Swal.fire({
        icon: 'info',
        title: 'Export Feature',
        text: 'Export functionality will be implemented soon!'
    });
}

function showApproveModal(orderId, returnReason) {
    currentOrderId = orderId;
    document.getElementById('approveReason').textContent = `Return reason: ${returnReason || 'No reason provided'}`;
    const modal = new bootstrap.Modal(document.getElementById('approveModal'));
    modal.show();
}

function approveReturn() {
    if (!currentOrderId) return;

    fetch(`/admin/orders/${currentOrderId}/approve-return`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': '<%= typeof csrfToken !== "undefined" ? csrfToken : "" %>'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire('Success!', 'Return approved successfully!', 'success').then(() => {
                location.reload();
            });
        } else {
            Swal.fire('Error!', data.message || 'An error occurred', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error!', 'An error occurred while approving the return', 'error');
    })
    .finally(() => {
        bootstrap.Modal.getInstance(document.getElementById('approveModal')).hide();
    });
}

function showRejectModal(orderId, returnReason) {
    currentOrderId = orderId;
    document.getElementById('rejectReasonDisplay').textContent = `Return reason: ${returnReason || 'No reason provided'}`;
    const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
    modal.show();
}

document.getElementById('rejectForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const rejectReason = document.getElementById('rejectReasonInput').value;

    if (!currentOrderId) return;

    fetch(`/admin/orders/${currentOrderId}/reject-return`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': '<%= typeof csrfToken !== "undefined" ? csrfToken : "" %>'
        },
        body: JSON.stringify({ adminResponse: rejectReason })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire('Success!', 'Return rejected successfully!', 'success').then(() => {
                location.reload();
            });
        } else {
            Swal.fire('Error!', data.message || 'An error occurred', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error!', 'An error occurred while rejecting the return', 'error');
    })
    .finally(() => {
        bootstrap.Modal.getInstance(document.getElementById('rejectModal')).hide();
        document.getElementById('rejectForm').reset();
    });
});
</script>

<%- include("partials/footer") %>