<%- include("partials/header", { activePage: 'returns' }) %>

<!-- Return Requests Content -->
<div class="content-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1><i class="fas fa-exchange-alt me-2"></i>Return Requests</h1>
            <p class="text-muted mb-0">Manage customer return requests</p>
        </div>
        <div class="d-flex gap-2">
            <a href="/admin/orders" class="btn btn-outline-primary">
                <i class="fas fa-shopping-cart me-1"></i> View All Orders
            </a>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h4 class="card-title mb-0">Return Requests List</h4>
                    <div class="d-flex align-items-center">
                        <span class="text-muted me-2">Show:</span>
                        <select class="form-select form-select-sm" style="width: auto;"
                                onchange="window.location.href='?page=1&limit=' + this.value + '<%= pagination ? pagination.searchParamsWithoutLimit : '' %>'">
                            <option value="2" <%= pagination && pagination.limit == 2 ? 'selected' : '' %>>2</option>
                            <option value="5" <%= pagination && pagination.limit == 5 ? 'selected' : '' %>>5</option>
                            <option value="10" <%= pagination && pagination.limit == 10 ? 'selected' : '' %>>10</option>
                            <option value="25" <%= pagination && pagination.limit == 25 ? 'selected' : '' %>>25</option>
                            <option value="50" <%= pagination && pagination.limit == 50 ? 'selected' : '' %>>50</option>
                        </select>
                        <span class="text-muted ms-2">entries</span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <% if (returnRequests && returnRequests.length > 0) { %>
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Order ID</th>
                                    <th>Product</th>
                                    <th>Customer</th>
                                    <th>Quantity</th>
                                    <th>Price</th>
                                    <th>Return Reason</th>
                                    <th>Request Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% returnRequests.forEach(request => { %>
                                    <tr>
                                        <td>
                                            <a href="/admin/orders/<%= request.orderId %>" class="text-primary fw-bold text-decoration-none">
                                                #<%= request.displayOrderId %>
                                            </a>
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <img src="<%= request.productImage %>" alt="<%= request.productName %>"
                                                     class="rounded me-3" style="width: 50px; height: 50px; object-fit: cover;">
                                                <div>
                                                    <div class="fw-semibold"><%= request.productName %></div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div>
                                                <div class="fw-semibold"><%= request.customerName %></div>
                                                <small class="text-muted"><%= request.customerEmail %></small>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge bg-secondary"><%= request.quantity %></span>
                                        </td>
                                        <td>
                                            <span class="fw-bold text-success">â‚¹<%= request.price.toFixed(2) %></span>
                                        </td>
                                        <td>
                                            <span class="badge bg-warning text-dark">
                                                <%= request.returnReason %>
                                            </span>
                                        </td>
                                        <td>
                                            <small class="text-muted"><%= request.returnRequestDate %></small>
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-success approve-return-btn"
                                                        data-order-id="<%= request.orderId %>"
                                                        data-product-id="<%= request.productId %>"
                                                        title="Approve Return">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger reject-return-btn"
                                                        data-order-id="<%= request.orderId %>"
                                                        data-product-id="<%= request.productId %>"
                                                        title="Reject Return">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    <% if (pagination && pagination.totalPages > 1) { %>
                        <div class="d-flex justify-content-between align-items-center mt-4">
                            <div class="text-muted">
                                Showing <%= (pagination.currentPage - 1) * pagination.limit + 1 %> to
                                <%= Math.min(pagination.currentPage * pagination.limit, pagination.totalItems) %> of
                                <%= pagination.totalItems %> entries
                            </div>

                            <nav aria-label="Return requests pagination">
                                <ul class="pagination pagination-sm mb-0">
                                    <li class="page-item <%= pagination.currentPage === 1 ? 'disabled' : '' %>">
                                        <a class="page-link" href="?page=1<%= pagination.searchParams %>">
                                            <i class="fas fa-angle-double-left"></i>
                                        </a>
                                    </li>
                                    <li class="page-item <%= pagination.currentPage === 1 ? 'disabled' : '' %>">
                                        <a class="page-link" href="?page=<%= pagination.currentPage - 1 %><%= pagination.searchParams %>">
                                            <i class="fas fa-angle-left"></i>
                                        </a>
                                    </li>

                                    <%
                                    const maxVisiblePages = 5;
                                    let startPage = Math.max(1, pagination.currentPage - Math.floor(maxVisiblePages / 2));
                                    let endPage = Math.min(pagination.totalPages, startPage + maxVisiblePages - 1);

                                    if (endPage - startPage + 1 < maxVisiblePages) {
                                        startPage = Math.max(1, endPage - maxVisiblePages + 1);
                                    }

                                    for (let i = startPage; i <= endPage; i++) {
                                    %>
                                        <li class="page-item <%= i === pagination.currentPage ? 'active' : '' %>">
                                            <a class="page-link" href="?page=<%= i %><%= pagination.searchParams %>"><%= i %></a>
                                        </li>
                                    <% } %>

                                    <li class="page-item <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>">
                                        <a class="page-link" href="?page=<%= pagination.currentPage + 1 %><%= pagination.searchParams %>">
                                            <i class="fas fa-angle-right"></i>
                                        </a>
                                    </li>
                                    <li class="page-item <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>">
                                        <a class="page-link" href="?page=<%= pagination.totalPages %><%= pagination.searchParams %>">
                                            <i class="fas fa-angle-double-right"></i>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    <% } %>
                <% } else { %>
                    <div class="text-center py-5">
                        <div class="mb-3">
                            <i class="fas fa-exchange-alt fa-3x text-muted"></i>
                        </div>
                        <h5 class="text-muted">No Return Requests Found</h5>
                        <p class="text-muted">When customers request returns, they will appear here.</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<script>
// Approve Return Request
document.querySelectorAll('.approve-return-btn').forEach(button => {
    button.addEventListener('click', async (e) => {
        const orderId = e.target.closest('button').dataset.orderId;
        const productId = e.target.closest('button').dataset.productId;

        const result = await Swal.fire({
            title: 'Approve Return?',
            text: 'This will approve the return request and process a refund to the customer\'s wallet.',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#198754',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, approve it!',
            cancelButtonText: 'Cancel'
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch(`/admin/orders/${orderId}/approve-return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': '<%= csrfToken %>'
                    },
                    body: JSON.stringify({ productId })
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Return request approved and refund processed.',
                        icon: 'success',
                        confirmButtonColor: '#198754'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: result.message || 'Failed to approve return request.',
                        icon: 'error',
                        confirmButtonColor: '#dc3545'
                    });
                }
            } catch (error) {
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while processing the request.',
                    icon: 'error',
                    confirmButtonColor: '#dc3545'
                });
            }
        }
    });
});

// Reject Return Request
document.querySelectorAll('.reject-return-btn').forEach(button => {
    button.addEventListener('click', async (e) => {
        const orderId = e.target.closest('button').dataset.orderId;
        const productId = e.target.closest('button').dataset.productId;

        const { value: adminResponse } = await Swal.fire({
            title: 'Reject Return Request',
            input: 'textarea',
            inputLabel: 'Reason for rejection',
            inputPlaceholder: 'Please provide a reason for rejecting this return request...',
            inputAttributes: {
                'aria-label': 'Rejection reason'
            },
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Reject Request',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => {
                if (!value) {
                    return 'Please provide a reason for rejection!';
                }
            }
        });

        if (adminResponse) {
            try {
                const response = await fetch(`/admin/orders/${orderId}/reject-return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': '<%= csrfToken %>'
                    },
                    body: JSON.stringify({ productId, adminResponse })
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Return request has been rejected.',
                        icon: 'success',
                        confirmButtonColor: '#198754'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: result.message || 'Failed to reject return request.',
                        icon: 'error',
                        confirmButtonColor: '#dc3545'
                    });
                }
            } catch (error) {
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while processing the request.',
                    icon: 'error',
                    confirmButtonColor: '#dc3545'
                });
            }
        }
    });
});
</script>

<%- include("partials/footer") %>
