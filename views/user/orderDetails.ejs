<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details | Mangeyko</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        .status-processing { @apply bg-yellow-100 text-yellow-800; }
        .status-shipped { @apply bg-blue-100 text-blue-800; }
        .status-out-for-delivery { @apply bg-indigo-100 text-indigo-800; }
        .status-delivered { @apply bg-green-100 text-green-800; }
        .status-cancelled { @apply bg-red-100 text-red-800; }
        .status-partially-cancelled { @apply bg-orange-100 text-orange-800; }
        .status-return-requested { @apply bg-purple-100 text-purple-800; }
        .status-returned { @apply bg-gray-100 text-gray-800; }
        .status-cancellation-pending { @apply bg-yellow-100 text-yellow-800; }
        .order-item { @apply border-b border-gray-200 last:border-0; }
        .order-card { @apply transition-all duration-300 hover:shadow-md; }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Navbar -->
    <nav class="bg-white shadow-sm">
        <div class="container mx-auto px-4 py-4 flex justify-between items-center">
            <a href="/" class="text-2xl font-bold text-gray-800">
                <i class="fas fa-store mr-2"></i> Mangeyko
            </a>
            <div class="flex items-center space-x-6">
                <a href="/profile" class="text-gray-600 hover:text-gray-800 transition">Profile</a>

                <a href="/cart" class="text-gray-600 hover:text-gray-800 transition">
                    <i class="fas fa-shopping-cart"></i> Cart
                </a>
                <a href="/logout" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition">
                    Logout
                </a>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-4 py-8 max-w-6xl">
        <!-- Payment Alert for Failed or Pending Payments -->
        <% if (order.paymentMethod === 'razorpay' && (order.paymentStatus === 'Failed' || order.paymentStatus === 'Pending') && !order.allItemsCancelled) { %>
            <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded shadow-sm">
                <div class="flex items-center">
                    <div class="py-1 mr-3">
                        <i class="fas fa-exclamation-circle text-2xl text-red-500"></i>
                    </div>
                    <div>
                        <p class="font-bold">Payment Required</p>
                        <p>Your payment for this order has failed. Please complete the payment to process your order.</p>
                    </div>
                </div>
            </div>
        <% } %>

        <!-- Header -->
        <div class="bg-white p-6 rounded-lg shadow-sm mb-8">
            <h1 class="text-2xl font-bold flex items-center">
                <i class="fas fa-receipt mr-2"></i> Order Details
            </h1>
            <p class="text-gray-600 mt-2">Order Number: <%= order.displayOrderId || (order.orderNumber || order._id) %></p>
        </div>

        <!-- Main Content -->
        <div class="flex flex-col lg:flex-row gap-6">
            <!-- Left Column: Order Items and Status -->
            <div class="lg:w-2/3">
                <!-- Order Status -->
                <div class="bg-white p-6 rounded-lg shadow-sm mb-6 order-card">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <i class="fas fa-info-circle mr-2"></i> Order Status
                    </h2>
                    <div class="flex items-center">
                        <span class="px-3 py-1 rounded text-sm font-medium status-<%= order.status.toLowerCase().replace(' ', '-') %>">
                            <%= order.status %>
                        </span>
                        <p class="ml-4 text-gray-600">
                            Ordered on <%= order.formattedOrderDate %> |
                            Estimated Delivery: <%= order.formattedDeliveryDate %>
                        </p>
                    </div>
                </div>

                <!-- Order Items -->
                <div class="bg-white p-6 rounded-lg shadow-sm mb-6 order-card">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <i class="fas fa-shopping-bag mr-2"></i> Items Ordered
                    </h2>
                    <div class="space-y-4">
                        <% order.items.forEach(item => { %>
                            <div class="flex items-start py-4 order-item" data-product-id="<%= item.product._id %>">
                                <div class="w-16 h-16 bg-gray-100 rounded overflow-hidden mr-4">
                                    <img src="<%= item.product.productImage && item.product.productImage.length > 0 ? '/uploads/product-images/' + item.product.productImage[0] : '/images/placeholder-product.jpg' %>"
                                         alt="<%= item.product.productName %>"
                                         class="w-full h-full object-cover">
                                </div>
                                <div class="flex-1">
                                    <h3 class="font-medium"><%= item.product.productName %></h3>
                                    <p class="text-sm text-gray-600">Quantity: <%= item.quantity %></p>
                                    <p class="text-sm text-gray-600">Price: ₹<%= item.price.toFixed(2) %></p>
                                    <p class="text-sm text-gray-600">Status: <span class="item-status <%= item.status === 'Cancelled' ? 'text-red-600' : '' %>"><%= item.status %></span></p>
                                    <% if (item.status === 'Delivered' && item.order_return_status === 'Rejected' && item.returnReason) { %>
                                        <div class="bg-red-100 text-red-800 p-4 rounded mt-4">
                                            <strong>Return Rejected:</strong>
                                            <p><strong>Reason:</strong> <%= item.returnReason %></p>
                                            <p><strong>Admin Response:</strong> <%= item.adminResponse %></p>
                                        </div>
                                    <% } %>
                                </div>
                                <div class="text-right">
                                    <p class="font-medium">₹<%= item.totalPrice %></p>
                                    <% if (item.status === 'Delivered') { %>
                                        <button onclick="returnOrder('<%= item.product._id %>', '<%= order._id %>')"
                                                class="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition flex items-center">
                                            <i class="fas fa-undo-alt mr-2"></i> Return Order
                                        </button>
                                    <% } %>
                                    <% if (item.status === 'Processing') { %>
                                        <button onclick="cancelOrder('<%= order._id %>','<%= item.product._id %>')"
                                                class="bg-red-600 text-white px-6 py-2 rounded hover:bg-red-700 transition flex items-center">
                                            <i class="fas fa-times-circle mr-2"></i> Cancel Order
                                        </button>
                                    <% } %>



                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            </div>

            <!-- Right Column: Order Summary and Shipping -->
            <div class="lg:w-1/3">
                <!-- Order Summary -->
                <div id="orderSummary" class="bg-white p-6 rounded-lg shadow-sm sticky top-4 order-card">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <i class="fas fa-receipt mr-2"></i> Order Summary
                    </h2>
                    <div class="space-y-3 mb-4">
                        <div class="flex justify-between">
                            <span class="text-gray-600">Subtotal (<span id="itemCount"><%= order.items.length %></span> items)</span>
                            <span id="subtotal">₹<%= order.subtotal %></span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Shipping</span>
                            <span id="shipping">₹<%= order.shipping %></span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Tax</span>
                            <span id="tax">₹<%= order.tax %></span>
                        </div>
                        <% if (order.discount > 0) { %>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Discount</span>
                                <span id="discount">-₹<%= order.discount %></span>
                            </div>
                            <% if (order.couponCode) { %>
                                <div class="flex justify-between text-sm text-green-600">
                                    <span>Coupon Applied: <%= order.couponCode %></span>
                                </div>
                            <% } %>
                        <% } %>
                    </div>
                    <div class="border-t border-gray-200 pt-4">
                        <div class="flex justify-between font-bold text-lg">
                            <span>Total</span>
                            <span id="total">₹<%= order.total %></span>
                        </div>
                    </div>
                </div>

                <!-- Shipping Address -->
                <div class="bg-white p-6 rounded-lg shadow-sm mt-6 order-card">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <i class="fas fa-map-marker-alt mr-2"></i> Shipping Address
                    </h2>
                    <p class="text-gray-700 font-medium"><%= order.shippingAddress.fullName %></p>
                    <p class="text-gray-600"><%= order.shippingAddress.addressType %></p>
                    <p class="text-gray-600">
                        <%= order.shippingAddress.landmark ? order.shippingAddress.landmark + ', ' : '' %>
                        <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %> - <%= order.shippingAddress.pincode %>
                    </p>
                    <p class="text-gray-600">Phone: <%= order.shippingAddress.phone %></p>
                </div>

                <!-- Payment Information -->
                <div class="bg-white p-6 rounded-lg shadow-sm mt-6 order-card">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <i class="fas fa-credit-card mr-2"></i> Payment Information
                    </h2>
                    <p class="text-gray-600">Method: <%= order.paymentMethod === 'cod' ? 'Cash on Delivery' : (order.paymentMethod === 'razorpay' ? 'Online Payment' : 'Wallet') %></p>
                    <div class="flex items-center mt-2">
                        <p class="text-gray-600 mr-2">Status:</p>
                        <% if (order.paymentStatus === 'Paid') { %>
                            <span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium">
                                <i class="fas fa-check-circle mr-1"></i> Paid
                            </span>
                        <% } else if (order.paymentStatus === 'Failed' || order.paymentStatus === 'Pending') { %>
                            <span class="px-2 py-1 <%= order.paymentStatus === 'Failed' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800' %> rounded-full text-sm font-medium">
                                <i class="<%= order.paymentStatus === 'Failed' ? 'fas fa-times-circle' : 'fas fa-clock' %> mr-1"></i> <%= order.paymentStatus %>
                            </span>
                        <% } else { %>
                            <span class="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm font-medium">
                                <i class="fas fa-clock mr-1"></i> <%= order.paymentStatus %>
                            </span>
                        <% } %>
                    </div>
                </div>

                <% if (order.couponCode) { %>
                <!-- Coupon Information -->
                <div class="bg-white p-6 rounded-lg shadow-sm mt-6 order-card">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <i class="fas fa-tag mr-2"></i> Coupon Applied
                    </h2>
                    <p class="text-gray-600">Code: <span class="font-medium text-green-600"><%= order.couponCode %></span></p>
                    <p class="text-gray-600">Discount: <span class="font-medium text-green-600">₹<%= order.discount %></span></p>
                </div>
                <% } %>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="bg-white p-6 rounded-lg shadow-sm mt-6 flex flex-wrap justify-between gap-4 order-card">
            <div class="flex flex-wrap gap-3">
                <a href="/profile" class="bg-gray-200 text-gray-800 px-6 py-2 rounded hover:bg-gray-300 transition flex items-center">
                    <i class="fas fa-arrow-left mr-2"></i> Back to Profile
                </a>

                <% if (order.items.some(item => item.status === 'Processing')) { %>
                    <button onclick="cancelAllItems('<%= order._id %>')"
                            class="bg-red-600 text-white px-6 py-2 rounded hover:bg-red-700 transition flex items-center">
                        <i class="fas fa-times-circle mr-2"></i> Cancel All
                    </button>
                <% } %>
            </div>

            <div class="flex flex-wrap gap-3">
                <a href="/orders/<%= order._id %>/track" class="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition flex items-center">
                    <i class="fas fa-truck mr-2"></i> Track Order
                </a>

                <a href="/orders/<%= order._id %>/invoice" class="bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700 transition flex items-center">
                    <i class="fas fa-file-invoice mr-2"></i> Download Invoice
                </a>

                <% if (order.paymentMethod === 'razorpay' && (order.paymentStatus === 'Failed' || order.paymentStatus === 'Pending') && !order.allItemsCancelled) { %>
                    <button id="payNowBtn" onclick="calculateAndPayNonCancelledItems('<%= order._id %>')"
                            class="bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700 transition flex items-center">
                        <i class="fas fa-credit-card mr-2"></i> Pay Now
                    </button>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Return Order Modal -->
    <div id="returnModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden transition-opacity duration-300">
        <div class="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 class="text-xl font-bold mb-4">Return Order</h3>
            <p class="mb-4">Please provide a reason for returning this order:</p>
            <textarea id="returnReason" class="w-full border border-gray-300 rounded p-2 mb-4" rows="3" placeholder="Return reason"></textarea>
            <div class="flex justify-end gap-3">
                <button onclick="closeReturnModal()" class="bg-gray-200 text-gray-800 px-4 py-2 rounded hover:bg-gray-300 transition">Cancel</button>
                <button onclick="submitReturn()" class="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 transition">Submit Return</button>
            </div>
        </div>
    </div>



    <script>
        // Calculate and pay for only non-cancelled items
        function calculateAndPayNonCancelledItems(orderId) {
            // If no non-cancelled items, hide all Pay Now elements
            // Count all items
            const totalItems = document.querySelectorAll('.item-status').length;

            // Count cancelled items (those with text-red-600 class)
            const cancelledItems = document.querySelectorAll('.item-status.text-red-600').length;

            // Check if all items are cancelled
            const allCancelled = totalItems === cancelledItems;

            console.log('Pay Now check - Total items:', totalItems);
            console.log('Pay Now check - Cancelled items:', cancelledItems);
            console.log('Pay Now check - All items cancelled:', allCancelled);

            if (allCancelled) {
                // Hide the error message flash
                console.log('No items to pay - all items cancelled');

                // Hide the Pay Now button
                const payNowBtn = document.getElementById('payNowBtn');
                if (payNowBtn) {
                    payNowBtn.style.display = 'none';
                }

                // Hide the payment alert at the top
                const paymentAlert = document.querySelector('.bg-red-100.border-l-4.border-red-500');
                if (paymentAlert) {
                    paymentAlert.style.display = 'none';
                }

                return;
            }

            // Call retryPayment with orderId only - the server will calculate the correct amount
            retryPayment(orderId);
        }

        // Cancel all items in the order
        async function cancelAllItems(orderId) {
            const confirmation = await Swal.fire({
                title: 'Cancel All Items?',
                text: 'Are you sure you want to cancel all items in this order?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, cancel all!'
            });

            if (!confirmation.isConfirmed) return;

            // Show loading indicator
            Swal.fire({
                title: 'Processing',
                text: 'Cancelling all items...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            try {
                // Get all non-cancelled items
                const itemsToCancel = [];

                // Debug log to check what items are found
                console.log('Looking for items that are not cancelled...');

                // Log all order items to check their structure
                const orderItems = document.querySelectorAll('.order-item');
                console.log('Total order items found:', orderItems.length);

                // Log each item's data attributes
                orderItems.forEach((item, index) => {
                    console.log(`Item ${index + 1}:`, {
                        dataProductId: item.getAttribute('data-product-id'),
                        innerHTML: item.innerHTML.substring(0, 100) + '...' // Log first 100 chars of HTML
                    });
                });

                // Get all order items from the page
                orderItems.forEach(item => {
                    // Find the status element within this item
                    const statusElement = item.querySelector('.item-status');
                    console.log('Found item with status:', statusElement ? statusElement.textContent : 'No status element');

                    // Get the status text and log it with more details
                    const statusText = statusElement ? statusElement.textContent.trim() : '';
                    const statusTextLower = statusText.toLowerCase();

                    console.log('Status text:', statusText);
                    console.log('Status text lowercase:', statusTextLower);
                    console.log('Status element HTML:', statusElement ? statusElement.outerHTML : 'No status element');
                    console.log('Status comparison result:', statusTextLower === 'processing');

                    // Try a more flexible approach to detect "Processing" status
                    const isProcessing = statusTextLower.includes('process') ||
                                        statusText === 'Processing' ||
                                        statusElement?.classList.contains('status-processing');

                    console.log('Is processing (flexible check):', isProcessing);

                    // Get the product ID regardless of status for logging
                    const productId = item.getAttribute('data-product-id');
                    console.log('Item product ID:', productId);

                    // Check if the item has status "Processing" - this is the only status that can be cancelled
                    if (isProcessing) {
                        console.log('Found Processing item with product ID:', productId);

                        if (productId) {
                            itemsToCancel.push(productId);
                        }
                    } else {
                        console.log(`Skipping item with status "${statusText}" as it cannot be cancelled`);
                    }
                });

                console.log('Total items to cancel:', itemsToCancel.length);
                console.log('Items to cancel:', itemsToCancel);

                if (itemsToCancel.length === 0) {
                    Swal.fire('No Items to Cancel', 'There are no items that can be cancelled.', 'info');
                    return;
                }

                // Instead of cancelling one by one, let's cancel all at once
                // This is a more reliable approach

                // Create a single cancellation request for all items
                const cancelAllRequest = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productIds: itemsToCancel,
                        cancelReason: 'Customer requested cancellation of all items'
                    })
                };

                // Send the request to a new endpoint that will handle cancelling all items at once
                console.log('Sending cancel all request for order:', orderId);
                console.log('Items to cancel:', itemsToCancel);

                // Since we don't have a specific endpoint for cancelling all items at once,
                // we'll use the existing endpoint and handle each item sequentially

                let allSuccessful = true;
                let successCount = 0;
                let failCount = 0;

                // Let's try a different approach - find all cancel buttons and click them programmatically
                console.log('Trying to find all cancel buttons...');
                const cancelButtons = document.querySelectorAll('button[onclick*="cancelOrder"]');
                console.log('Found cancel buttons:', cancelButtons.length);

                // Extract product IDs from the cancel buttons
                const productIdsFromButtons = [];
                cancelButtons.forEach(button => {
                    const onclickAttr = button.getAttribute('onclick');
                    console.log('Button onclick attribute:', onclickAttr);

                    // Extract the product ID from the onclick attribute
                    // The format is: cancelOrder('orderId','productId')
                    const match = onclickAttr.match(/cancelOrder\(['"].*?['"],['"](.+?)['"]\)/);
                    if (match && match[1]) {
                        const productId = match[1];
                        console.log('Extracted product ID from button:', productId);
                        productIdsFromButtons.push(productId);
                    }
                });

                console.log('Product IDs from buttons:', productIdsFromButtons);

                // Use the product IDs from buttons if available, otherwise use the ones we found earlier
                const finalItemsToCancel = productIdsFromButtons.length > 0 ? productIdsFromButtons : itemsToCancel;
                console.log('Final items to cancel:', finalItemsToCancel);

                // Process each cancellation sequentially to ensure they all complete
                for (let i = 0; i < finalItemsToCancel.length; i++) {
                    const productId = finalItemsToCancel[i];

                    try {
                        // Update the loading message to show progress
                        Swal.update({
                            title: 'Processing',
                            text: `Cancelling item ${i + 1} of ${finalItemsToCancel.length}...`,
                        });

                        console.log(`Sending cancel request for product ID: ${productId} (${i + 1}/${finalItemsToCancel.length})`);

                        const response = await fetch(`/orders/${orderId}/cancel`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                productId: productId,
                                cancelReason: 'Customer requested cancellation'
                            })
                        });

                        // Check if the response is ok before trying to parse JSON
                        if (!response.ok) {
                            const errorText = await response.text();
                            console.error(`Server error (${response.status}):`, errorText);

                            // Try to parse the error response if possible
                            try {
                                const errorJson = JSON.parse(errorText);
                                console.error(`Server error details:`, errorJson);

                                // Log specific error message
                                if (errorJson.message) {
                                    console.error(`Error message: ${errorJson.message}`);
                                }
                            } catch (e) {
                                // If it's not JSON, just log the raw text
                                console.error(`Raw error response: ${errorText}`);
                            }

                            failCount++;
                            allSuccessful = false;

                            // Wait a bit longer before the next request if there was an error
                            await new Promise(resolve => setTimeout(resolve, 500));
                            continue; // Continue with the next item even if this one failed
                        }

                        let result;
                        try {
                            result = await response.json();
                            console.log(`Cancel response for product ID ${productId}:`, result);
                        } catch (e) {
                            console.error(`Error parsing JSON response for product ID ${productId}:`, e);
                            failCount++;
                            allSuccessful = false;
                            continue;
                        }

                        if (result.success) {
                            successCount++;

                            // Update the status of the cancelled item in the UI
                            const itemElement = document.querySelector(`[data-product-id="${productId}"]`);
                            if (itemElement) {
                                const statusElement = itemElement.querySelector('.item-status');
                                if (statusElement) {
                                    statusElement.textContent = 'Cancelled';
                                    statusElement.className = 'item-status text-red-600';
                                }

                                // Remove the cancel button
                                const cancelButton = itemElement.querySelector('button[onclick*="cancelOrder"]');
                                if (cancelButton) {
                                    cancelButton.remove();
                                }
                            }
                        } else {
                            failCount++;
                            allSuccessful = false;
                            console.error(`Failed to cancel item ${productId}:`, result.message);

                            // Log more details about the failed cancellation
                            console.error(`Item status: ${document.querySelector(`[data-product-id="${productId}"] .item-status`).textContent}`);
                            console.error(`Failure reason: ${result.message || 'Unknown reason'}`);
                        }
                    } catch (error) {
                        failCount++;
                        allSuccessful = false;
                        console.error(`Error cancelling item ${productId}:`, error);
                    }

                    // Add a small delay between requests to avoid overwhelming the server
                    await new Promise(resolve => setTimeout(resolve, 300));
                }

                // After all cancellation requests are processed
                // Hide the Pay Now button immediately if all items were cancelled
                if (successCount > 0 && successCount === finalItemsToCancel.length) {
                    const payNowBtn = document.getElementById('payNowBtn');
                    if (payNowBtn) {
                        payNowBtn.style.display = 'none';
                    }

                    // Hide the payment alert at the top
                    const paymentAlert = document.querySelector('.bg-red-100.border-l-4.border-red-500');
                    if (paymentAlert) {
                        paymentAlert.style.display = 'none';
                    }
                }

                // Show appropriate message based on results
                if (successCount > 0) {
                    if (allSuccessful && finalItemsToCancel.length > 0) {
                        await Swal.fire({
                            title: 'All Items Cancelled',
                            text: `All ${successCount} items have been cancelled successfully. The page will reload to update the order details.`,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    } else if (successCount < finalItemsToCancel.length) {
                        // Show warning for partial cancellation
                        await Swal.fire({
                            title: 'Partial Cancellation',
                            text: `${successCount} items were cancelled, but ${failCount} items could not be cancelled. Only items with "Processing" status can be cancelled. The page will reload with the updated order details.`,
                            icon: 'warning',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        await Swal.fire({
                            title: 'Items Cancelled',
                            text: `${successCount} items have been cancelled successfully. The page will reload to update the order details.`,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    }

                    // Reload the page to get the updated order details from the server
                    window.location.reload();
                } else if (finalItemsToCancel.length === 0) {
                    // No items to cancel
                    await Swal.fire({
                        title: 'No Items to Cancel',
                        text: 'There are no items with "Processing" status that can be cancelled.',
                        icon: 'info',
                        confirmButtonText: 'OK'
                    });
                } else {
                    // No items were cancelled
                    await Swal.fire({
                        title: 'No Changes',
                        text: 'No items were cancelled. Only items with "Processing" status can be cancelled.',
                        icon: 'info',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Error cancelling all items:', error);

                // Provide more detailed error message
                let errorMessage = 'Failed to cancel all items.';
                if (error.message) {
                    errorMessage += ' Error: ' + error.message;
                }

                Swal.fire({
                    title: 'Error',
                    text: errorMessage,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        // Retry payment for failed Razorpay orders
        async function retryPayment(orderId) {
            try {
                // Show loading indicator
                Swal.fire({
                    title: 'Processing',
                    text: 'Initializing payment...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Create Razorpay order - the server will calculate the correct amount based on non-cancelled items
                const response = await fetch('/razorpay/create-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId: orderId
                    })
                });

                // Try to parse the response as JSON, but handle text responses too
                let result;
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    try {
                        result = await response.json();
                    } catch (e) {
                        console.error('Error parsing JSON response:', e);
                        throw new Error('Invalid response from server. Please try again.');
                    }
                } else {
                    // Handle non-JSON response
                    const textResponse = await response.text();
                    console.error('Received non-JSON response:', textResponse);
                    throw new Error('Unexpected response from server. Please try again.');
                }

                if (!response.ok) {
                    throw new Error(result.message || result.error || 'Failed to create payment order');
                }

                // Close the loading indicator
                Swal.close();

                // Initialize Razorpay checkout
                const options = {
                    key: '<%= razorpayKeyId %>', // This should be passed from the server
                    amount: result.order.amount,
                    currency: result.order.currency || 'INR',
                    name: 'Mangeyko',
                    description: 'Complete your pending payment',
                    order_id: result.order.id,
                    image: 'https://i.imgur.com/3g7nmJC.png', // Add your logo URL here
                    handler: async function(response) {
                        // Show loading indicator
                        Swal.fire({
                            title: 'Verifying',
                            text: 'Confirming your payment...',
                            allowOutsideClick: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });

                        try {
                            // Verify payment with server
                            const verifyResponse = await fetch('/razorpay/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    order_id: orderId
                                })
                            });

                            // Try to parse the response as JSON, but handle text responses too
                            let verifyResult;
                            const contentType = verifyResponse.headers.get('content-type');
                            if (contentType && contentType.includes('application/json')) {
                                try {
                                    verifyResult = await verifyResponse.json();
                                } catch (e) {
                                    console.error('Error parsing JSON response:', e);
                                    throw new Error('Invalid response from server. Please try again.');
                                }
                            } else {
                                // Handle non-JSON response
                                const textResponse = await verifyResponse.text();
                                console.error('Received non-JSON response:', textResponse);
                                throw new Error('Unexpected response from server. Please try again.');
                            }

                            if (verifyResult.success) {
                                Swal.fire({
                                    title: 'Payment Successful',
                                    text: 'Your payment has been processed successfully.',
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                throw new Error(verifyResult.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            console.error('Payment verification error:', error);
                            Swal.fire({
                                title: 'Payment Verification Failed',
                                text: error.message || 'Failed to verify payment. Please try again.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    },
                    prefill: {
                        name: '<%= order.shippingAddress.fullName %>',
                        contact: '<%= order.shippingAddress.phone %>'
                    },
                    theme: {
                        color: '#000000'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();
            } catch (error) {
                console.error('Error retrying payment:', error);
                Swal.fire({
                    title: 'Error',
                    text: error.message || 'Failed to initialize payment. Please try again later.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        // Update order summary with new calculations
        function updateOrderSummary() {
            // Get all order items
            const orderItems = [
                <% order.items.forEach(item => { %>
                    {
                        id: '<%= item.product._id %>',
                        status: '<%= item.status %>',
                        price: <%= item.price %>,
                        quantity: <%= item.quantity %>,
                        totalPrice: <%= parseFloat(item.totalPrice) %>
                    },
                <% }); %>
            ];

            // Filter out cancelled items
            const nonCancelledItems = orderItems.filter(item => item.status !== 'Cancelled');

            // Calculate subtotal for non-cancelled items
            const subtotal = nonCancelledItems.reduce((sum, item) => sum + item.totalPrice, 0);

            // Get shipping and tax
            const shipping = <%= parseFloat(order.shipping) %>;
            const tax = <%= parseFloat(order.tax) %>;

            // Calculate final amount
            let finalAmount = subtotal + shipping + tax;

            // Apply discount if applicable
            <% if (order.discount && parseFloat(order.discount) > 0) { %>
                const discount = <%= parseFloat(order.discount) %>;
                finalAmount -= discount;
            <% } %>

            // Ensure amount is not negative
            finalAmount = Math.max(finalAmount, 0);

            // Round to 2 decimal places to match Razorpay's calculation
            finalAmount = Math.round(finalAmount * 100) / 100;

            // Update the UI
            document.getElementById('itemCount').textContent = nonCancelledItems.length;
            document.getElementById('subtotal').textContent = `₹${subtotal.toFixed(2)}`;
            document.getElementById('shipping').textContent = `₹${shipping.toFixed(2)}`;
            document.getElementById('tax').textContent = `₹${tax.toFixed(2)}`;
            <% if (order.discount && parseFloat(order.discount) > 0) { %>
                document.getElementById('discount').textContent = `-₹${parseFloat(order.discount).toFixed(2)}`;
            <% } %>
            document.getElementById('total').textContent = `₹${finalAmount.toFixed(2)}`;

            // Log the exact amount that will be sent to Razorpay (in paise)
            const razorpayAmount = Math.max(100, Math.round(finalAmount * 100));
            console.log('Amount to be charged by Razorpay (in paise):', razorpayAmount);
            console.log('Amount to be charged by Razorpay (in rupees):', razorpayAmount / 100);

            return {
                nonCancelledItems,
                subtotal,
                shipping,
                tax,
                finalAmount,
                razorpayAmount
            };
        }

        // Cancel Order (for COD orders)
        async function cancelOrder(orderId, productId) {
            const confirmation = await Swal.fire({
                title: 'Are you sure?',
                text: 'Do you really want to cancel this order?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, cancel it!'
            });

            if (!confirmation.isConfirmed) return;

            try {
                // Show loading indicator
                Swal.fire({
                    title: 'Processing',
                    text: 'Cancelling item...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(`/orders/${orderId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId: productId,
                        cancelReason: 'Customer requested cancellation'
                    })
                });

                // Try to parse the response as JSON, but handle text responses too
                let result;
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    try {
                        result = await response.json();
                    } catch (e) {
                        console.error('Error parsing JSON response:', e);
                        throw new Error('Invalid response from server. Please try again.');
                    }
                } else {
                    // Handle non-JSON response
                    const textResponse = await response.text();
                    console.error('Received non-JSON response:', textResponse);
                    throw new Error('Unexpected response from server. Please try again.');
                }

                if (result.success) {
                    // Check if all products are now cancelled
                    // Count all items
                    const totalItems = document.querySelectorAll('.item-status').length;

                    // Count items that are already cancelled (have the text-red-600 class)
                    const alreadyCancelledItems = document.querySelectorAll('.item-status.text-red-600').length;

                    // Check if all items will be cancelled after this cancellation (+1 for the current item being cancelled)
                    const allCancelled = totalItems === alreadyCancelledItems + 1;

                    console.log('Total items:', totalItems);
                    console.log('Already cancelled items:', alreadyCancelledItems);
                    console.log('All items will be cancelled:', allCancelled);

                    // If all products are cancelled, update the UI immediately before reload
                    if (allCancelled) {
                        // Hide the Pay Now button
                        const payNowBtn = document.getElementById('payNowBtn');
                        if (payNowBtn) {
                            payNowBtn.style.display = 'none';
                        }

                        // Hide the payment alert at the top
                        const paymentAlert = document.querySelector('.bg-red-100.border-l-4.border-red-500');
                        if (paymentAlert) {
                            paymentAlert.style.display = 'none';
                        }

                        await Swal.fire({
                            title: 'All Items Cancelled',
                            text: 'All items in this order have been cancelled. The page will reload to update the order details.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        // Show a success message for single item cancellation
                        await Swal.fire({
                            title: 'Item Cancelled',
                            text: 'The item has been cancelled successfully. The page will reload to update the order details.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    }

                    // Reload the page to get the updated order details from the server
                    window.location.reload();
                } else {
                    Swal.fire('Error', result.message || 'Failed to cancel order', 'error');
                }
            } catch (error) {
                console.error('Error cancelling order:', error);
                Swal.fire('Error', 'Failed to cancel order', 'error');
            }
        }



        // Return Order Modal

        let currentProductId = null;
        let currentOrderId = null;

        function returnOrder(productId, orderId) {
            currentProductId = productId;
            currentOrderId = orderId;
            document.getElementById('returnModal').classList.remove('hidden');
        }

        function closeReturnModal() {
            console.log('Closing modal...');
            const modal = document.getElementById('returnModal');
            if (modal) {
                modal.classList.add('hidden');
            }
            document.getElementById('returnReason').value = ''; // Clear input after close
            currentProductId = null;
            currentOrderId = null;
        }

        async function submitReturn() {
            const returnReason = document.getElementById('returnReason').value.trim();

            if (!returnReason) {
                Swal.fire('Error', 'Please provide a reason for the return', 'error');
                return;
            }

            try {
                const response = await fetch(`/orders/${currentOrderId}/return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId: currentProductId,
                        returnReason
                    })
                });

                // Try to parse the response as JSON, but handle text responses too
                let result;
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    try {
                        result = await response.json();
                    } catch (e) {
                        console.error('Error parsing JSON response:', e);
                        throw new Error('Invalid response from server. Please try again.');
                    }
                } else {
                    // Handle non-JSON response
                    const textResponse = await response.text();
                    console.error('Received non-JSON response:', textResponse);
                    throw new Error('Unexpected response from server. Please try again.');
                }

                if (result.success) {
                    await Swal.fire('Success', 'Return request submitted successfully', 'success');
                    closeReturnModal();
                    setTimeout(() => window.location.reload(), 300); // Slight delay for visual closure
                } else {
                    Swal.fire('Error', result.message || 'Failed to submit return request', 'error');
                }
            } catch (error) {
                console.error('Error submitting return request:', error);
                Swal.fire('Error', 'Failed to submit return request', 'error');
            }
        }
    </script>
</body>
</html>