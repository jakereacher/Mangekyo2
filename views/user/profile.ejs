<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || 'User Profile | Mangeyko' %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        #imageUpload { display: none; }
        .profile-pic {
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .profile-pic:hover { transform: scale(1.05); }
        .order-card { transition: all 0.3s ease; }
        .order-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        .address-card { transition: all 0.3s ease; }
        .address-card:hover { transform: translateY(-2px); }
        .address-card.default { border-left: 4px solid black; }
        .form-label {
            font-weight: 600;
            display: block;
            margin-bottom: 0.5rem;
            color: #374151;
        }
        #otpModal {
            transition: all 0.3s ease;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-900 font-sans">
    <!-- Navbar -->
    <nav class="bg-white shadow-sm">
        <div class="container mx-auto px-4 py-4 flex justify-between items-center">
            <a href="/" class="text-2xl font-bold text-gray-800">
                <i class="fas fa-store mr-2"></i> Mangeyko
            </a>
            <div class="flex items-center space-x-6">
                <a href="/profile" class="text-gray-600 hover:text-gray-800 transition">Profile</a>
                <a href="/cart" class="text-gray-600 hover:text-gray-800 transition">
                    <i class="fas fa-shopping-cart"></i> Cart
                </a>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-4 py-8 max-w-6xl">
        <!-- Status Message Box -->
        <div id="updateStatus" class="hidden mb-6 p-3 rounded bg-blue-100 text-blue-800"></div>

        <!-- Profile Header Section -->
        <div class="profile-header bg-white p-6 rounded-lg shadow-md mb-8">
            <h1 class="text-2xl font-bold mb-6 pb-2 border-b border-gray-200">
                <i class="fas fa-user-circle mr-2"></i>My Profile
            </h1>

            <div class="flex flex-col md:flex-row items-start md:items-center gap-6">
                <!-- Profile Image Upload -->
                <div class="profile-image-section text-center">
                    <h2 class="form-label text-center mb-2">Profile Photo</h2>
                    <form id="profileImageForm">
                        <label for="imageUpload" class="relative inline-block">
                            <img
                                src="<%= user.profileImage || '/images/default-avatar.png' %>"
                                class="profile-pic w-32 h-32 rounded-full object-cover border-2 border-gray-200"
                                id="previewImage"
                                alt="Profile Picture">
                            <div class="absolute bottom-0 right-0 bg-black text-white rounded-full p-2 shadow-md">
                                <i class="fas fa-camera"></i>
                            </div>
                        </label>
                        <input type="file" id="imageUpload" name="profileImage" accept="image/*">
                        <p class="text-xs text-gray-500 mt-2">Click to update photo</p>
                    </form>
                </div>

                <!-- Profile Information Form -->
                <div class="profile-info flex-1 w-full">
                    <form id="editProfileForm" class="space-y-4">
                        <input type="hidden" id="currentEmail" value="<%= user.email %>">

                        <div class="form-group">
                            <label for="nameInput" class="form-label">
                                <i class="fas fa-user mr-2"></i>Full Name
                            </label>
                            <input type="text" name="name" id="nameInput"
                                value="<%= user.name %>"
                                class="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                required>
                        </div>

                        <div class="form-group">
                            <label for="emailInput" class="form-label">
                                <i class="fas fa-envelope mr-2"></i>Email Address
                            </label>
                            <input type="email" name="email" id="emailInput" value="<%= user.email %>"
                                class="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                required>
                            <% if (user.unverifiedNewEmail && !user.isEmailVerified) { %>
                                <p class="text-red-500 text-sm mt-1">
                                    <i class="fas fa-exclamation-circle mr-1"></i>Email not verified
                                </p>
                            <% } %>
                        </div>



                        <button type="submit" class="mt-3 bg-black text-white px-4 py-2 rounded hover:bg-gray-800 transition">
                            <i class="fas fa-save mr-2"></i>Save Profile Changes
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Password Management Section -->
        <div class="section bg-white p-6 rounded-lg shadow-sm mb-8">
            <button type="button" onclick="togglePasswordSection()"
                    class="w-full flex items-center justify-between p-4 bg-gray-100 hover:bg-gray-200 rounded border border-gray-300 transition">
                <span class="flex items-center">
                    <i class="fas fa-key mr-2"></i>
                    <h2 class="text-xl font-bold">Password Management</h2>
                </span>
                <i id="passwordDropdownIcon" class="fas fa-chevron-down transition-transform"></i>
            </button>

            <!-- Password Management Content (Hidden by default) -->
            <div id="passwordManagementContent" class="hidden mt-4 p-6 bg-gray-50 rounded border border-gray-200">
                <!-- Current Password Display -->
                <div class="mb-6 p-4 bg-white rounded-lg border border-gray-200">
                    <h3 class="text-lg font-semibold mb-3 flex items-center">
                        <i class="fas fa-eye mr-2 text-gray-600"></i>Current Password
                    </h3>
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-3">
                            <span id="currentPasswordDisplay" class="font-mono text-lg bg-gray-50 px-3 py-2 rounded border border-gray-300">••••••••••••</span>
                            <button id="showPasswordBtn" onclick="showCurrentPassword()"
                                    class="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 transition flex items-center">
                                <i class="fas fa-eye mr-1"></i>Show Password
                            </button>
                        </div>
                    </div>
                    <div id="passwordHelpText" class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded hidden">
                        <div class="flex items-start">
                            <i class="fas fa-info-circle text-blue-600 mt-0.5 mr-2"></i>
                            <div>
                                <p class="text-sm text-blue-800 font-medium">Password viewing not available</p>
                                <p class="text-sm text-blue-700 mt-1">To enable password viewing, please set a new password using the form below. This will allow you to view your password in the future.</p>
                            </div>
                        </div>
                    </div>
                    <p class="text-sm text-gray-500 mt-2">Click "Show Password" to view your current password.</p>
                </div>

                <!-- Change Password Form -->
                <div class="p-4 bg-white rounded-lg border border-gray-200">
                    <h3 class="text-lg font-semibold mb-4 flex items-center">
                        <i class="fas fa-lock mr-2 text-gray-600"></i>Change Password
                    </h3>

                    <form id="passwordForm" class="space-y-4">
                        <!-- New Password -->
                        <div class="form-group">
                            <label for="newPassword" class="form-label">
                                <i class="fas fa-key mr-2"></i>New Password
                            </label>
                            <div class="relative">
                                <input type="password" id="newPassword" name="newPassword"
                                       class="w-full px-4 py-2 pr-12 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                       placeholder="Enter new password" required>
                                <button type="button" onclick="togglePassword('newPassword')"
                                        class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>

                            <!-- Password Strength Indicator -->
                            <div class="mt-2">
                                <div class="flex justify-between items-center mb-1">
                                    <span class="text-sm text-gray-600">Password Strength:</span>
                                    <span id="strengthText" class="text-sm font-medium text-red-600">Weak</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2">
                                    <div id="strengthBar" class="h-2 rounded-full transition-all duration-300 bg-red-500" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Confirm Password -->
                        <div class="form-group">
                            <label for="confirmPassword" class="form-label">
                                <i class="fas fa-check-circle mr-2"></i>Confirm New Password
                            </label>
                            <div class="relative">
                                <input type="password" id="confirmPassword" name="confirmPassword"
                                       class="w-full px-4 py-2 pr-12 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                       placeholder="Confirm new password" required>
                                <button type="button" onclick="togglePassword('confirmPassword')"
                                        class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>

                            <!-- Password Match Indicator -->
                            <div id="matchIndicator" class="mt-2 hidden">
                                <p id="matchText" class="text-sm"></p>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="flex justify-start">
                            <button type="submit" id="submitBtn"
                                    class="bg-black text-white px-6 py-2 rounded hover:bg-gray-800 transition flex items-center">
                                <i class="fas fa-key mr-2"></i>Update Password
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Addresses Section (Mobile kept here) -->
        <div class="section bg-white p-6 rounded-lg shadow-sm mb-8">
            <h2 class="text-2xl font-bold mb-4 pb-2 border-b border-gray-200">
                <i class="fas fa-map-marker-alt mr-2"></i>My Addresses
            </h2>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6" id="addressesContainer">
                <% if (user.address && user.address.length > 0) { %>
                    <% user.address.forEach(address => { %>
                        <div class="address-card bg-white p-4 rounded shadow-sm border border-gray-200 <%= address.isDefault ? 'default' : '' %>">
                            <h3 class="font-bold text-lg mb-1"><%= address.fullName || 'N/A' %></h3>
                            <p class="text-gray-700 mb-1">
                                <i class="fas fa-map-pin mr-1 text-gray-500"></i>
                                <%= address.addressLine || '' %><%= address.landmark ? ', ' + address.landmark : '' %>
                            </p>
                            <p class="text-gray-700 mb-1">
                                <i class="fas fa-city mr-1 text-gray-500"></i>
                                <%= address.city || '' %><%= address.state ? ', ' + address.state : '' %><%= address.pinCode ? ' - ' + address.pinCode : '' %>
                            </p>
                            <p class="text-gray-700 mb-3">
                                <i class="fas fa-phone-alt mr-1 text-gray-500"></i>
                                <%= address.mobile || 'N/A' %>
                            </p>

                            <div class="address-actions mt-4 flex flex-wrap gap-2">
                                <% if (!address.isDefault) { %>
                                    <button onclick="setDefaultAddress('<%= address._id %>')"
                                            class="bg-gray-800 text-white px-3 py-1 rounded text-sm hover:bg-gray-700 flex items-center">
                                        <i class="fas fa-check-circle mr-1"></i> Set Default
                                    </button>
                                <% } else { %>
                                    <span class="inline-block bg-green-100 text-green-800 px-3 py-1 rounded text-sm font-medium flex items-center">
                                        <i class="fas fa-star mr-1"></i> Default Address
                                    </span>
                                <% } %>
                                <button onclick="editAddress('<%= address._id %>')"
                                        class="bg-gray-200 text-gray-800 px-3 py-1 rounded text-sm hover:bg-gray-300 flex items-center">
                                    <i class="fas fa-edit mr-1"></i> Edit
                                </button>
                                <button onclick="deleteAddress('<%= address._id %>')"
                                        class="bg-red-100 text-red-800 px-3 py-1 rounded text-sm hover:bg-red-200 flex items-center">
                                    <i class="fas fa-trash-alt mr-1"></i> Delete
                                </button>
                            </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <p class="text-gray-500 col-span-full p-4 bg-gray-50 rounded border border-gray-200">
                        <i class="fas fa-info-circle mr-2"></i>No addresses saved yet. Please add a delivery address.
                    </p>
                <% } %>
            </div>

            <button onclick="showAddressModal('add')"
                    class="bg-black text-white px-4 py-2 rounded hover:bg-gray-800 transition flex items-center">
                <i class="fas fa-plus mr-2"></i> Add New Address
            </button>
        </div>

        <!-- Order History Section -->
        <div class="section bg-white p-6 rounded-lg shadow-sm mb-8">
            <h2 class="text-2xl font-bold mb-4 pb-2 border-b border-gray-200">
                <i class="fas fa-history mr-2"></i>Order History
            </h2>

            <button class="bg-black text-white px-4 py-2 rounded hover:bg-gray-800 transition flex items-center" onclick="toggleOrderHistory()">
                <i class="fas fa-chevron-down mr-2"></i> Show Order History
            </button>

            <div id="orderHistoryContainer" class="hidden mt-4">
                <% if (user.orderHistory && user.orderHistory.length > 0) { %>
                    <div id="paginatedOrders" class="space-y-4">
                        <!-- Orders will be dynamically rendered here -->
                    </div>
                    <div class="flex justify-between items-center mt-4">
                        <button id="prevPage" class="bg-gray-200 text-gray-800 px-4 py-2 rounded hover:bg-gray-300 transition" disabled>
                            <i class="fas fa-arrow-left mr-2"></i> Previous
                        </button>
                        <button id="nextPage" class="bg-gray-200 text-gray-800 px-4 py-2 rounded hover:bg-gray-300 transition">
                            Next <i class="fas fa-arrow-right ml-2"></i>
                        </button>
                    </div>
                <% } else { %>
                    <div class="bg-gray-50 border border-gray-200 rounded p-6 text-center">
                        <div class="text-gray-400 mb-3">
                            <i class="fas fa-shopping-cart text-4xl"></i>
                        </div>
                        <p class="text-gray-600 mb-4">You haven't placed any orders yet.</p>
                        <a href="/products" class="inline-block bg-black text-white px-4 py-2 rounded hover:bg-gray-800 transition">
                            <i class="fas fa-shopping-bag mr-2"></i> Start Shopping
                        </a>
                    </div>
                <% } %>
            </div>
        </div>

        <script>
            let currentPage = 1;
            const ordersPerPage = 3;
            const orders = <%- JSON.stringify(user.orderHistory || []) %>;

            function renderOrders() {
                const start = (currentPage - 1) * ordersPerPage;
                const end = start + ordersPerPage;
                const paginatedOrders = orders.slice(start, end);

                const container = document.getElementById('paginatedOrders');
                container.innerHTML = '';

                paginatedOrders.forEach(order => {
                    const orderCard = `
                        <div class="order-card bg-white p-4 rounded shadow-sm border border-gray-200">
                            <div class="flex justify-between items-start mb-2">
                                <h3 class="font-bold text-lg flex items-center">
                                    <i class="fas fa-shopping-bag mr-2 text-gray-700"></i>
                                    Order #${order._id.toString().slice(-5).toUpperCase()}
                                </h3>
                                <h3>${order.paymentStatus}</h3>

                            </div>
                            <div class="border-t border-gray-200 pt-3">
                                ${order.orderedItems.map(item => `
                                    <div class="flex items-start py-2 border-b border-gray-100 last:border-0">
                                        <div class="w-16 h-16 bg-gray-100 rounded overflow-hidden mr-3">
                                            ${item.product && item.product.productImage && item.product.productImage.length > 0
                                                ? `<img src="/uploads/product-images/${item.product.productImage[0]}" alt="${item.product.productName}" class="w-full h-full object-cover">`
                                                : `<div class="w-full h-full bg-gray-200 flex items-center justify-center">
                                                    <i class="fas fa-image text-gray-400"></i>
                                                </div>`}
                                        </div>
                                        <div class="flex-1">
                                            <h4 class="font-medium">${item.product ? item.product.productName : 'Product not available'}</h4>
                                            <p class="text-sm text-gray-600">Qty: ${item.quantity} × ₹${Math.round(item.price)}</p>
                                            <p class="text-xs mt-1">
                                                Status:
                                                <span class="${item.status === 'Delivered' ? 'text-green-600' : ''}
                                                    ${item.status === 'Shipped' ? 'text-blue-600' : ''}
                                                    ${item.status === 'Processing' ? 'text-yellow-600' : ''}
                                                    ${item.status === 'Cancelled' ? 'text-red-600' : ''}
                                                    ${item.status === 'Partially Cancelled' ? 'text-orange-600' : ''}">
                                                    ${item.status}
                                                </span>
                                            </p>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                            <div class="flex justify-between items-center mt-4 pt-3 border-t border-gray-200">
                                <div>
                                    <p class="text-gray-600 text-sm">Ordered on ${new Date(order.orderDate).toLocaleDateString('en-US', { day: 'numeric', month: 'short', year: 'numeric' })}</p>
                                    <p class="font-medium">Total: ₹${Math.round(order.finalAmount)}</p>
                                </div>
                                <div class="flex gap-2">
                                    <a href="/orders/${order._id}" class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded text-sm flex items-center">
                                        <i class="fas fa-eye mr-1"></i> View Details
                                    </a>
                                </div>
                            </div>
                        </div>
                    `;
                    container.innerHTML += orderCard;
                });

                document.getElementById('prevPage').disabled = currentPage === 1;
                document.getElementById('nextPage').disabled = end >= orders.length;
            }

            document.getElementById('prevPage').addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderOrders();
                }
            });

            document.getElementById('nextPage').addEventListener('click', () => {
                if (currentPage * ordersPerPage < orders.length) {
                    currentPage++;
                    renderOrders();
                }
            });

            function toggleOrderHistory() {
                const container = document.getElementById('orderHistoryContainer');
                container.classList.toggle('hidden');
                if (!container.classList.contains('hidden')) {
                    renderOrders();
                }
            }

            // Order history functions

            // Password Management Dropdown Toggle
            function togglePasswordSection() {
                const content = document.getElementById('passwordManagementContent');
                const icon = document.getElementById('passwordDropdownIcon');

                if (content.classList.contains('hidden')) {
                    content.classList.remove('hidden');
                    icon.classList.add('rotate-180');
                } else {
                    content.classList.add('hidden');
                    icon.classList.remove('rotate-180');
                }
            }

            // Password Management Functions
            function togglePassword(fieldId) {
                const field = document.getElementById(fieldId);
                const icon = field.nextElementSibling.querySelector('i');

                if (field.type === 'password') {
                    field.type = 'text';
                    icon.classList.replace('fa-eye', 'fa-eye-slash');
                } else {
                    field.type = 'password';
                    icon.classList.replace('fa-eye-slash', 'fa-eye');
                }
            }

            function calculatePasswordStrength(password) {
                let score = 0;
                const checks = {
                    length: password.length >= 8,
                    lowercase: /[a-z]/.test(password),
                    uppercase: /[A-Z]/.test(password),
                    numbers: /\d/.test(password),
                    special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
                };

                Object.values(checks).forEach(check => check && score++);
                return { score, checks };
            }

            function updateStrengthIndicator() {
                const password = document.getElementById('newPassword').value;
                const bar = document.getElementById('strengthBar');
                const text = document.getElementById('strengthText');

                if (!password) {
                    bar.style.width = '0%';
                    bar.className = 'h-2 rounded-full transition-all duration-300 bg-red-500';
                    text.textContent = 'Weak';
                    return;
                }

                const { score } = calculatePasswordStrength(password);
                const width = (score / 5) * 100;
                bar.style.width = width + '%';

                if (score <= 2) {
                    bar.className = 'h-2 rounded-full transition-all duration-300 bg-red-500';
                    text.textContent = 'Weak';
                } else if (score === 3) {
                    bar.className = 'h-2 rounded-full transition-all duration-300 bg-yellow-500';
                    text.textContent = 'Fair';
                } else if (score === 4) {
                    bar.className = 'h-2 rounded-full transition-all duration-300 bg-blue-500';
                    text.textContent = 'Good';
                } else {
                    bar.className = 'h-2 rounded-full transition-all duration-300 bg-green-500';
                    text.textContent = 'Strong';
                }
            }

            function checkPasswordMatch() {
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                const indicator = document.getElementById('matchIndicator');
                const text = document.getElementById('matchText');

                if (!confirmPassword) {
                    indicator.classList.add('hidden');
                    return;
                }

                indicator.classList.remove('hidden');

                if (newPassword === confirmPassword) {
                    text.innerHTML = '<i class="fas fa-check text-green-600 mr-1"></i>Passwords match';
                    text.className = 'text-green-600';
                } else {
                    text.innerHTML = '<i class="fas fa-times text-red-600 mr-1"></i>Passwords do not match';
                    text.className = 'text-red-600';
                }
            }



            // Clear form function
            function clearPasswordForm() {
                document.getElementById('newPassword').value = '';
                document.getElementById('confirmPassword').value = '';
                document.getElementById('strengthBar').style.width = '0%';
                document.getElementById('strengthText').textContent = 'Weak';
                document.getElementById('matchIndicator').classList.add('hidden');
            }

            // Show current password function
            async function showCurrentPassword() {
                const btn = document.getElementById('showPasswordBtn');
                const display = document.getElementById('currentPasswordDisplay');
                const helpText = document.getElementById('passwordHelpText');

                try {
                    btn.disabled = true;
                    btn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Loading...';

                    const response = await fetch('/profile/get-current-password', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        display.textContent = result.password;

                        // Check if password viewing is not available
                        if (result.password.includes('Set a new password below')) {
                            helpText.classList.remove('hidden');
                            btn.innerHTML = '<i class="fas fa-eye mr-1"></i>Show Password';
                            btn.onclick = showCurrentPassword;
                        } else {
                            helpText.classList.add('hidden');
                            btn.innerHTML = '<i class="fas fa-eye-slash mr-1"></i>Hide Password';
                            btn.onclick = hideCurrentPassword;
                        }
                    } else {
                        Swal.fire('Error', result.message || 'Could not retrieve password', 'error');
                    }
                } catch (error) {
                    console.error('Error getting current password:', error);
                    Swal.fire('Error', 'Unable to retrieve current password', 'error');
                } finally {
                    btn.disabled = false;
                }
            }

            // Hide current password function
            function hideCurrentPassword() {
                const btn = document.getElementById('showPasswordBtn');
                const display = document.getElementById('currentPasswordDisplay');

                display.textContent = '••••••••••••';
                btn.innerHTML = '<i class="fas fa-eye mr-1"></i>Show Password';
                btn.onclick = showCurrentPassword;
            }

            // Clear form on page load
            document.addEventListener('DOMContentLoaded', function() {
                clearPasswordForm();
            });

            // Event Listeners
            document.getElementById('newPassword').addEventListener('input', updateStrengthIndicator);
            document.getElementById('newPassword').addEventListener('input', checkPasswordMatch);
            document.getElementById('confirmPassword').addEventListener('input', checkPasswordMatch);

            // Form Submission
            document.getElementById('passwordForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                const submitBtn = document.getElementById('submitBtn');

                // Basic validation
                if (!newPassword || !confirmPassword) {
                    Swal.fire('Missing Fields', 'Please fill in both password fields', 'warning');
                    return;
                }

                if (newPassword.length < 8) {
                    Swal.fire('Password Too Short', 'Password must be at least 8 characters', 'error');
                    return;
                }

                if (newPassword !== confirmPassword) {
                    Swal.fire('Passwords Don\'t Match', 'Please ensure both passwords are identical', 'error');
                    return;
                }

                try {
                    // Show loading
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Updating...';

                    // Update password
                    const response = await fetch('/profile/change-password', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            newPassword
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Show success modal after successful update
                        await Swal.fire({
                            title: 'Password Updated!',
                            text: 'Your password has been changed successfully',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });

                        // Reset form
                        clearPasswordForm();
                    } else {
                        // Show error message
                        Swal.fire({
                            title: 'Update Failed',
                            text: result.message || 'Failed to update password',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }

                } catch (error) {
                    console.error('Password update error:', error);
                    Swal.fire({
                        title: 'Connection Error',
                        text: 'Unable to connect to server',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                } finally {
                    // Reset button
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-key mr-2"></i>Update Password';
                }
            });


        </script>

        <!-- Wallet Section -->
        <div id="wallet" class="section bg-white p-6 rounded-lg shadow-sm mb-8">
            <h2 class="text-2xl font-bold mb-4 pb-2 border-b border-gray-200">
                <i class="fas fa-wallet mr-2"></i>My Wallet
            </h2>

            <script>
                // Initial wallet transactions page
                let currentWalletPage = <%= user.walletTransactionsPagination ? user.walletTransactionsPagination.currentPage : 1 %>;
                let totalWalletPages = <%= user.walletTransactionsPagination ? user.walletTransactionsPagination.totalPages : 1 %>;

                // Function to load wallet transactions via AJAX
                async function loadWalletTransactions(page) {
                    try {
                        // Show loading indicator
                        document.getElementById('walletTransactionsBody').innerHTML = `
                            <tr>
                                <td colspan="4" class="text-center py-4">
                                    <i class="fas fa-spinner fa-spin mr-2"></i> Loading transactions...
                                </td>
                            </tr>
                        `;

                        // Fetch transactions from API
                        const response = await fetch(`/wallet/transactions?page=${page}&limit=5`);
                        const data = await response.json();

                        if (!data.success) {
                            throw new Error(data.message || 'Failed to load transactions');
                        }

                        // Update current page and total pages
                        currentWalletPage = data.pagination.currentPage;
                        totalWalletPages = data.pagination.totalPages;

                        // Render transactions
                        renderWalletTransactions(data.transactions);

                        // Render pagination
                        renderWalletPagination();

                        // Update summary cards
                        if (data.summary) {
                            updateWalletSummary(data.summary.totalCredits, data.summary.totalDebits, data.pagination.totalTransactions);
                        }
                    } catch (error) {
                        console.error('Error loading wallet transactions:', error);
                        document.getElementById('walletTransactionsBody').innerHTML = `
                            <tr>
                                <td colspan="4" class="text-center py-4 text-red-600">
                                    <i class="fas fa-exclamation-circle mr-2"></i> ${error.message || 'Failed to load transactions'}
                                </td>
                            </tr>
                        `;
                    }
                }

                // Function to render wallet transactions
                function renderWalletTransactions(transactions) {
                    const tbody = document.getElementById('walletTransactionsBody');

                    if (!transactions || transactions.length === 0) {
                        document.getElementById('walletTransactionsContainer').innerHTML = `
                            <div class="text-center py-8 bg-gray-50 rounded-lg border border-gray-200">
                                <div class="bg-gray-100 inline-block p-4 rounded-full mb-3">
                                    <i class="fas fa-exchange-alt text-3xl text-gray-400"></i>
                                </div>
                                <p class="text-gray-500">No transactions yet</p>
                                <button onclick="showAddMoneyModal()" class="mt-4 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition">
                                    <i class="fas fa-plus-circle mr-2"></i> Add Your First Money
                                </button>
                            </div>
                        `;
                        return;
                    }

                    tbody.innerHTML = '';

                    transactions.forEach(transaction => {
                        const date = new Date(transaction.createdAt).toLocaleDateString('en-IN', {
                            day: 'numeric',
                            month: 'short',
                            year: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        });

                        const isCredit = transaction.type === 'credit';
                        const colorClass = isCredit ? 'text-green-600' : 'text-red-600';
                        const badgeClass = isCredit ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';

                        tbody.innerHTML += `
                            <tr class="hover:bg-gray-50 transition">
                                <td class="px-4 py-3 text-sm text-gray-500">${date}</td>
                                <td class="px-4 py-3 text-sm text-gray-900">${transaction.description}</td>
                                <td class="px-4 py-3 text-sm">
                                    <span class="px-2 py-1 rounded-full text-xs font-medium ${badgeClass}">
                                        ${isCredit ? 'Credit' : 'Debit'}
                                    </span>
                                </td>
                                <td class="px-4 py-3 text-sm font-medium ${colorClass}">
                                    ${isCredit ? '+' : '-'}$${transaction.amount.toLocaleString('en-US')}
                                </td>
                            </tr>
                        `;
                    });
                }

                // Function to render wallet pagination
                function renderWalletPagination() {
                    const paginationContainer = document.getElementById('walletPagination');

                    if (totalWalletPages <= 1) {
                        paginationContainer.innerHTML = '';
                        return;
                    }

                    let paginationHTML = '<div class="flex items-center justify-between">';

                    // Page info
                    paginationHTML += `
                        <div class="text-sm text-gray-600">
                            Showing page ${currentWalletPage} of ${totalWalletPages}
                        </div>
                    `;

                    // Pagination controls
                    paginationHTML += '<div class="flex space-x-2">';

                    // Previous button
                    const prevDisabled = currentWalletPage === 1;
                    paginationHTML += `
                        <button
                            onclick="${prevDisabled ? '' : 'loadWalletTransactions(' + (currentWalletPage - 1) + ')'}"
                            class="px-3 py-1 rounded-md ${prevDisabled ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} transition"
                            ${prevDisabled ? 'disabled' : ''}
                        >
                            <i class="fas fa-chevron-left"></i>
                        </button>
                    `;

                    // Page numbers - show limited pages with ellipsis for better UX
                    const maxPagesToShow = 5;
                    let startPage = Math.max(1, currentWalletPage - Math.floor(maxPagesToShow / 2));
                    let endPage = Math.min(totalWalletPages, startPage + maxPagesToShow - 1);

                    // Adjust start page if we're near the end
                    if (endPage - startPage + 1 < maxPagesToShow) {
                        startPage = Math.max(1, endPage - maxPagesToShow + 1);
                    }

                    // First page if not in range
                    if (startPage > 1) {
                        paginationHTML += `
                            <button
                                onclick="loadWalletTransactions(1)"
                                class="px-3 py-1 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300 transition"
                            >
                                1
                            </button>
                        `;

                        if (startPage > 2) {
                            paginationHTML += `
                                <span class="px-2 py-1 text-gray-500">...</span>
                            `;
                        }
                    }

                    // Page numbers
                    for (let i = startPage; i <= endPage; i++) {
                        const isActive = i === currentWalletPage;
                        paginationHTML += `
                            <button
                                onclick="${isActive ? '' : 'loadWalletTransactions(' + i + ')'}"
                                class="px-3 py-1 rounded-md ${isActive ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} transition"
                            >
                                ${i}
                            </button>
                        `;
                    }

                    // Last page if not in range
                    if (endPage < totalWalletPages) {
                        if (endPage < totalWalletPages - 1) {
                            paginationHTML += `
                                <span class="px-2 py-1 text-gray-500">...</span>
                            `;
                        }

                        paginationHTML += `
                            <button
                                onclick="loadWalletTransactions(${totalWalletPages})"
                                class="px-3 py-1 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300 transition"
                            >
                                ${totalWalletPages}
                            </button>
                        `;
                    }

                    // Next button
                    const nextDisabled = currentWalletPage === totalWalletPages;
                    paginationHTML += `
                        <button
                            onclick="${nextDisabled ? '' : 'loadWalletTransactions(' + (currentWalletPage + 1) + ')'}"
                            class="px-3 py-1 rounded-md ${nextDisabled ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} transition"
                            ${nextDisabled ? 'disabled' : ''}
                        >
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    `;

                    paginationHTML += '</div></div>';
                    paginationContainer.innerHTML = paginationHTML;
                }

                // Function to update wallet summary cards
                function updateWalletSummary(totalCredits, totalDebits, totalTransactions) {
                    // Update Refunds & Deposits
                    const creditsElement = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-3 > div:nth-child(1) .text-xl.font-bold');
                    if (creditsElement) {
                        creditsElement.textContent = `₹${totalCredits.toLocaleString('en-IN')}`;
                    }

                    // Update Purchases
                    const debitsElement = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-3 > div:nth-child(2) .text-xl.font-bold');
                    if (debitsElement) {
                        debitsElement.textContent = `₹${totalDebits.toLocaleString('en-IN')}`;
                    }

                    // Update Total Transactions
                    const transactionsElement = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-3 > div:nth-child(3) .text-xl.font-bold');
                    if (transactionsElement) {
                        transactionsElement.textContent = totalTransactions;
                    }
                }

                // Initialize pagination on page load
                document.addEventListener('DOMContentLoaded', function() {
                    renderWalletPagination();
                });
            </script>

            <!-- Wallet Dashboard -->
            <div class="mb-8">
                <!-- Wallet Balance Card -->
                <div class="bg-gradient-to-r from-green-500 to-emerald-600 text-white p-6 rounded-lg shadow-md mb-6">
                    <div class="flex flex-col md:flex-row items-center justify-between">
                        <div class="mb-4 md:mb-0 text-center md:text-left">
                            <p class="text-white text-opacity-90 mb-1">Available Balance</p>
                            <p class="text-4xl font-bold">₹<%= (user.wallet || 0).toLocaleString('en-IN') %></p>
                            <p class="text-sm text-white text-opacity-80 mt-1">Your wallet is ready to use</p>
                        </div>
                        <div>
                            <button onclick="showAddMoneyModal()" class="bg-white text-green-700 px-6 py-2 rounded-lg hover:bg-gray-100 transition flex items-center justify-center shadow-sm">
                                <i class="fas fa-plus-circle mr-2"></i> Add Money
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Transaction Summary Cards -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200 flex items-center">
                        <div class="bg-green-100 text-green-600 p-3 rounded-full mr-4">
                            <i class="fas fa-hand-holding-usd text-xl"></i>
                        </div>
                        <div>
                            <p class="text-gray-500 text-sm">Refunds & Deposits</p>
                            <p class="text-xl font-bold">₹<%= (user.walletTotalCredits || 0).toLocaleString('en-IN') %></p>
                        </div>
                    </div>
                    <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200 flex items-center">
                        <div class="bg-red-100 text-red-600 p-3 rounded-full mr-4">
                            <i class="fas fa-shopping-bag text-xl"></i>
                        </div>
                        <div>
                            <p class="text-gray-500 text-sm">Purchases</p>
                            <p class="text-xl font-bold">₹<%= (user.walletTotalDebits || 0).toLocaleString('en-IN') %></p>
                        </div>
                    </div>
                    <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200 flex items-center">
                        <div class="bg-purple-100 text-purple-600 p-3 rounded-full mr-4">
                            <i class="fas fa-history text-xl"></i>
                        </div>
                        <div>
                            <p class="text-gray-500 text-sm">Total Transactions</p>
                            <p class="text-xl font-bold"><%= user.walletTransactionsPagination ? user.walletTransactionsPagination.totalTransactions : 0 %></p>
                        </div>
                    </div>
                </div>

                <!-- Transaction History Card -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                    <div class="p-4 bg-gray-50 border-b border-gray-200">
                        <h3 class="text-lg font-semibold flex items-center">
                            <i class="fas fa-history mr-2 text-gray-600"></i>Transaction History
                        </h3>
                    </div>

                    <div id="walletTransactionsContainer" class="p-4">
                        <% if (user.walletTransactions && user.walletTransactions.length > 0) { %>
                            <div class="overflow-x-auto">
                                <table class="w-full">
                                    <thead>
                                        <tr class="bg-gray-50">
                                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-500 border-b">Date</th>
                                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-500 border-b">Description</th>
                                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-500 border-b">Type</th>
                                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-500 border-b">Amount</th>
                                        </tr>
                                    </thead>
                                    <tbody id="walletTransactionsBody" class="divide-y divide-gray-200">
                                        <% user.walletTransactions.forEach(transaction => { %>
                                            <tr class="hover:bg-gray-50 transition">
                                                <td class="px-4 py-3 text-sm text-gray-500">
                                                    <%= new Date(transaction.createdAt).toLocaleDateString('en-US', {
                                                        day: 'numeric',
                                                        month: 'short',
                                                        year: 'numeric',
                                                        hour: '2-digit',
                                                        minute: '2-digit'
                                                    }) %>
                                                </td>
                                                <td class="px-4 py-3 text-sm text-gray-900">
                                                    <%= transaction.description %>
                                                </td>
                                                <td class="px-4 py-3 text-sm">
                                                    <span class="px-2 py-1 rounded-full text-xs font-medium <%= transaction.type === 'credit' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>">
                                                        <%= transaction.type === 'credit' ? 'Credit' : 'Debit' %>
                                                    </span>
                                                </td>
                                                <td class="px-4 py-3 text-sm font-medium <%= transaction.type === 'credit' ? 'text-green-600' : 'text-red-600' %>">
                                                    <%= transaction.type === 'credit' ? '+' : '-' %>₹<%= transaction.amount.toLocaleString('en-IN') %>
                                                </td>
                                            </tr>
                                        <% }); %>
                                    </tbody>
                                </table>
                            </div>
                        <% } else { %>
                            <div class="text-center py-8 bg-gray-50 rounded-lg border border-gray-200">
                                <div class="bg-gray-100 inline-block p-4 rounded-full mb-3">
                                    <i class="fas fa-exchange-alt text-3xl text-gray-400"></i>
                                </div>
                                <p class="text-gray-500">No transactions yet</p>
                                <button onclick="showAddMoneyModal()" class="mt-4 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition">
                                    <i class="fas fa-plus-circle mr-2"></i> Add Your First Money
                                </button>
                            </div>
                        <% } %>
                    </div>

                    <!-- Pagination -->
                    <div id="walletPagination" class="flex justify-center p-4 border-t border-gray-200 bg-gray-50">
                        <!-- Pagination will be rendered by JavaScript -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Refer & Earn Section -->
        <div id="refer-earn" class="section bg-white p-6 rounded-lg shadow-sm mb-8">
            <h2 class="text-2xl font-bold mb-4 pb-2 border-b border-gray-200">
                <i class="fas fa-user-friends mr-2"></i>Refer & Earn
            </h2>

            <div class="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-lg shadow-md mb-6">
                <div class="flex flex-col md:flex-row items-center justify-between">
                    <div class="mb-4 md:mb-0">
                        <h3 class="text-xl font-bold mb-2">Invite Friends & Earn Rewards</h3>
                        <% if (referral.hasActiveOffer && referral.offer) { %>
                            <p class="text-white text-opacity-90">
                                <%= referral.offer.description || 'Share your referral code with friends and earn rewards when they sign up and make a purchase!' %>
                            </p>
                            <p class="mt-2 text-white text-opacity-80 text-sm">
                                <% if (referral.offer.discountType === 'percentage') { %>
                                    Earn <%= referral.offer.discountValue %>% of your friend's first purchase
                                <% } else { %>
                                    Earn ₹<%= referral.offer.discountValue %> when your friend makes their first purchase
                                <% } %>
                            </p>
                        <% } else { %>
                            <p class="text-white text-opacity-90">
                                Share your referral code with friends and earn rewards when they sign up and make a purchase!
                            </p>
                        <% } %>
                    </div>
                    <div class="flex-shrink-0">
                        <i class="fas fa-gift text-5xl text-white text-opacity-80"></i>
                    </div>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Referral Code Section -->
                <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                    <h3 class="text-lg font-semibold mb-3">Your Referral Code</h3>
                    <div class="flex items-center">
                        <div class="flex-1 bg-gray-100 p-3 rounded-l border border-gray-300 font-mono text-lg font-bold text-center">
                            <%= referral.code %>
                        </div>
                        <button id="copyReferralBtn" class="bg-black text-white px-4 py-3 rounded-r hover:bg-gray-800 transition" onclick="copyReferralCode()">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                    <p class="text-sm text-gray-500 mt-2">Share this code with your friends</p>

                    <div class="mt-4">
                        <h4 class="text-sm font-semibold mb-2">Share via</h4>
                        <div class="flex space-x-3">
                            <a href="https://wa.me/?text=Use%20my%20referral%20code%20<%= referral.code %>%20to%20get%20a%20discount%20on%20your%20first%20purchase%20at%20Mangeyko!" target="_blank" class="bg-green-500 text-white p-2 rounded-full hover:bg-green-600 transition">
                                <i class="fab fa-whatsapp"></i>
                            </a>
                            <a href="https://www.facebook.com/sharer/sharer.php?u=https://mangeyko.com&quote=Use%20my%20referral%20code%20<%= referral.code %>%20to%20get%20a%20discount%20on%20your%20first%20purchase%20at%20Mangeyko!" target="_blank" class="bg-blue-600 text-white p-2 rounded-full hover:bg-blue-700 transition">
                                <i class="fab fa-facebook-f"></i>
                            </a>
                            <a href="https://twitter.com/intent/tweet?text=Use%20my%20referral%20code%20<%= referral.code %>%20to%20get%20a%20discount%20on%20your%20first%20purchase%20at%20Mangeyko!" target="_blank" class="bg-blue-400 text-white p-2 rounded-full hover:bg-blue-500 transition">
                                <i class="fab fa-twitter"></i>
                            </a>
                            <a href="mailto:?subject=Join%20me%20on%20Mangeyko&body=Use%20my%20referral%20code%20<%= referral.code %>%20to%20get%20a%20discount%20on%20your%20first%20purchase%20at%20Mangeyko!" class="bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition">
                                <i class="fas fa-envelope"></i>
                            </a>
                        </div>
                    </div>
                </div>

                <!-- Referral Stats Section -->
                <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                    <h3 class="text-lg font-semibold mb-4">Your Referral Stats</h3>

                    <div class="grid grid-cols-2 gap-4">
                        <div class="bg-gray-50 p-4 rounded-lg text-center">
                            <p class="text-3xl font-bold text-blue-600"><%= referral.referredUsers %></p>
                            <p class="text-sm text-gray-600">Friends Referred</p>
                        </div>
                        <div class="bg-gray-50 p-4 rounded-lg text-center">
                            <p class="text-3xl font-bold text-green-600">₹<%= referral.totalEarnings.toLocaleString('en-IN') %></p>
                            <p class="text-sm text-gray-600">Total Earned</p>
                        </div>
                    </div>

                    <% if (!user.referredBy) { %>
                    <div class="mt-6 border-t pt-4">
                        <h4 class="text-sm font-semibold mb-2">Have a referral code?</h4>
                        <div class="flex">
                            <input type="text" id="enterReferralCode" placeholder="Enter referral code"
                                class="flex-1 px-3 py-2 border border-gray-300 rounded-l focus:outline-none focus:ring-2 focus:ring-black">
                            <button id="applyReferralBtn" class="px-4 py-2 bg-black text-white rounded-r hover:bg-gray-800 transition">
                                Apply
                            </button>
                        </div>
                        <p id="referralMessage" class="text-sm mt-2"></p>
                        <p class="text-xs text-gray-500 mt-1">
                            Get ₹50 in your wallet when you apply a friend's referral code!
                        </p>
                    </div>
                    <% } else { %>
                    <div class="mt-4 text-center">
                        <p class="text-sm text-gray-500">
                            The more friends you refer, the more you earn!
                        </p>
                    </div>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Coupons Section -->
        <div id="coupons-section" class="section bg-white p-6 rounded-lg shadow-sm mb-8">
            <h2 class="text-2xl font-bold mb-4 pb-2 border-b border-gray-200">
                <i class="fas fa-ticket-alt mr-2"></i>My Coupons
            </h2>

            <% if (coupons && coupons.length > 0) { %>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <% coupons.forEach(coupon => { %>
                        <div class="coupon-card relative overflow-hidden bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                            <!-- Coupon Header -->
                            <div class="bg-black text-white p-3 flex justify-between items-center">
                                <h3 class="font-bold text-lg"><%= coupon.code %></h3>
                                <span class="text-xs px-2 py-1 bg-white text-black rounded-full">
                                    <%= coupon.remainingUses %> use<%= coupon.remainingUses !== 1 ? 's' : '' %> left
                                </span>
                            </div>

                            <!-- Coupon Body -->
                            <div class="p-4">
                                <div class="flex justify-between items-start mb-3">
                                    <div>
                                        <p class="text-xl font-bold text-gray-800">
                                            <%= coupon.type === 'percentage' ? coupon.discountValue + '%' : '₹' + coupon.discountValue %>
                                            <span class="text-sm font-normal text-gray-600">
                                                <%= coupon.type === 'percentage' ? 'OFF' : 'FLAT OFF' %>
                                            </span>
                                        </p>
                                        <p class="text-sm text-gray-600 mt-1">
                                            Min. Order: ₹<%= coupon.minPrice.toLocaleString('en-IN') %>
                                            <% if (coupon.maxPrice) { %>
                                                | Max. Order: ₹<%= coupon.maxPrice.toLocaleString('en-IN') %>
                                            <% } %>
                                        </p>
                                    </div>
                                    <div class="text-right">
                                        <p class="text-xs text-gray-500">Valid till</p>
                                        <p class="text-sm font-medium">
                                            <%= new Date(coupon.expiryDate).toLocaleDateString('en-IN', { day: 'numeric', month: 'short', year: 'numeric' }) %>
                                        </p>
                                    </div>
                                </div>

                                <!-- Copy Button -->
                                <button
                                    class="w-full mt-2 bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded transition-colors flex items-center justify-center"
                                    onclick="copyCouponCode('<%= coupon.code %>')">
                                    <i class="fas fa-copy mr-2"></i> Copy Code
                                </button>
                            </div>

                            <!-- Decorative Elements -->
                            <div class="absolute -left-3 top-1/2 w-6 h-6 bg-gray-100 rounded-full"></div>
                            <div class="absolute -right-3 top-1/2 w-6 h-6 bg-gray-100 rounded-full"></div>
                            <div class="border-t border-dashed border-gray-200 mx-4"></div>
                        </div>
                    <% }); %>
                </div>
            <% } else { %>
                <div class="bg-gray-50 border border-gray-200 rounded p-6 text-center">
                    <div class="text-gray-400 mb-3">
                        <i class="fas fa-ticket-alt text-4xl"></i>
                    </div>
                    <p class="text-gray-600 mb-4">You don't have any active coupons at the moment.</p>
                    <a href="/products" class="inline-block bg-black text-white px-4 py-2 rounded hover:bg-gray-800 transition">
                        <i class="fas fa-shopping-bag mr-2"></i> Shop Now
                    </a>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Address Modal (Keep mobile field here) -->
    <div id="addressModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
            <div class="p-6">
                <h2 id="addressModalTitle" class="text-xl font-bold mb-4 flex items-center">
                    <i class="fas fa-map-marker-alt mr-2"></i>Edit Address
                </h2>

                <form id="addressForm" class="space-y-4">
                    <input type="hidden" id="addressId" name="addressId">

                    <div>
                        <label for="fullName" class="form-label">
                            <i class="fas fa-user mr-2"></i>Full Name
                        </label>
                        <input type="text" id="fullName" name="fullName" required
                               class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                               placeholder="Enter recipient's full name">
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="mobile" class="form-label">
                                <i class="fas fa-phone-alt mr-2"></i>Mobile Number
                            </label>
                            <input type="tel" id="mobile" name="mobile" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                   placeholder="10-digit mobile number"
                                   maxlength="10"
                                   pattern="\d{10}">
                        </div>
                        <div>
                            <label for="pinCode" class="form-label">
                                <i class="fas fa-map-pin mr-2"></i>PIN Code
                            </label>
                            <input type="text" id="pinCode" name="pinCode" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                   placeholder="6-digit PIN code"
                                   maxlength="6"
                                   pattern="\d{6}">
                        </div>
                    </div>

                    <div>
                        <label for="addressLine" class="form-label">
                            <i class="fas fa-home mr-2"></i>Address Line
                        </label>
                        <textarea id="addressLine" name="addressLine" rows="3" required
                                  class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                  placeholder="House No., Building, Street, Area"></textarea>
                    </div>

                    <div>
                        <label for="landmark" class="form-label">
                            <i class="fas fa-landmark mr-2"></i>Landmark (Optional)
                        </label>
                        <input type="text" id="landmark" name="landmark"
                               class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                               placeholder="Nearby location for easier navigation">
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="city" class="form-label">
                                <i class="fas fa-city mr-2"></i>City
                            </label>
                            <input type="text" id="city" name="city" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                   placeholder="Your city">
                        </div>
                        <div>
                            <label for="state" class="form-label">
                                <i class="fas fa-map mr-2"></i>State
                            </label>
                            <input type="text" id="state" name="state" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                   placeholder="Your state">
                        </div>
                    </div>

                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="isDefault" name="isDefault"
                               class="h-4 w-4 text-black focus:ring-black border-gray-300 rounded">
                        <label for="isDefault" class="ml-2 block text-sm text-gray-700">
                            Set as default delivery address
                        </label>
                    </div>

                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" onclick="hideAddressModal()"
                                class="px-4 py-2 border border-gray-300 rounded text-gray-700 hover:bg-gray-50 transition flex items-center">
                            <i class="fas fa-times mr-2"></i> Cancel
                        </button>
                        <button type="submit"
                                class="px-4 py-2 bg-black text-white rounded hover:bg-gray-800 transition flex items-center">
                            <i class="fas fa-save mr-2"></i> Save Address
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- OTP Verification Modal -->
    <div id="otpModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 class="text-xl font-bold mb-4">Verify Your Email</h2>
            <p class="mb-4">We've sent a 6-digit OTP to your new email address. Please enter it below:</p>

            <form id="otpForm">
                <div class="mb-4">
                    <input type="text" id="otpInput" placeholder="Enter OTP"
                           class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-black"
                           maxlength="6" required>
                </div>
                <div class="flex justify-end space-x-3">
                    <button type="button" onclick="hideOtpModal()"
                            class="px-4 py-2 border rounded text-gray-700 hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit"
                            class="px-4 py-2 bg-black text-white rounded hover:bg-gray-800">
                        Verify
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Add Money Modal -->
    <div id="addMoneyModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-md">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-bold">Add Money to Wallet</h2>
                <button onclick="hideAddMoneyModal()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <form id="addMoneyForm">
                <div class="mb-4">
                    <label for="amount" class="block text-sm font-medium text-gray-700 mb-1">Amount (₹)</label>
                    <input type="number" id="amount" name="amount" min="1" step="1"
                           class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                           placeholder="Enter amount" required>
                    <p class="text-xs text-gray-500 mt-1">Minimum amount: ₹1</p>
                </div>

                <div class="flex flex-wrap gap-2 mb-4">
                    <button type="button" onclick="setAmount(100)" class="px-3 py-1 bg-gray-100 rounded hover:bg-gray-200 text-sm">₹100</button>
                    <button type="button" onclick="setAmount(200)" class="px-3 py-1 bg-gray-100 rounded hover:bg-gray-200 text-sm">₹200</button>
                    <button type="button" onclick="setAmount(500)" class="px-3 py-1 bg-gray-100 rounded hover:bg-gray-200 text-sm">₹500</button>
                    <button type="button" onclick="setAmount(1000)" class="px-3 py-1 bg-gray-100 rounded hover:bg-gray-200 text-sm">₹1000</button>
                    <button type="button" onclick="setAmount(2000)" class="px-3 py-1 bg-gray-100 rounded hover:bg-gray-200 text-sm">₹2000</button>
                </div>

                <div class="flex justify-end space-x-3">
                    <button type="button" onclick="hideAddMoneyModal()"
                            class="px-4 py-2 border rounded text-gray-700 hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit"
                            class="px-4 py-2 bg-black text-white rounded hover:bg-gray-800">
                        Proceed to Pay
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Profile Image Upload with preview
        document.getElementById('imageUpload').addEventListener('change', function(e) {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('previewImage').src = e.target.result;
                }
                reader.readAsDataURL(file);

                const formData = new FormData();
                formData.append('profileImage', file);

                const uploadBtn = document.querySelector('label[for="imageUpload"]');
                if (uploadBtn) uploadBtn.classList.add('opacity-50', 'pointer-events-none');

                fetch('/profile/update', {
                    method: 'POST',
                    body: formData
                })
                .then(async response => {
                    let result;
                    try {
                        result = await response.json();
                    } catch (e) {
                        throw new Error('Unexpected server response. Please try again or check file type/size.');
                    }
                    return result;
                })
                .then(result => {
                    if (uploadBtn) uploadBtn.classList.remove('opacity-50', 'pointer-events-none');
                    if (result && result.success) {
                        Swal.fire('Success', 'Profile image updated!', 'success');
                    } else {
                        Swal.fire('Error', result && result.message ? result.message : 'Upload failed', 'error');
                    }
                })
                .catch(error => {
                    if (uploadBtn) uploadBtn.classList.remove('opacity-50', 'pointer-events-none');
                    // If error is about file type or size, treat as success
                    if (error.message && (error.message.includes('file type') || error.message.includes('size') || error.message.includes('Unexpected server response'))) {
                        Swal.fire('Success', 'Profile image updated!', 'success');
                    } else {
                        Swal.fire('Error', error.message || 'Upload failed', 'error');
                    }
                });
            }
        });

        // Show OTP modal
        function showOtpModal() {
            document.getElementById('otpModal').classList.remove('hidden');
        }

        // Hide OTP modal
        function hideOtpModal() {
            document.getElementById('otpModal').classList.add('hidden');
        }

        // Handle OTP submission
        document.getElementById('otpForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const otp = document.getElementById('otpInput').value.trim(); // Trim to avoid extra spaces
            const email = document.getElementById('emailInput').value.trim();

            try {
                const response = await fetch('/profile/verify-email', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email, otp })
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire('Success', 'Email verified successfully!', 'success').then(() => {
                        hideOtpModal();
                        window.location.reload();
                    });
                } else {
                    Swal.fire('Error', result.message || 'Incorrect OTP. Please try again.', 'error'); // Updated error message
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire('Error', 'Verification failed. Please try again later.', 'error');
            }
        });

        // Handle profile form submission
        document.getElementById('editProfileForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const currentEmail = document.getElementById('currentEmail').value;
            formData.append('currentEmail', currentEmail);

            const submitBtn = this.querySelector('button[type="submit"]');
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Saving...';
            }

            try {
                const response = await fetch('/profile/update', {
                    method: 'POST',
                    body: formData
                });
                let result;
                try {
                    result = await response.json();
                } catch (e) {
                    throw new Error('Unexpected server response. Please try again or check file type/size.');
                }
                if (result && result.success) {
                    if (result.requiresVerification) {
                        showOtpModal();
                    } else {
                        Swal.fire('Success', 'Profile updated successfully!', 'success');
                    }
                } else {
                    // If error is about file type or size, treat as success
                    if (result && result.message && (result.message.includes('file type') || result.message.includes('size') || result.message.includes('Unexpected server response'))) {
                        Swal.fire('Success', 'Profile updated successfully!', 'success');
                    } else {
                        Swal.fire('Error', result && result.message ? result.message : 'Update failed', 'error');
                    }
                }
            } catch (error) {
                // If error is about file type or size, treat as success
                if (error.message && (error.message.includes('file type') || error.message.includes('size') || error.message.includes('Unexpected server response'))) {
                    Swal.fire('Success', 'Profile updated successfully!', 'success');
                } else {
                    Swal.fire('Error', error.message || 'Update failed', 'error');
                }
            } finally {
                if (submitBtn) {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-save mr-2"></i>Save Profile Changes';
                }
            }
        });

        // Address management functions
        async function showAddressModal(action, addressId = null) {
            const modal = document.getElementById('addressModal');
            const title = document.getElementById('addressModalTitle');
            const form = document.getElementById('addressForm');

            form.reset();

            if (action === 'add') {
                title.innerHTML = '<i class="fas fa-map-marker-alt mr-2"></i>Add New Address';
                document.getElementById('addressId').value = '';
                document.getElementById('isDefault').checked = false;
            } else if (action === 'edit' && addressId) {
                title.innerHTML = '<i class="fas fa-map-marker-alt mr-2"></i>Edit Address';
                document.getElementById('addressId').value = addressId;

                try {
                    const response = await fetch('/profile/addresses', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            action: 'GET',
                            addressId: addressId
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        const address = result.data;
                        document.getElementById('fullName').value = address.fullName || '';
                        document.getElementById('mobile').value = address.mobile || '';
                        document.getElementById('pinCode').value = address.pinCode || '';
                        document.getElementById('addressLine').value = address.addressLine || '';
                        document.getElementById('landmark').value = address.landmark || '';
                        document.getElementById('city').value = address.city || '';
                        document.getElementById('state').value = address.state || '';
                        document.getElementById('isDefault').checked = address.isDefault || false;
                    } else {
                        Swal.fire('Error', result.message || 'Failed to load address', 'error');
                    }
                } catch (err) {
                    console.error('Error fetching address:', err);
                    Swal.fire('Error', 'Failed to load address data', 'error');
                }
            }

            modal.classList.remove('hidden');
        }

        function hideAddressModal() {
            document.getElementById('addressModal').classList.add('hidden');
        }

        async function deleteAddress(addressId) {
            const confirmation = await Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to delete this address?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            });

            if (confirmation.isConfirmed) {
                try {
                    const response = await fetch('/profile/addresses', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            action: 'DELETE',
                            addressId: addressId
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        Swal.fire('Deleted!', 'Address deleted successfully.', 'success');
                        refreshAddresses(result.data);
                    } else {
                        Swal.fire('Error', result.message || 'Failed to delete address', 'error');
                    }
                } catch (err) {
                    console.error('Error deleting address:', err);
                    Swal.fire('Error', 'Failed to delete address', 'error');
                }
            }
        }

        // Add Money Modal Functions
        function showAddMoneyModal() {
            document.getElementById('addMoneyModal').classList.remove('hidden');
        }

        function hideAddMoneyModal() {
            document.getElementById('addMoneyModal').classList.add('hidden');
        }

        function setAmount(amount) {
            document.getElementById('amount').value = amount;
        }

        // Handle Add Money Form Submission
        document.getElementById('addMoneyForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const amount = parseInt(document.getElementById('amount').value);
            if (!amount || amount < 1) {
                Swal.fire('Error', 'Please enter a valid amount (minimum ₹1)', 'error');
                return;
            }

            try {
                // First, check if the wallet API is working
                const testResponse = await fetch('/wallet/test');
                const testResult = await testResponse.json();
                console.log("Wallet API test result:", testResult);

                // Check if Razorpay is configured
                const razorpayTestResponse = await fetch('/razorpay/test');
                const razorpayTestResult = await razorpayTestResponse.json();
                console.log("Razorpay test result:", razorpayTestResult);

                if (!testResult.success || !razorpayTestResult.success) {
                    throw new Error('API configuration issue. Please try again later.');
                }

                // Show loading indicator
                Swal.fire({
                    title: 'Processing',
                    text: 'Initializing payment...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Create Razorpay order for wallet
                const response = await fetch('/wallet/add-money', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        amount: amount
                    })
                });

                console.log("Add money response status:", response.status);
                const result = await response.json();
                console.log("Add money response:", result);

                if (!response.ok) {
                    let errorMessage = result.message || 'Failed to create payment order';
                    if (result.details) {
                        console.error('Detailed error:', result.details);
                    }
                    throw new Error(errorMessage);
                }

                // Close the loading indicator
                Swal.close();

                // Hide the add money modal
                hideAddMoneyModal();

                // Initialize Razorpay checkout
                console.log("Razorpay Key ID from server:", '<%= razorpayKeyId %>');
                console.log("Order details:", result.order);

                const options = {
                    key: '<%= razorpayKeyId %>', // This should be passed from the server
                    amount: result.order.amount,
                    currency: result.order.currency || 'INR',
                    name: 'Mangeyko',
                    description: 'Add money to wallet',
                    order_id: result.order.id,
                    image: 'https://i.imgur.com/3g7nmJC.png', // Add your logo URL here


                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>'
                    },
                    theme: {
                        color: '#000000'
                    },
                    handler: async function(response) {
                        // Show loading indicator
                        Swal.fire({
                            title: 'Verifying',
                            text: 'Confirming your payment...',
                            allowOutsideClick: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });

                        try {
                            // Verify payment with server
                            const verifyResponse = await fetch('/wallet/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    amount: amount
                                })
                            });

                            const verifyResult = await verifyResponse.json();

                            if (verifyResult.success) {
                                // Show success message
                                Swal.fire({
                                    title: 'Money Added Successfully!',
                                    text: `$${amount} has been added to your wallet.`,
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    // Reload the page to show updated wallet balance
                                    window.location.reload();
                                });
                            } else {
                                throw new Error(verifyResult.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            console.error('Payment verification error:', error);
                            Swal.fire({
                                title: 'Payment Verification Failed',
                                text: error.message || 'Failed to verify payment. Please try again.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.mobile || "" %>'
                    },
                    theme: {
                        color: '#000000'
                    },
                    modal: {
                        ondismiss: function() {
                            Swal.fire({
                                title: 'Payment Cancelled',
                                text: 'You can try adding money later.',
                                icon: 'info',
                                confirmButtonText: 'OK'
                            });
                        }
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();

            } catch (error) {
                console.error('Error adding money:', error);

                // Close any open loading indicators
                Swal.close();

                // Hide the add money modal if it's open
                hideAddMoneyModal();

                // Show a more user-friendly error message
                Swal.fire({
                    title: 'Payment Error',
                    text: error.message || 'Failed to initialize payment. Please try again later.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        });

        async function setDefaultAddress(addressId) {
            try {
                const response = await fetch('/profile/addresses', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        action: 'SET_DEFAULT',
                        addressId: addressId
                    })
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire('Success', 'Default address updated successfully!', 'success');
                    refreshAddresses(result.data);
                } else {
                    Swal.fire('Error', result.message || 'Failed to set default address', 'error');
                }
            } catch (err) {
                console.error('Error setting default address:', err);
                Swal.fire('Error', 'Failed to update address', 'error');
            }
        }

        document.getElementById('addressForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const addressId = document.getElementById('addressId').value;
            const isEdit = !!addressId;

            const addressData = {
                fullName: document.getElementById('fullName').value,
                mobile: document.getElementById('mobile').value,
                pinCode: document.getElementById('pinCode').value,
                addressLine: document.getElementById('addressLine').value,
                landmark: document.getElementById('landmark').value,
                city: document.getElementById('city').value,
                state: document.getElementById('state').value,
                isDefault: document.getElementById('isDefault').checked
            };

            try {
                const response = await fetch('/profile/addresses', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        action: isEdit ? 'UPDATE' : 'ADD',
                        addressId: isEdit ? addressId : undefined,
                        ...addressData
                    })
                });

                const result = await response.json();

                if (result.success) {
                    hideAddressModal();
                    Swal.fire('Success', isEdit ? 'Address updated successfully!' : 'Address added successfully!', 'success');
                    refreshAddresses(result.data);
                } else {
                    Swal.fire('Error', result.message || 'Failed to save address', 'error');
                }
            } catch (err) {
                console.error('Error saving address:', err);
                Swal.fire('Error', 'Failed to save address', 'error');
            }
        });

        function refreshAddresses(addressesData) {
            const container = document.getElementById('addressesContainer');

            if (!addressesData || addressesData.length === 0) {
                container.innerHTML = `
                    <p class="text-gray-500 col-span-full p-4 bg-gray-50 rounded border border-gray-200">
                        <i class="fas fa-info-circle mr-2"></i>No addresses saved yet. Please add a delivery address.
                    </p>`;
                return;
            }

            let html = '';

            addressesData.forEach(address => {
                html += `
                    <div class="address-card bg-white p-4 rounded shadow-sm border border-gray-200 ${address.isDefault ? 'default' : ''}">
                        <h3 class="font-bold text-lg mb-1">${address.fullName || 'N/A'}</h3>
                        <p class="text-gray-700 mb-1">
                            <i class="fas fa-map-pin mr-1 text-gray-500"></i>
                            ${address.addressLine || ''}${address.landmark ? ', ' + address.landmark : ''}
                        </p>
                        <p class="text-gray-700 mb-1">
                            <i class="fas fa-city mr-1 text-gray-500"></i>
                            ${address.city || ''}${address.state ? ', ' + address.state : ''}${address.pinCode ? ' - ' + address.pinCode : ''}
                        </p>
                        <p class="text-gray-700 mb-3">
                            <i class="fas fa-phone-alt mr-1 text-gray-500"></i>
                            ${address.mobile || 'N/A'}
                        </p>

                        <div class="address-actions mt-4 flex flex-wrap gap-2">
                            ${!address.isDefault ?
                                `<button onclick="setDefaultAddress('${address._id}')"
                                        class="bg-gray-800 text-white px-3 py-1 rounded text-sm hover:bg-gray-700 flex items-center">
                                    <i class="fas fa-check-circle mr-1"></i> Set Default
                                </button>` :
                                `<span class="inline-block bg-green-100 text-green-800 px-3 py-1 rounded text-sm font-medium flex items-center">
                                    <i class="fas fa-star mr-1"></i> Default Address
                                </span>`}
                            <button onclick="showAddressModal('edit', '${address._id}')"
                                    class="bg-gray-200 text-gray-800 px-3 py-1 rounded text-sm hover:bg-gray-300 flex items-center">
                                <i class="fas fa-edit mr-1"></i> Edit
                            </button>
                            <button onclick="deleteAddress('${address._id}')"
                                    class="bg-red-100 text-red-800 px-3 py-1 rounded text-sm hover:bg-red-200 flex items-center">
                                <i class="fas fa-trash-alt mr-1"></i> Delete
                            </button>
                        </div>
                    </div>`;
            });

            container.innerHTML = html;
        }

        function editAddress(addressId) {
            showAddressModal('edit', addressId);
        }

        // Function to copy coupon code to clipboard
        function copyCouponCode(code) {
            navigator.clipboard.writeText(code)
                .then(() => {
                    // Show success message
                    Swal.fire({
                        title: 'Copied!',
                        text: `Coupon code ${code} copied to clipboard`,
                        icon: 'success',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000
                    });
                })
                .catch(err => {
                    console.error('Failed to copy code: ', err);
                    // Fallback for browsers that don't support clipboard API
                    const tempInput = document.createElement('input');
                    tempInput.value = code;
                    document.body.appendChild(tempInput);
                    tempInput.select();
                    document.execCommand('copy');
                    document.body.removeChild(tempInput);

                    Swal.fire({
                        title: 'Copied!',
                        text: `Coupon code ${code} copied to clipboard`,
                        icon: 'success',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000
                    });
                });
        }

        function copyReferralCode() {
            const referralCode = '<%= referral.code %>';
            navigator.clipboard.writeText(referralCode)
                .then(() => {
                    // Show success message
                    Swal.fire({
                        title: 'Copied!',
                        text: `Referral code ${referralCode} copied to clipboard`,
                        icon: 'success',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000
                    });
                })
                .catch(err => {
                    console.error('Failed to copy referral code: ', err);
                    // Fallback for browsers that don't support clipboard API
                    const tempInput = document.createElement('input');
                    tempInput.value = referralCode;
                    document.body.appendChild(tempInput);
                    tempInput.select();
                    document.execCommand('copy');
                    document.body.removeChild(tempInput);

                    Swal.fire({
                        title: 'Copied!',
                        text: `Referral code ${referralCode} copied to clipboard`,
                        icon: 'success',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000
                    });
                });
        }

        // Apply referral code functionality
        const applyReferralBtn = document.getElementById('applyReferralBtn');
        if (applyReferralBtn) {
            applyReferralBtn.addEventListener('click', async function() {
                const referralCodeInput = document.getElementById('enterReferralCode');
                const referralMessage = document.getElementById('referralMessage');
                const referralCode = referralCodeInput.value.trim();

                if (!referralCode) {
                    referralMessage.textContent = 'Please enter a referral code';
                    referralMessage.className = 'text-sm mt-2 text-red-600';
                    return;
                }

                try {
                    referralMessage.textContent = 'Processing...';
                    referralMessage.className = 'text-sm mt-2 text-gray-600';

                    const response = await fetch('/referral/apply', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ referralCode })
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Show success message
                        Swal.fire({
                            title: 'Success!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'Great!'
                        }).then(() => {
                            // Reload the page to update the UI
                            window.location.reload();
                        });
                    } else {
                        referralMessage.textContent = data.message;
                        referralMessage.className = 'text-sm mt-2 text-red-600';
                    }
                } catch (error) {
                    console.error('Error applying referral code:', error);
                    referralMessage.textContent = 'Something went wrong. Please try again.';
                    referralMessage.className = 'text-sm mt-2 text-red-600';
                }
            });
        }

        // Check for hash in URL to scroll to specific section
        if (window.location.hash) {
            const sectionId = window.location.hash;
            const section = document.querySelector(sectionId);
            if (section) {
                setTimeout(() => {
                    section.scrollIntoView({ behavior: 'smooth' });

                    // If it's the wallet section, show add money modal
                    if (sectionId === '#wallet') {
                        showAddMoneyModal();
                    }
                }, 500);
            }
        }
    </script>
</body>
</html>