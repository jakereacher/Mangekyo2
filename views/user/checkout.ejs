<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout | Mangeyko</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        .checkout-step {
            @apply relative pb-8;
        }
        .checkout-step:not(:last-child):after {
            content: '';
            @apply absolute left-4 top-4 h-full w-0.5 bg-gray-300;
        }
        .checkout-step.completed .step-number {
            @apply bg-green-500 text-white;
        }
        .checkout-step.active .step-number {
            @apply bg-black text-white;
        }
        .checkout-step.inactive .step-number {
            @apply bg-gray-200 text-gray-600;
        }
        .address-card {
            transition: all 0.3s ease;
        }
        .address-card:hover {
            transform: translateY(-2px);
        }
        .address-card.selected {
            border-left: 4px solid black;
        }
        .payment-method:hover {
            background-color: #f9fafb;
        }
        .payment-method.selected {
            border-color: black;
            background-color: #f3f4f6;
        }
        #loadingOverlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 9999;
            justify-content: center;
            align-items: center;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Loading Overlay -->
    <div id="loadingOverlay">
        <div class="bg-white p-6 rounded-lg shadow-lg flex flex-col items-center">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-black mb-4"></div>
            <p class="text-lg font-medium">Processing your order...</p>
            <p class="text-sm text-gray-500 mt-2">Press ESC to cancel if stuck</p>
        </div>
    </div>

    <!-- Navbar -->
    <nav class="bg-white shadow-sm">
        <div class="container mx-auto px-4 py-4 flex justify-between items-center">
            <a href="/" class="text-2xl font-bold text-gray-800">
                <i class="fas fa-store mr-2"></i> Mangeyko
            </a>
            <div class="flex items-center space-x-6">
                <a href="/profile" class="text-gray-600 hover:text-gray-800 transition">Profile</a>
                <a href="/cart" class="text-gray-600 hover:text-gray-800 transition">
                    <i class="fas fa-shopping-cart"></i> Cart
                </a>
                <a href="/logout" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition">
                    Logout
                </a>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-4 py-8 max-w-6xl">
        <!-- Main Checkout Content -->
        <div class="flex flex-col lg:flex-row gap-6">
            <!-- Left Column - Checkout Steps -->
            <div class="lg:w-2/3">
                <!-- Step 1: Address Selection -->
                <div id="addressStep" class="bg-white p-6 rounded-lg shadow-sm mb-6 <%= currentStep !== 1 ? 'hidden' : '' %>">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <i class="fas fa-map-marker-alt mr-2"></i>Select Delivery Address
                    </h2>

                    <!-- Address Selection -->
                    <div class="space-y-4 mb-6" id="addressSelection">
                        <% if (addresses && addresses.length > 0) { %>
                            <% addresses.forEach(address => { %>
                                <div class="address-card bg-white p-4 rounded border border-gray-200 cursor-pointer <%= address.isDefault ? 'selected' : '' %>"
                                     onclick="selectAddress('<%= address._id %>')"
                                     data-address-id="<%= address._id %>">
                                    <div class="flex justify-between items-start">
                                        <div>
                                            <h3 class="font-bold"><%= address.fullName %></h3>
                                            <p class="text-gray-700"><%= address.addressLine %><%= address.landmark ? ', ' + address.landmark : '' %></p>
                                            <p class="text-gray-700"><%= address.city %>, <%= address.state %> - <%= address.pinCode %></p>
                                            <p class="text-gray-700">Mobile: <%= address.mobile %></p>
                                        </div>
                                        <% if (address.isDefault) { %>
                                            <span class="bg-green-100 text-green-800 px-2 py-1 rounded text-xs font-medium">
                                                Default
                                            </span>
                                        <% } %>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="bg-yellow-50 border border-yellow-200 rounded p-4 text-center">
                                <p class="text-yellow-800">
                                    <i class="fas fa-exclamation-circle mr-1"></i>
                                    No addresses found. Please add an address in your profile.
                                </p>
                                <a href="/profile" class="inline-block mt-2 text-blue-600 hover:underline">
                                    Go to Profile to Add Address
                                </a>
                            </div>
                        <% } %>
                    </div>

                    <!-- Add New Address Button -->
                    <button onclick="showAddressModal()"
                            class="bg-gray-100 text-gray-800 px-4 py-2 rounded hover:bg-gray-200 transition flex items-center mb-6">
                        <i class="fas fa-plus mr-2"></i> Add New Address
                    </button>

                    <!-- Continue to Payment Button -->
                    <div class="flex justify-end">
                        <button id="continueToPayment"
                                class="bg-black text-white px-6 py-2 rounded hover:bg-gray-800 transition <%= addresses && addresses.length > 0 ? '' : 'opacity-50 cursor-not-allowed' %>"
                                <%= addresses && addresses.length > 0 ? '' : 'disabled' %>>
                            Continue to Payment
                        </button>
                    </div>
                </div>

                <!-- Step 2: Payment Method -->
                <div id="paymentStep" class="bg-white p-6 rounded-lg shadow-sm mb-6 <%= currentStep !== 2 ? 'hidden' : '' %>">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <i class="fas fa-credit-card mr-2"></i>Select Payment Method
                    </h2>

                    <div class="space-y-3 mb-6">
                        <!-- Cash on Delivery -->
                        <% const isCodDisabled = !isCodAllowed; %>
                        <div class="payment-method p-4 border rounded cursor-pointer <%= isCodDisabled ? 'opacity-50 cursor-not-allowed' : '' %>"
                             onclick="<%= isCodDisabled ? 'showCodNotAllowedMessage()' : 'selectPaymentMethod(\'cod\')' %>"
                             data-method="cod">
                            <div class="flex items-center">
                                <div class="mr-4">
                                    <input type="radio" name="paymentMethod" id="cod" class="h-4 w-4 text-black focus:ring-black" <%= isCodDisabled ? 'disabled' : '' %>>
                                </div>
                                <div>
                                    <label for="cod" class="font-medium">Cash on Delivery (COD)</label>
                                    <p class="text-sm text-gray-600 mt-1">Pay when you receive your order</p>
                                    <% if (isCodDisabled) { %>
                                        <p class="text-xs text-red-600 mt-1">Not available for orders above â‚¹1000</p>
                                    <% } %>
                                </div>
                            </div>
                        </div>

                        <!-- Razorpay -->
                        <div class="payment-method p-4 border rounded cursor-pointer"
                             onclick="selectPaymentMethod('razorpay')"
                             data-method="razorpay">
                            <div class="flex items-center">
                                <div class="mr-4">
                                    <input type="radio" name="paymentMethod" id="razorpay" class="h-4 w-4 text-black focus:ring-black">
                                </div>
                                <div>
                                    <label for="razorpay" class="font-medium">Razorpay</label>
                                    <p class="text-sm text-gray-600 mt-1">Pay securely with Razorpay</p>
                                </div>
                            </div>
                        </div>

                        <!-- Wallet -->
                        <%
                          // Debug wallet balance
                          console.log("User object in checkout:", user);
                          console.log("Wallet balance from user:", user.wallet);

                          // Get wallet balance from user object
                          const walletBalance = typeof user.wallet === 'number' ? user.wallet : 0;
                          const totalAmount = parseFloat(total);
                          const isWalletSufficient = walletBalance >= totalAmount;

                          console.log("Wallet balance used:", walletBalance);
                          console.log("Total amount:", totalAmount);
                          console.log("Is wallet sufficient:", isWalletSufficient);
                        %>
                        <div class="payment-method p-4 border rounded cursor-pointer <%= isWalletSufficient ? '' : 'opacity-50 cursor-not-allowed' %>"
                             onclick="<%= isWalletSufficient ? 'selectPaymentMethod(\'wallet\')' : 'showInsufficientWalletMessage()' %>"
                             data-method="wallet">
                            <div class="flex items-center">
                                <div class="mr-4">
                                    <input type="radio" name="paymentMethod" id="wallet" class="h-4 w-4 text-black focus:ring-black" <%= isWalletSufficient ? '' : 'disabled' %>>
                                </div>
                                <div>
                                    <label for="wallet" class="font-medium">Wallet Balance</label>
                                    <p class="text-sm text-gray-600 mt-1">
                                        Use your wallet balance (â‚¹<%= walletBalance.toFixed(2) %> available)
                                        <% if (!isWalletSufficient) { %>
                                            <span class="text-red-500 ml-1">(Insufficient balance - need â‚¹<%= totalAmount.toFixed(2) %>)</span>
                                        <% } %>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Back and Continue Buttons -->
                    <div class="flex justify-between">
                        <button onclick="goToStep(1)"
                                class="bg-gray-200 text-gray-800 px-6 py-2 rounded hover:bg-gray-300 transition">
                            <i class="fas fa-arrow-left mr-2"></i> Back
                        </button>
                        <button id="continueToReview"
                                class="bg-black text-white px-6 py-2 rounded hover:bg-gray-800 transition">
                            Review Order
                        </button>
                    </div>
                </div>

                <!-- Step 3: Review Order -->
                <div id="reviewStep" class="bg-white p-6 rounded-lg shadow-sm <%= currentStep !== 3 ? 'hidden' : '' %>">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <i class="fas fa-clipboard-check mr-2"></i>Review Your Order
                    </h2>

                    <!-- Selected Address -->
                    <div class="mb-6">
                        <h3 class="font-bold text-lg mb-2 flex items-center">
                            <i class="fas fa-truck mr-2"></i>Delivery Address
                        </h3>
                        <div id="selectedAddressDisplay" class="bg-gray-50 p-4 rounded border border-gray-200">
                            <!-- Address will be populated here by JavaScript -->
                        </div>
                    </div>

                    <!-- Payment Method -->
                    <div class="mb-6">
                        <h3 class="font-bold text-lg mb-2 flex items-center">
                            <i class="fas fa-credit-card mr-2"></i>Payment Method
                        </h3>
                        <div id="selectedPaymentDisplay" class="bg-gray-50 p-4 rounded border border-gray-200">
                            <!-- Payment method will be populated here by JavaScript -->
                        </div>
                    </div>

                    <!-- Order Summary -->
                    <div>
                        <h3 class="font-bold text-lg mb-2 flex items-center">
                            <i class="fas fa-shopping-bag mr-2"></i>Order Summary
                        </h3>
                        <div class="bg-gray-50 p-4 rounded border border-gray-200">
                            <div class="space-y-4">
                                <% cartItems.forEach(item => { %>
                                    <div class="flex items-start pb-4 border-b border-gray-200 last:border-0">
                                        <div class="w-16 h-16 bg-gray-100 rounded overflow-hidden mr-4">
                                            <img src="/uploads/product-images/<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="w-full h-full object-cover">
                                        </div>
                                        <div class="flex-1">
                                            <h4 class="font-medium"><%= item.product.productName %></h4>
                                            <p class="text-sm text-gray-600">Quantity: <%= item.quantity %></p>
                                            <p class="text-sm text-gray-600">
                                                <% if (item.product.hasOffer && item.product.originalPrice > item.price) { %>
                                                    Price: <span class="line-through text-gray-400">â‚¹<%= item.product.originalPrice.toFixed(2) %></span>
                                                    <span class="text-green-600 font-medium">â‚¹<%= item.price.toFixed(2) %></span>
                                                    <% if (item.product.discountPercentage > 0) { %>
                                                        <span class="bg-red-600 text-white text-xs px-2 py-0.5 rounded ml-1"><%= Math.round(item.product.discountPercentage) %>% OFF</span>
                                                    <% } %>
                                                <% } else { %>
                                                    Price: â‚¹<%= item.price.toFixed(2) %>
                                                <% } %>
                                            </p>
                                        </div>
                                        <div class="text-right">
                                            <p class="font-medium">â‚¹<%= item.totalPrice.toFixed(2) %></p>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                    </div>

                    <!-- Back and Place Order Buttons -->
                    <div class="flex justify-between mt-6">
                        <button onclick="goToStep(2)"
                                class="bg-gray-200 text-gray-800 px-6 py-2 rounded hover:bg-gray-300 transition">
                            <i class="fas fa-arrow-left mr-2"></i> Back
                        </button>
                        <button id="placeOrderBtn"
                                class="bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700 transition flex items-center">
                            <i class="fas fa-check-circle mr-2"></i> Place Order
                        </button>
                    </div>
                </div>
            </div>

            <!-- Right Column - Order Summary -->
            <div class="lg:w-1/3">
                <div class="bg-white p-6 rounded-lg shadow-sm sticky top-4">
                    <h2 class="text-xl font-bold mb-4 flex items-center">
                        <i class="fas fa-receipt mr-2"></i>Order Summary
                    </h2>

                    <!-- Coupon Code Section -->
                    <div class="mb-4">
                        <div class="flex justify-between items-center">
                            <label for="couponCode" class="block text-sm font-medium text-gray-700">Apply Coupon Code</label>
                            <button id="showAvailableCouponsBtn" class="text-sm text-blue-600 hover:text-blue-800 flex items-center">
                                <i class="fas fa-tags mr-1"></i>See Available Coupons
                            </button>
                        </div>
                        <div class="flex mt-2">
                            <input type="text" id="couponCode" class="flex-1 px-3 py-2 border border-gray-300 rounded-l focus:outline-none focus:ring-2 focus:ring-black" placeholder="Enter coupon code">
                            <button id="applyCouponBtn" class="px-4 py-2 bg-black text-white rounded-r hover:bg-gray-800 transition">Apply</button>
                        </div>
                        <div class="flex items-center mt-2">
                            <p id="couponMessage" class="text-sm flex-grow"></p>
                            <button id="removeCouponBtn" class="text-sm text-red-600 hover:text-red-800 hidden">
                                <i class="fas fa-times-circle mr-1"></i>Remove
                            </button>
                        </div>
                    </div>

                    <div class="space-y-3 mb-4">
                        <div class="flex justify-between">
                            <span class="text-gray-600">Subtotal (<%= cartCount %> items)</span>
                            <span>â‚¹<%= subtotal %></span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">
                                Shipping
                                <% if (deliveryDescription) { %>
                                    <span class="text-xs text-blue-600 block">(<%= deliveryDescription %>)</span>
                                <% } %>
                            </span>
                            <span id="shippingPrice">â‚¹<%= shipping %></span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Tax (9%)</span>
                            <span>â‚¹<%= tax %></span>
                        </div>
                        <div id="discountSection" class="hidden">
                            <div class="flex justify-between">
                                <span class="text-gray-600">Discount</span>
                                <span id="discountAmount">â‚¹0.00</span>
                            </div>
                        </div>
                    </div>

                    <div class="border-t border-gray-200 pt-4 mb-4">
                        <div id="originalTotalSection" class="flex justify-between font-bold text-lg">
                            <span>Total</span>
                            <span id="finalTotal">â‚¹<%= total %></span>
                        </div>
                        <div id="discountedTotalSection" class="flex justify-between font-bold text-lg text-green-600 hidden">
                            <span>Total After Discount</span>
                            <span id="discountedTotal">â‚¹<%= total %></span>
                        </div>
                    </div>

                    <!-- Order Summary Items (for mobile) -->
                    <div class="lg:hidden border-t border-gray-200 pt-4 mt-4">
                        <h3 class="font-bold mb-2">Your Items</h3>
                        <div class="space-y-3 max-h-60 overflow-y-auto">
                            <% cartItems.forEach(item => { %>
                                <div class="flex items-center">
                                    <div class="w-12 h-12 bg-gray-100 rounded overflow-hidden mr-3">
                                        <img src="/uploads/product-images/<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="w-full h-full object-cover">
                                    </div>
                                    <div class="flex-1">
                                        <p class="text-sm font-medium"><%= item.product.productName %></p>
                                        <p class="text-xs text-gray-600">Qty: <%= item.quantity %></p>
                                        <% if (item.product.hasOffer && item.product.originalPrice > item.price) { %>
                                            <p class="text-xs text-gray-600">
                                                <span class="line-through text-gray-400">â‚¹<%= item.product.originalPrice.toFixed(2) %></span>
                                                <span class="text-green-600">â‚¹<%= item.price.toFixed(2) %></span>
                                                <span class="bg-red-600 text-white text-xs px-1 py-0.5 rounded ml-1"><%= Math.round(item.product.discountPercentage) %>%</span>
                                            </p>
                                        <% } %>
                                    </div>
                                    <div class="text-sm font-medium">
                                        â‚¹<%= item.totalPrice.toFixed(2) %>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Address Modal -->
    <div id="addressModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
            <div class="p-6">
                <h2 class="text-xl font-bold mb-4 flex items-center">
                    <i class="fas fa-map-marker-alt mr-2"></i>Add New Address
                </h2>

                <form id="addressForm" class="space-y-4">
                    <div>
                        <label for="fullName" class="form-label">
                            <i class="fas fa-user mr-2"></i>Full Name
                        </label>
                        <input type="text" id="fullName" name="fullName" required
                               class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                               placeholder="Enter recipient's full name">
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="mobile" class="form-label">
                                <i class="fas fa-phone-alt mr-2"></i>Mobile Number
                            </label>
                            <input type="tel" id="mobile" name="mobile" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                   placeholder="10-digit mobile number">
                        </div>
                        <div>
                            <label for="pinCode" class="form-label">
                                <i class="fas fa-map-pin mr-2"></i>PIN Code
                            </label>
                            <input type="text" id="pinCode" name="pinCode" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                   placeholder="6-digit PIN code">
                        </div>
                    </div>

                    <div>
                        <label for="addressLine" class="form-label">
                            <i class="fas fa-home mr-2"></i>Address Line
                        </label>
                        <textarea id="addressLine" name="addressLine" rows="3" required
                                  class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                  placeholder="House No., Building, Street, Area"></textarea>
                    </div>

                    <div>
                        <label for="landmark" class="form-label">
                            <i class="fas fa-landmark mr-2"></i>Landmark (Optional)
                        </label>
                        <input type="text" id="landmark" name="landmark"
                               class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                               placeholder="Nearby location for easier navigation">
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="city" class="form-label">
                                <i class="fas fa-city mr-2"></i>City
                            </label>
                            <input type="text" id="city" name="city" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                   placeholder="Your city">
                        </div>
                        <div>
                            <label for="state" class="form-label">
                                <i class="fas fa-map mr-2"></i>State
                            </label>
                            <input type="text" id="state" name="state" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-black"
                                   placeholder="Your state">
                        </div>
                    </div>

                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="isDefault" name="isDefault"
                               class="h-4 w-4 text-black focus:ring-black border-gray-300 rounded">
                        <label for="isDefault" class="ml-2 block text-sm text-gray-700">
                            Set as default delivery address
                        </label>
                    </div>

                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" onclick="hideAddressModal()"
                                class="px-4 py-2 border border-gray-300 rounded text-gray-700 hover:bg-gray-50 transition flex items-center">
                            <i class="fas fa-times mr-2"></i> Cancel
                        </button>
                        <button type="submit"
                                class="px-4 py-2 bg-black text-white rounded hover:bg-gray-800 transition flex items-center">
                            <i class="fas fa-save mr-2"></i> Save Address
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Global variables to store checkout data
        let selectedAddressId = '<%= defaultAddress ? defaultAddress._id : "" %>';
        let selectedPaymentMethod = '';
        let appliedCoupon = null; // Declare and initialize appliedCoupon
        let currentTotal = parseFloat('<%= total %>'); // Declare and initialize currentTotal

        // Initialize current values for calculations
        window.currentSubtotal = parseFloat('<%= subtotal %>');
        window.currentShipping = parseFloat('<%= shipping %>');
        window.currentTax = parseFloat('<%= tax %>');
        let checkoutData = {
            addressId: selectedAddressId,
            paymentMethod: '',
            couponCode: null
        };

        // Global references to DOM elements for coupon handling
        const couponCodeInput = document.getElementById('couponCode');
        const couponMessage = document.getElementById('couponMessage');
        const discountSection = document.getElementById('discountSection');
        const discountAmount = document.getElementById('discountAmount');
        const finalTotal = document.getElementById('finalTotal');
        const removeCouponBtn = document.getElementById('removeCouponBtn');
        const applyCouponBtn = document.getElementById('applyCouponBtn');

        // Global function to update order summary with coupon discount
        function updateOrderSummary(discount, finalAmount) {
            // Show discount section
            discountSection.classList.remove('hidden');
            discountAmount.textContent = `-â‚¹${discount.toFixed(2)}`;

            // Get the original total
            const originalAmount = parseFloat('<%= total %>');

            // Update the original total with strikethrough style
            document.getElementById('originalTotalSection').classList.add('line-through', 'text-gray-500');
            finalTotal.textContent = `â‚¹${originalAmount.toFixed(2)}`;

            // Show the discounted total section
            document.getElementById('discountedTotalSection').classList.remove('hidden');
            document.getElementById('discountedTotal').textContent = `â‚¹${finalAmount.toFixed(2)}`;

            // Show the remove coupon button
            removeCouponBtn.classList.remove('hidden');

            // Disable the coupon input and apply button
            couponCodeInput.disabled = true;
            applyCouponBtn.disabled = true;
        }

        // Global function to reset order summary when coupon is removed
        function resetOrderSummary() {
            // Hide the discount section
            discountSection.classList.add('hidden');

            // Reset the original total styling
            document.getElementById('originalTotalSection').classList.remove('line-through', 'text-gray-500');

            // Hide the discounted total section
            document.getElementById('discountedTotalSection').classList.add('hidden');

            // Reset the final total using current values
            const currentSubtotal = parseFloat('<%= subtotal %>');
            const currentShipping = window.currentShipping !== undefined ? window.currentShipping : parseFloat('<%= shipping %>');
            const currentTax = parseFloat('<%= tax %>');
            const resetTotal = currentSubtotal + currentShipping + currentTax;

            console.log(`Resetting total with current values - Subtotal: ${currentSubtotal}, Shipping: ${currentShipping}, Tax: ${currentTax}, Total: ${resetTotal}`);

            finalTotal.textContent = `â‚¹${resetTotal.toFixed(2)}`;

            // Reset the coupon data
            appliedCoupon = null;
            checkoutData.couponCode = null;

            // Enable the coupon input and apply button
            couponCodeInput.disabled = false;
            applyCouponBtn.disabled = false;
        }

        // Global function to show coupon error modal
        function showCouponError(message, title = "Unable to Apply Coupon", suggestion = "") {
            // Still update the inline message for accessibility
            couponMessage.textContent = message;
            couponMessage.className = "text-sm text-red-600";
            resetOrderSummary();

            // Set modal content
            document.getElementById('couponErrorTitle').textContent = title;
            document.getElementById('couponErrorMessage').textContent = message;

            // Show or hide suggestion based on whether one was provided
            const suggestionElement = document.getElementById('couponErrorSuggestion');
            if (suggestion) {
                document.getElementById('couponErrorSuggestionText').textContent = suggestion;
                suggestionElement.classList.remove('hidden');
            } else {
                suggestionElement.classList.add('hidden');
            }

            // Show the modal
            document.getElementById('couponErrorModal').classList.remove('hidden');
        }

        // Function to hide coupon error modal
        function hideCouponErrorModal() {
            document.getElementById('couponErrorModal').classList.add('hidden');
        }

        // Global function to hide the loading overlay
        function hideLoadingOverlay() {
            document.getElementById('loadingOverlay').style.display = 'none';
            console.log('Loading overlay hidden');
        }

        // Global function to show the loading overlay
        function showLoadingOverlay() {
            document.getElementById('loadingOverlay').style.display = 'flex';
            console.log('Loading overlay shown');
        }

        // Add event listener to hide loading overlay when page is about to be unloaded
        window.addEventListener('beforeunload', function() {
            hideLoadingOverlay();
        });

        // Add keyboard shortcut (Escape key) to hide loading overlay in case it gets stuck
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape' && document.getElementById('loadingOverlay').style.display === 'flex') {
                console.log('Escape key pressed: Hiding loading overlay');
                hideLoadingOverlay();
            }
        });

        // Add click handler to loading overlay to hide it when clicked
        document.getElementById('loadingOverlay').addEventListener('click', function(event) {
            // Only hide if clicking directly on the overlay (not on its children)
            if (event.target === this) {
                console.log('Loading overlay clicked: Hiding loading overlay');
                hideLoadingOverlay();
            }
        });

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // If we have a default address, select it
            if (selectedAddressId) {
                const addressCard = document.querySelector(`[data-address-id="${selectedAddressId}"]`);
                if (addressCard) {
                    addressCard.classList.add('selected');
                }
            }

            // Set up event listeners
            document.getElementById('continueToPayment').addEventListener('click', function() {
                if (!selectedAddressId) {
                    Swal.fire('Error', 'Please select a delivery address', 'error');
                    return;
                }
                goToStep(2);
            });

            document.getElementById('continueToReview').addEventListener('click', function() {
                if (!selectedPaymentMethod) {
                    Swal.fire('Error', 'Please select a payment method', 'error');
                    return;
                }
                checkoutData.paymentMethod = selectedPaymentMethod;
                updateReviewStep();
                goToStep(3);
            });

            document.getElementById('placeOrderBtn').addEventListener('click', placeOrder);

            // Address form submission
            document.getElementById('addressForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = {
                    fullName: document.getElementById('fullName').value,
                    mobile: document.getElementById('mobile').value,
                    pinCode: document.getElementById('pinCode').value,
                    addressLine: document.getElementById('addressLine').value,
                    landmark: document.getElementById('landmark').value,
                    city: document.getElementById('city').value,
                    state: document.getElementById('state').value,
                    isDefault: document.getElementById('isDefault').checked,
                    action: 'ADD'
                };

                try {
                    const response = await fetch('/profile/addresses', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    const result = await response.json();

                    if (result.success) {
                        hideAddressModal();
                        // Refresh addresses
                        const addressesContainer = document.getElementById('addressSelection');
                        if (result.data.length > 0) {
                            let html = '';
                            result.data.forEach(address => {
                                html += `
                                    <div class="address-card bg-white p-4 rounded border border-gray-200 cursor-pointer ${address.isDefault ? 'selected' : ''}"
                                         onclick="selectAddress('${address._id}')"
                                         data-address-id="${address._id}">
                                        <div class="flex justify-between items-start">
                                            <div>
                                                <h3 class="font-bold">${address.fullName}</h3>
                                                <p class="text-gray-700">${address.addressLine}${address.landmark ? ', ' + address.landmark : ''}</p>
                                                <p class="text-gray-700">${address.city}, ${address.state} - ${address.pinCode}</p>
                                                <p class="text-gray-700">Mobile: ${address.mobile}</p>
                                            </div>
                                            ${address.isDefault ? `
                                                <span class="bg-green-100 text-green-800 px-2 py-1 rounded text-xs font-medium">
                                                    Default
                                                </span>
                                            ` : ''}
                                        </div>
                                    </div>
                                `;
                            });
                            addressesContainer.innerHTML = html;

                            // Select the new address if it's default or if no address was previously selected
                            if (formData.isDefault || !selectedAddressId) {
                                const newAddressId = formData.isDefault
                                    ? result.data.find(addr => addr.isDefault)?._id
                                    : result.data[result.data.length - 1]._id;

                                if (newAddressId) {
                                    // Use setTimeout to ensure the DOM is updated before selecting the address
                                    setTimeout(() => {
                                        console.log('Selecting new address with ID:', newAddressId);
                                        selectAddress(newAddressId);

                                        // Show a notification that delivery charges are being updated
                                        Swal.fire({
                                            title: 'Address Added',
                                            text: 'Delivery charges are being updated based on your location',
                                            icon: 'success',
                                            toast: true,
                                            position: 'top-end',
                                            showConfirmButton: false,
                                            timer: 3000,
                                            timerProgressBar: true
                                        });
                                    }, 300); // Increased timeout to ensure DOM is fully updated
                                }
                            }
                        }
                    } else {
                        Swal.fire('Error', result.message || 'Failed to add address', 'error');
                    }
                } catch (error) {
                    console.error('Error adding address:', error);
                    Swal.fire('Error', 'Failed to add address', 'error');
                }
            });

            // Coupon code application
            const showAvailableCouponsBtn = document.getElementById('showAvailableCouponsBtn');

            // Initialize variables for coupon application

            applyCouponBtn.addEventListener('click', applyCoupon);
            removeCouponBtn.addEventListener('click', removeCoupon);
            showAvailableCouponsBtn.addEventListener('click', showCouponsModal);

            async function applyCoupon() {
                console.log('applyCoupon function called');
                const couponCode = couponCodeInput.value.trim();
                const subtotal = parseFloat('<%= subtotal %>');
                // Use the current shipping price if available, otherwise use the initial value
                const shipping = window.currentShipping !== undefined ? window.currentShipping : parseFloat('<%= shipping %>');
                const tax = parseFloat('<%= tax %>');
                const currentTotal = subtotal + shipping + tax;

                console.log(`Applying coupon with current values - Subtotal: ${subtotal}, Shipping: ${shipping}, Tax: ${tax}, Total: ${currentTotal}`);

                if (!couponCode) {
                    showCouponError(
                        'Please enter a coupon code to apply a discount.',
                        'No Coupon Code Entered',
                        'You can view available coupons by clicking "See Available Coupons" above.'
                    );
                    return;
                }

                // Show loading indicator
                couponMessage.textContent = 'Applying coupon...';
                couponMessage.className = "text-sm text-blue-600";

                try {
                    console.log('Sending coupon application request for code:', couponCode);
                    const response = await fetch('/apply-coupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            code: couponCode,
                            cartTotal: subtotal, // Pass subtotal without shipping/tax
                            userId: '<%= user._id %>'
                        }),
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('Server error response:', errorText);
                        throw new Error('Server error: ' + response.status);
                    }

                    const data = await response.json();
                    console.log('Coupon application response:', data);

                    if (data.success) {
                        appliedCoupon = {
                            code: data.coupon.code,
                            couponId: data.coupon.id, // Using 'id' as sent from the server
                            discount: data.discount,
                            finalAmount: currentTotal - data.discount
                        };

                        // Update checkout data with coupon information
                        checkoutData.couponCode = data.coupon.code;
                        console.log("Applied coupon:", appliedCoupon);
                        console.log("Checkout data:", checkoutData);

                        // Store coupon ID for debugging
                        localStorage.setItem('lastAppliedCouponId', data.coupon.id || '');

                        updateOrderSummary(data.discount, appliedCoupon.finalAmount);
                        couponMessage.textContent = data.message;
                        couponMessage.className = "text-sm text-green-600";

                        // Clear the timeout if it exists
                        if (window.couponMessageTimeout) {
                            clearTimeout(window.couponMessageTimeout);
                        }

                        // Set a timeout to clear the message after 3 seconds
                        window.couponMessageTimeout = setTimeout(() => {
                            couponMessage.textContent = '';
                        }, 3000);
                    } else {
                        // Handle specific error cases with more detailed messages
                        if (data.message.includes("Invalid or expired")) {
                            showCouponError(
                                'The coupon code you entered is invalid or has expired.',
                                'Invalid Coupon Code',
                                'Check for typos or try another coupon from the available coupons list.'
                            );
                        }
                        else if (data.message.includes("usage limit")) {
                            showCouponError(
                                'You have already used this coupon the maximum number of times allowed.',
                                'Usage Limit Reached',
                                'Try another coupon or continue without a discount.'
                            );
                        }
                        else if (data.message.includes("Minimum cart value")) {
                            const minAmount = data.message.match(/â‚¹(\d+)/);
                            const minAmountValue = minAmount ? minAmount[1] : '';
                            showCouponError(
                                data.message,
                                'Minimum Purchase Requirement Not Met',
                                `Add more items to your cart to reach the minimum purchase amount of â‚¹${minAmountValue}.`
                            );
                        }
                        else if (data.message.includes("maximum usage limit")) {
                            showCouponError(
                                'This coupon has been used by too many customers and is no longer available.',
                                'Coupon Fully Redeemed',
                                'Check out our other available coupons for discounts.'
                            );
                        }
                        else {
                            // Generic error for other cases
                            showCouponError(data.message);
                        }
                    }
                } catch (error) {
                    console.error('Error applying coupon:', error);
                    showCouponError(
                        'We encountered a technical issue while applying your coupon. Please try again later.',
                        'Technical Error',
                        'If this problem persists, please contact customer support.'
                    );
                }
            }

            async function removeCoupon() {
                try {
                    const response = await fetch('/remove-coupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Reset the coupon input and hide the remove button
                        couponCodeInput.value = '';
                        removeCouponBtn.classList.add('hidden');

                        // Reset the order summary
                        resetOrderSummary();

                        // Show success message
                        couponMessage.textContent = 'Coupon removed successfully';
                        couponMessage.className = "text-sm text-gray-600";

                        // Clear the timeout if it exists
                        if (window.couponMessageTimeout) {
                            clearTimeout(window.couponMessageTimeout);
                        }

                        // Set a timeout to clear the message after 3 seconds
                        window.couponMessageTimeout = setTimeout(() => {
                            couponMessage.textContent = '';
                        }, 3000);
                    } else {
                        couponMessage.textContent = data.message || 'Failed to remove coupon';
                        couponMessage.className = "text-sm text-red-600";
                    }
                } catch (error) {
                    console.error('Error removing coupon:', error);
                    couponMessage.textContent = 'Something went wrong. Try again later.';
                    couponMessage.className = "text-sm text-red-600";
                }
            }




        });

        // Function to select an address
        async function selectAddress(addressId) {
            // Remove selected class from all address cards
            document.querySelectorAll('.address-card').forEach(card => {
                card.classList.remove('selected');
            });

            // Add selected class to the clicked card
            const selectedCard = document.querySelector(`[data-address-id="${addressId}"]`);
            if (selectedCard) {
                selectedCard.classList.add('selected');
                selectedAddressId = addressId;
                checkoutData.addressId = addressId;

                // Get city and state from the selected address
                const cityElement = selectedCard.querySelector('p:nth-child(3)');
                if (cityElement) {
                    const addressText = cityElement.textContent;
                    const cityStateMatch = addressText.match(/([^,]+),\s*([^-]+)/);

                    if (cityStateMatch && cityStateMatch.length >= 3) {
                        const city = cityStateMatch[1].trim();
                        const state = cityStateMatch[2].trim();

                        // Show loading indicator for shipping
                        const shippingElement = document.querySelector('.flex.justify-between:nth-child(2) span:last-child');
                        if (shippingElement) {
                            shippingElement.innerHTML = '<span class="animate-pulse">Calculating...</span>';
                        }

                        // Calculate delivery charge based on the selected address
                        try {
                            console.log(`Calculating delivery charge for city: ${city}, state: ${state}`);
                            const response = await fetch('/calculate-delivery-charge', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ city, state })
                            });

                            const result = await response.json();
                            console.log('Delivery charge API response:', result);

                            if (result.success) {
                                // Update shipping charge and description in the UI
                                // Use direct ID selector for shipping price
                                const shippingElement = document.getElementById('shippingPrice');
                                const shippingLabelElement = document.querySelector('.flex.justify-between:nth-child(2) span:first-child');

                                // Log the elements we're trying to update
                                console.log('Shipping price element to update:', shippingElement);
                                console.log('Shipping label element to update:', shippingLabelElement);

                                if (shippingElement) {
                                    // Update the shipping price
                                    const newShippingPrice = result.shipping.toFixed(2);
                                    console.log(`Updating shipping price to: â‚¹${newShippingPrice}`);

                                    // Simple direct update
                                    shippingElement.textContent = `â‚¹${newShippingPrice}`;

                                    // Also update the shipping variable for calculations
                                    const oldShipping = window.currentShipping;
                                    window.currentShipping = result.shipping;

                                    console.log('Updated shipping price element:', shippingElement.textContent);

                                    // Show a notification about the delivery charge change
                                    if (oldShipping !== result.shipping) {
                                        // Create a more detailed explanation based on the city tier
                                        let deliveryExplanation = '';
                                        if (result.deliveryDescription.includes('Tier 1')) {
                                            deliveryExplanation = 'You qualify for our lowest delivery rate as you are in a major metropolitan city.';
                                        } else if (result.deliveryDescription.includes('Tier 2')) {
                                            deliveryExplanation = 'You qualify for our standard delivery rate as you are in an emerging metropolitan city.';
                                        } else if (result.deliveryDescription.includes('Tier 3')) {
                                            deliveryExplanation = 'A higher delivery rate applies as you are in a smaller city.';
                                        } else if (result.deliveryDescription.includes('Tier 4')) {
                                            deliveryExplanation = 'Our premium delivery rate applies as you are in a small town or village.';
                                        }

                                        Swal.fire({
                                            title: 'Delivery Charge Updated',
                                            html: `
                                                <p>Delivery charge has been updated to <strong>â‚¹${result.shipping.toFixed(2)}</strong> based on your location.</p>
                                                <p class="text-sm text-muted mt-2">${deliveryExplanation}</p>
                                            `,
                                            icon: 'info',
                                            toast: true,
                                            position: 'top-end',
                                            showConfirmButton: false,
                                            timer: 7000,
                                            timerProgressBar: true
                                        });
                                    }
                                } else {
                                    console.error('Shipping element not found!');
                                    alert('Could not update shipping price. Please refresh the page and try again.');
                                }

                                if (shippingLabelElement) {
                                    let labelHtml = 'Shipping';
                                    if (result.deliveryDescription) {
                                        // Add a more detailed explanation based on the city tier
                                        let deliveryExplanation = '';
                                        if (result.deliveryDescription.includes('Tier 1')) {
                                            deliveryExplanation = 'Lower rate for major metro';
                                        } else if (result.deliveryDescription.includes('Tier 2')) {
                                            deliveryExplanation = 'Standard rate for emerging metro';
                                        } else if (result.deliveryDescription.includes('Tier 3')) {
                                            deliveryExplanation = 'Higher rate for smaller city';
                                        } else if (result.deliveryDescription.includes('Tier 4')) {
                                            deliveryExplanation = 'Premium rate for small town';
                                        }

                                        labelHtml += `<span class="text-xs text-blue-600 block">(${result.deliveryDescription})</span>`;
                                        if (deliveryExplanation) {
                                            labelHtml += `<span class="text-xs text-gray-500 block">${deliveryExplanation}</span>`;
                                        }
                                    }
                                    shippingLabelElement.innerHTML = labelHtml;
                                    console.log(`Updated shipping label with description: ${result.deliveryDescription}`);
                                }

                                // Update the total amount
                                const subtotal = parseFloat('<%= subtotal %>');
                                const tax = parseFloat('<%= tax %>');
                                const newTotal = subtotal + result.shipping + tax;
                                console.log(`Calculating new total: ${subtotal} + ${result.shipping} + ${tax} = ${newTotal}`);

                                // Store the current values for future calculations
                                window.currentSubtotal = subtotal;
                                window.currentTax = tax;
                                window.currentTotal = newTotal;

                                // Update the total in the UI
                                const totalElement = document.getElementById('finalTotal');
                                if (totalElement) {
                                    totalElement.textContent = `â‚¹${newTotal.toFixed(2)}`;
                                    console.log(`Updated total price to: â‚¹${newTotal.toFixed(2)}`);
                                }

                                // If a coupon is applied, recalculate the final amount
                                if (appliedCoupon) {
                                    appliedCoupon.finalAmount = newTotal - appliedCoupon.discount;
                                    document.getElementById('discountedTotal').textContent = `â‚¹${appliedCoupon.finalAmount.toFixed(2)}`;
                                    console.log(`Updated discounted total to: â‚¹${appliedCoupon.finalAmount.toFixed(2)}`);
                                }
                            } else {
                                console.error('Failed to calculate delivery charge:', result.message);
                            }
                        } catch (error) {
                            console.error('Error calculating delivery charge:', error);
                        }
                    }
                }
            }
        }

        // Function to select a payment method
        function selectPaymentMethod(method) {
            // Remove selected class from all payment methods
            document.querySelectorAll('.payment-method').forEach(method => {
                method.classList.remove('selected');
            });

            // Add selected class to the clicked method
            const selectedMethod = document.querySelector(`[data-method="${method}"]`);
            if (selectedMethod) {
                selectedMethod.classList.add('selected');
                document.getElementById(method).checked = true;
                selectedPaymentMethod = method;
            }
        }

        // Function to show a message when wallet balance is insufficient
        function showInsufficientWalletMessage() {
            Swal.fire({
                title: 'Insufficient Wallet Balance',
                text: 'Your wallet balance is not enough to complete this purchase. Please add money to your wallet or choose a different payment method.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Add Money to Wallet',
                cancelButtonText: 'Choose Another Method'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Redirect to profile page to add money to wallet
                    window.location.href = '/profile#wallet';
                }
            });
        }

        // Function to show a message when COD is not allowed for orders above Rs 1000
        function showCodNotAllowedMessage() {
            Swal.fire({
                title: 'Cash on Delivery Not Available',
                text: 'Cash on Delivery is not available for orders above â‚¹1000. Please choose another payment method.',
                icon: 'info',
                confirmButtonText: 'OK'
            });
        }

        // Function to navigate between steps
        function goToStep(step) {
            document.getElementById('addressStep').classList.add('hidden');
            document.getElementById('paymentStep').classList.add('hidden');
            document.getElementById('reviewStep').classList.add('hidden');

            if (step === 1) {
                document.getElementById('addressStep').classList.remove('hidden');
            } else if (step === 2) {
                document.getElementById('paymentStep').classList.remove('hidden');
            } else if (step === 3) {
                document.getElementById('reviewStep').classList.remove('hidden');
            }
        }

        // Function to update the review step with selected options
        function updateReviewStep() {
            // Update selected address display
            const selectedAddressCard = document.querySelector(`[data-address-id="${selectedAddressId}"]`);
            if (selectedAddressCard) {
                document.getElementById('selectedAddressDisplay').innerHTML = selectedAddressCard.innerHTML;
            }

            // Update payment method display
            let paymentMethodText = '';
            if (selectedPaymentMethod === 'cod') {
                paymentMethodText = 'Cash on Delivery (Pay when you receive your order)';
            } else if (selectedPaymentMethod === 'razorpay') {
                paymentMethodText = 'Razorpay (Secure online payment)';
            } else if (selectedPaymentMethod === 'wallet') {
                // Get wallet balance from user object - use the same value we calculated earlier
                const walletBalance = <%= typeof user.wallet === 'number' ? user.wallet : 0 %>;
                paymentMethodText = `Wallet Balance (â‚¹${walletBalance.toFixed(2)} available)`;
            }
            document.getElementById('selectedPaymentDisplay').innerHTML = `
                <p class="font-medium">${paymentMethodText}</p>
            `;

            // Update checkout data with coupon information
            if (appliedCoupon) {
                checkoutData.couponCode = appliedCoupon.code;
            } else {
                checkoutData.couponCode = null;
            }
        }

        // Function to show address modal
        function showAddressModal() {
            document.getElementById('addressModal').classList.remove('hidden');
        }

        // Function to hide address modal
        function hideAddressModal() {
            document.getElementById('addressModal').classList.add('hidden');
        }

        // Function to show coupons modal
        function showCouponsModal() {
            document.getElementById('couponsModal').classList.remove('hidden');
            fetchAvailableCoupons();
        }

        // Function to hide coupons modal
        function hideCouponsModal() {
            document.getElementById('couponsModal').classList.add('hidden');
        }

        // Function to fetch available coupons
        async function fetchAvailableCoupons() {
            const couponsContainer = document.getElementById('availableCouponsContainer');

            try {
                const response = await fetch('/user-available-coupons');
                const data = await response.json();

                if (data.success && data.coupons && data.coupons.length > 0) {
                    let html = '';

                    data.coupons.forEach(coupon => {
                        const discountText = coupon.type === 'percentage'
                            ? `${coupon.discountValue}% OFF`
                            : `â‚¹${coupon.discountValue} OFF`;

                        const expiryDate = new Date(coupon.expiryDate).toLocaleDateString();

                        html += `
                            <div class="border border-gray-200 rounded-lg mb-3 overflow-hidden hover:shadow-md transition-shadow">
                                <div class="bg-gray-50 p-3 border-b border-gray-200 flex justify-between items-center">
                                    <span class="font-bold text-blue-600">${coupon.code}</span>
                                    <button
                                        onclick="copyCouponCode('${coupon.code}')"
                                        class="px-3 py-1 bg-black text-white text-sm rounded hover:bg-gray-800 transition flex items-center">
                                        <i class="fas fa-check-circle mr-1"></i> Apply
                                    </button>
                                </div>
                                <div class="p-3">
                                    <div class="flex items-center mb-2">
                                        <div class="bg-green-100 text-green-800 px-2 py-1 rounded text-sm font-medium mr-2">
                                            ${discountText}
                                        </div>
                                        <div class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm font-medium">
                                            Min: â‚¹${coupon.minPrice}
                                        </div>
                                    </div>
                                    ${coupon.maxPrice ? `
                                    <div class="mb-2">
                                        <p class="text-sm text-gray-600">Max. Order: â‚¹${coupon.maxPrice}</p>
                                    </div>` : ''}
                                    <div class="flex justify-between items-center">
                                        <span class="text-xs text-gray-500">Expires: ${expiryDate}</span>
                                    </div>
                                </div>
                            </div>
                        `;
                    });

                    couponsContainer.innerHTML = html;
                } else {
                    couponsContainer.innerHTML = `
                        <div class="text-center py-8">
                            <i class="fas fa-tag text-gray-300 text-5xl mb-3"></i>
                            <h3 class="text-lg font-medium text-gray-700">No coupons available</h3>
                            <p class="text-gray-500 mt-1">You don't have any active coupons at the moment.</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error fetching coupons:', error);
                couponsContainer.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-exclamation-circle text-red-500 text-5xl mb-3"></i>
                        <h3 class="text-lg font-medium text-gray-700">Failed to load coupons</h3>
                        <p class="text-gray-500 mt-1">Please try again later.</p>
                    </div>
                `;
            }
        }

        // Function to copy coupon code and apply it
        async function copyCouponCode(code) {
            try {
                console.log('Applying coupon from modal:', code);

                // Fill the coupon input field
                couponCodeInput.value = code;

                // Hide the modal first
                hideCouponsModal();

                // Show loading indicator
                couponMessage.textContent = 'Applying coupon...';
                couponMessage.className = "text-sm text-blue-600";

                // Get values needed for coupon application
                const subtotal = parseFloat('<%= subtotal %>');

                // Apply the coupon directly via API call
                try {
                    console.log('Sending direct coupon application request for code:', code);
                    const response = await fetch('/apply-coupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            code: code,
                            cartTotal: subtotal,
                            userId: '<%= user._id %>'
                        }),
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('Server error response:', errorText);
                        throw new Error('Server error: ' + response.status);
                    }

                    const data = await response.json();
                    console.log('Direct coupon application response:', data);

                    if (data.success) {
                        // Update global variables
                        appliedCoupon = {
                            code: data.coupon.code,
                            couponId: data.coupon.id,
                            discount: data.discount,
                            finalAmount: (subtotal + parseFloat('<%= shipping %>') + parseFloat('<%= tax %>')) - data.discount
                        };

                        // Update checkout data
                        checkoutData.couponCode = data.coupon.code;

                        // Update UI
                        updateOrderSummary(data.discount, appliedCoupon.finalAmount);
                        couponMessage.textContent = data.message;
                        couponMessage.className = "text-sm text-green-600";

                        // Show success message
                        Swal.fire({
                            title: 'Coupon Applied!',
                            text: `Coupon code "${code}" has been applied to your order`,
                            icon: 'success',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    } else {
                        // Handle specific error cases with more detailed messages
                        if (data.message.includes("Invalid or expired")) {
                            showCouponError(
                                'The coupon code you selected is invalid or has expired.',
                                'Invalid Coupon Code',
                                'This coupon may no longer be available. Try another coupon from the list.'
                            );
                        }
                        else if (data.message.includes("usage limit")) {
                            showCouponError(
                                'You have already used this coupon the maximum number of times allowed.',
                                'Usage Limit Reached',
                                'Try another coupon or continue without a discount.'
                            );
                        }
                        else if (data.message.includes("Minimum cart value")) {
                            const minAmount = data.message.match(/â‚¹(\d+)/);
                            const minAmountValue = minAmount ? minAmount[1] : '';
                            showCouponError(
                                data.message,
                                'Minimum Purchase Requirement Not Met',
                                `Add more items to your cart to reach the minimum purchase amount of â‚¹${minAmountValue}.`
                            );
                        }
                        else if (data.message.includes("maximum usage limit")) {
                            showCouponError(
                                'This coupon has been used by too many customers and is no longer available.',
                                'Coupon Fully Redeemed',
                                'Check out our other available coupons for discounts.'
                            );
                        }
                        else {
                            // Generic error for other cases
                            showCouponError(
                                data.message || 'Failed to apply coupon',
                                'Coupon Error'
                            );
                        }
                    }
                } catch (error) {
                    console.error('Error applying coupon directly:', error);
                    showCouponError(
                        'We encountered a technical issue while applying your coupon. Please try again later.',
                        'Technical Error',
                        'If this problem persists, please contact customer support.'
                    );
                }

            } catch (err) {
                console.error('Failed to handle coupon code:', err);
                showCouponError(
                    'We encountered an unexpected error while applying your coupon. Please try again.',
                    'Application Error',
                    'If this problem persists, please try a different coupon code.'
                );
            }
        }

        // Function to place the order
        async function placeOrder() {
            if (!selectedAddressId || !selectedPaymentMethod) {
                Swal.fire('Error', 'Please complete all checkout steps', 'error');
                return;
            }

            // Log the order data for debugging
            console.log("Placing order with data:", {
                paymentMethod: selectedPaymentMethod,
                addressId: selectedAddressId,
                couponCode: checkoutData.couponCode
            });

            // Show loading overlay
            showLoadingOverlay();

            try {
                const response = await fetch('/checkout/place-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        paymentMethod: selectedPaymentMethod,
                        addressId: selectedAddressId,
                        couponCode: checkoutData.couponCode
                    })
                });

                let result;
                try {
                    // Check if response is ok before trying to parse
                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error("Server error response status:", response.status);
                        console.error("Server error response text:", errorText);

                        // Try to parse error as JSON if possible
                        try {
                            const errorJson = JSON.parse(errorText);

                            // Handle specific error types
                            if (errorJson.errorType === 'COD_NOT_ALLOWED') {
                                hideLoadingOverlay();
                                showCodNotAllowedMessage();
                                return; // Exit early
                            }

                            throw new Error(errorJson.message || errorJson.error || `Server error: ${response.status}`);
                        } catch (parseError) {
                            // If parsing fails, use status text
                            throw new Error(`Server error: ${response.status} ${response.statusText}`);
                        }
                    }

                    // If response is ok, parse the JSON
                    result = await response.json();
                    console.log("Server response:", result);
                } catch (error) {
                    console.error("Error processing response:", error);
                    if (error.name === 'SyntaxError') {
                        throw new Error("Server returned an invalid response format. Please try again.");
                    }
                    throw error;
                }

                // We've already checked if response is ok in the try/catch block above
                // This code will only run if the response was ok and we successfully parsed the JSON

                if (result.success) {
                    // If payment method is Razorpay, initiate Razorpay payment
                    if (selectedPaymentMethod === 'razorpay') {
                        // Hide loading overlay temporarily
                        hideLoadingOverlay();

                        // Create Razorpay order
                        try {
                            console.log('Creating Razorpay order for order ID:', result.orderId);

                            const razorpayResponse = await fetch('/razorpay/create-order', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    orderId: result.orderId
                                })
                            });

                            let razorpayResult;
                            try {
                                // Check if response is ok before trying to parse
                                if (!razorpayResponse.ok) {
                                    const errorText = await razorpayResponse.text();
                                    console.error("Razorpay error response status:", razorpayResponse.status);
                                    console.error("Razorpay error response text:", errorText);

                                    // Try to parse error as JSON if possible
                                    try {
                                        const errorJson = JSON.parse(errorText);
                                        throw new Error(errorJson.message || errorJson.error || `Payment gateway error: ${razorpayResponse.status}`);
                                    } catch (parseError) {
                                        // If parsing fails, use status text
                                        throw new Error(`Payment gateway error: ${razorpayResponse.status} ${razorpayResponse.statusText}`);
                                    }
                                }

                                // If response is ok, parse the JSON
                                razorpayResult = await razorpayResponse.json();
                                console.log('Razorpay create order response:', razorpayResult);
                            } catch (error) {
                                console.error("Error processing Razorpay response:", error);
                                if (error.name === 'SyntaxError') {
                                    throw new Error("Payment gateway returned an invalid response format. Please try again.");
                                }
                                throw error;
                            }

                            // We've already checked if razorpayResponse is ok in the try/catch block above
                            // This code will only run if the response was ok and we successfully parsed the JSON

                            // Initialize Razorpay checkout
                            console.log('Initializing Razorpay checkout with key:', '<%= razorpayKeyId %>');

                            // Ensure we have all required data
                            if (!razorpayResult.order || !razorpayResult.order.id || !razorpayResult.order.amount) {
                                console.error('Missing required Razorpay order data:', razorpayResult);
                                throw new Error('Invalid Razorpay order data received from server');
                            }

                            // Make sure we have a valid Razorpay key
                            const razorpayKey = '<%= razorpayKeyId %>';
                            console.log('Using Razorpay key:', razorpayKey);

                            // Validate Razorpay key
                            if (!razorpayKey || razorpayKey.trim() === '') {
                                throw new Error('Razorpay key is missing or invalid');
                            }

                            // Get contact information from the selected address
                            let contactNumber = '<%= user.mobile || "" %>';
                            try {
                                const selectedAddressElement = document.querySelector(`[data-address-id="${selectedAddressId}"]`);
                                if (selectedAddressElement) {
                                    const mobileText = selectedAddressElement.textContent.match(/Mobile: (\d+)/);
                                    if (mobileText && mobileText[1]) {
                                        contactNumber = mobileText[1];
                                        console.log('Found contact number from address:', contactNumber);
                                    }
                                }
                            } catch (e) {
                                console.error('Error getting contact from address:', e);
                            }

                            const options = {
                                key: razorpayKey, // Get from server
                                amount: razorpayResult.order.amount,
                                currency: razorpayResult.order.currency || 'INR',
                                name: 'Mangeyko',
                                description: 'Purchase from Mangeyko',
                                order_id: razorpayResult.order.id,
                                image: 'https://i.imgur.com/3g7nmJC.png', // Add your logo URL here
                                notes: {
                                    order_id: result.orderId,
                                    customer_name: '<%= user.name %>'
                                },
                                handler: async function(response) {
                                    console.log('Razorpay payment successful:', response);
                                    // Show loading overlay again
                                    showLoadingOverlay();

                                    // Verify payment with server
                                    try {
                                        // Validate response
                                        if (!response.razorpay_order_id || !response.razorpay_payment_id || !response.razorpay_signature) {
                                            throw new Error('Invalid payment response from Razorpay');
                                        }

                                        console.log('Verifying payment with server...');
                                        const verifyResponse = await fetch('/razorpay/verify-payment', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({
                                                razorpay_order_id: response.razorpay_order_id,
                                                razorpay_payment_id: response.razorpay_payment_id,
                                                razorpay_signature: response.razorpay_signature,
                                                order_id: result.orderId
                                            })
                                        });

                                        const verifyResult = await verifyResponse.json();
                                        console.log('Payment verification result:', verifyResult);

                                        if (verifyResult.success) {
                                            // Hide loading overlay before showing success message
                                            hideLoadingOverlay();

                                            // Redirect to payment success page
                                            window.location.href = `/payment/success/${result.orderId}?paymentId=${response.razorpay_payment_id}`;
                                        } else {
                                            throw new Error(verifyResult.message || verifyResult.error || 'Payment verification failed');
                                        }
                                    } catch (error) {
                                        console.error('Payment verification error:', error);
                                        hideLoadingOverlay();

                                        // Redirect to payment failure page
                                        const errorMessage = encodeURIComponent(error.message || 'Payment verification failed');
                                        window.location.href = `/payment/failure/${result.orderId}?error=${errorMessage}`;
                                    }
                                },
                                prefill: {
                                    name: '<%= user.name %>',
                                    email: '<%= user.email %>',
                                    contact: contactNumber
                                },
                                theme: {
                                    color: '#000000'
                                },
                                modal: {
                                    ondismiss: function() {
                                        hideLoadingOverlay();
                                        // Redirect to payment failure page with cancelled message
                                        const errorMessage = encodeURIComponent('Payment was cancelled. You can retry payment from your order details page.');
                                        window.location.href = `/payment/failure/${result.orderId}?error=${errorMessage}`;
                                    }
                                }
                            };

                            const rzp = new Razorpay(options);
                            rzp.open();

                            // Add a safety timeout to hide the loading overlay after 60 seconds
                            // in case something goes wrong and it doesn't get hidden properly
                            setTimeout(() => {
                                if (document.getElementById('loadingOverlay').style.display === 'flex') {
                                    console.log('Safety timeout: Hiding loading overlay after 60 seconds');
                                    hideLoadingOverlay();
                                }
                            }, 60000);

                        } catch (razorpayError) {
                            console.error('Razorpay error:', razorpayError);
                            hideLoadingOverlay();

                            // Get error message
                            let errorMessage = 'Failed to initialize payment';

                            if (razorpayError.message) {
                                errorMessage = razorpayError.message;
                            }

                            // Log additional details for debugging
                            console.log('Order ID:', result.orderId);
                            console.log('Payment method:', selectedPaymentMethod);
                            console.log('Razorpay key:', '<%= razorpayKeyId %>');

                            // Redirect to payment failure page
                            const encodedError = encodeURIComponent(errorMessage);
                            window.location.href = `/payment/failure/${result.orderId}?error=${encodedError}`;
                        }
                    } else if (selectedPaymentMethod === 'wallet') {
                        // For wallet payments, check if there's a redirect URL
                        if (result.redirect) {
                            window.location.href = result.redirect;
                        } else {
                            // Fallback to order details page
                            window.location.href = `/orders/${result.orderId}`;
                        }
                    } else {
                        // For other payment methods (like COD), check if there's a redirect URL
                        if (result.redirect) {
                            window.location.href = result.redirect;
                        } else {
                            // Fallback to order details page
                            window.location.href = `/orders/${result.orderId}`;
                        }
                    }
                } else {
                    // Hide loading overlay
                    hideLoadingOverlay();

                    if (result.redirect) {
                        window.location.href = result.redirect;
                    } else {
                        Swal.fire('Error', result.message || 'Failed to place order', 'error');
                    }
                }
            } catch (error) {
                console.error('Error placing order:', error);
                hideLoadingOverlay();

                // Check if it's a wallet-related error
                if (error.message && error.message.toLowerCase().includes('wallet')) {
                    Swal.fire({
                        title: 'Wallet Payment Failed',
                        text: error.message || 'Failed to process wallet payment.',
                        icon: 'error',
                        showCancelButton: true,
                        confirmButtonText: 'Add Money to Wallet',
                        cancelButtonText: 'Choose Another Method'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Redirect to profile page to add money to wallet
                            window.location.href = '/profile#wallet';
                        } else {
                            // Go back to payment method selection
                            goToStep(2);
                        }
                    });
                } else {
                    // For other errors
                    Swal.fire({
                        title: 'Error',
                        text: error.message || 'Failed to place order. Please try again later.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            }
        }
    </script>

    <!-- Available Coupons Modal -->
    <div id="couponsModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] flex flex-col">
            <div class="p-6 border-b">
                <div class="flex justify-between items-center">
                    <h2 class="text-xl font-bold flex items-center">
                        <i class="fas fa-tags mr-2"></i>Available Coupons
                    </h2>
                    <button onclick="hideCouponsModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
            </div>

            <div class="p-4 overflow-y-auto flex-grow" id="availableCouponsContainer">
                <!-- Coupons will be loaded here -->
                <div class="flex justify-center items-center h-32">
                    <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-black"></div>
                </div>
            </div>

            <div class="p-4 border-t">
                <button onclick="hideCouponsModal()" class="w-full py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition">
                    Close
                </button>
            </div>
        </div>
    </div>

    <!-- Coupon Error Modal -->
    <div id="couponErrorModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
            <div class="p-6 border-b border-red-100 bg-red-50 rounded-t-lg">
                <div class="flex justify-between items-center">
                    <h2 class="text-xl font-bold text-red-600 flex items-center">
                        <i class="fas fa-exclamation-circle mr-2"></i>Coupon Error
                    </h2>
                    <button onclick="hideCouponErrorModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
            </div>

            <div class="p-6">
                <div id="couponErrorIcon" class="flex justify-center mb-4">
                    <i class="fas fa-times-circle text-red-500 text-5xl"></i>
                </div>
                <h3 id="couponErrorTitle" class="text-lg font-medium text-center mb-2">Unable to Apply Coupon</h3>
                <p id="couponErrorMessage" class="text-gray-600 text-center"></p>

                <div id="couponErrorSuggestion" class="mt-4 p-3 bg-blue-50 rounded-lg text-blue-700 text-sm hidden">
                    <i class="fas fa-lightbulb mr-1"></i> <span id="couponErrorSuggestionText"></span>
                </div>
            </div>

            <div class="p-4 border-t">
                <button onclick="hideCouponErrorModal()" class="w-full py-2 bg-red-500 text-white rounded hover:bg-red-600 transition">
                    Close
                </button>
            </div>
        </div>
    </div>
</body>
</html>